{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///home/user/veterinariamagali/src/lib/firebaseAdmin.js"],"sourcesContent":["\nimport admin from 'firebase-admin';\n\n// Esta es la forma correcta y recomendada de inicializar el Admin SDK.\n// Se asegura de que la inicialización solo ocurra una vez.\nif (!admin.apps.length) {\n  try {\n    // Al llamar a initializeApp() sin argumentos, el SDK buscará automáticamente\n    // las credenciales del entorno (Application Default Credentials), que es\n    // la práctica recomendada en entornos de Google Cloud como Firebase Studio.\n    admin.initializeApp();\n  } catch (error) {\n    console.error('Error en la inicialización de Firebase Admin SDK:', error);\n  }\n}\n\n/**\n * Verifica la cookie de sesión de Firebase y devuelve el UID del usuario.\n * @param {string} sessionCookie La cadena de la cookie de sesión.\n * @returns {Promise<string|null>} El UID del usuario o null si la cookie no es válida.\n */\nexport async function getUserIdFromSession(sessionCookie) {\n  if (!sessionCookie) {\n    return null;\n  }\n  try {\n    // Verificamos la cookie de sesión. El `true` comprueba si ha sido revocada.\n    const decodedClaims = await admin.auth().verifySessionCookie(sessionCookie, true);\n    return decodedClaims.uid;\n  } catch (error) {\n    // La cookie de sesión es inválida o ha expirado.\n    console.error('Error al verificar la cookie de sesión:', error.code);\n    return null;\n  }\n}\n\n// Exportamos la instancia de admin ya inicializada.\nexport default admin;\n"],"names":[],"mappings":";;;;;;AACA;;AAEA,uEAAuE;AACvE,2DAA2D;AAC3D,IAAI,CAAC,sIAAK,CAAC,IAAI,CAAC,MAAM,EAAE;IACtB,IAAI;QACF,6EAA6E;QAC7E,yEAAyE;QACzE,4EAA4E;QAC5E,sIAAK,CAAC,aAAa;IACrB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qDAAqD;IACrE;AACF;AAOO,eAAe,qBAAqB,aAAa;IACtD,IAAI,CAAC,eAAe;QAClB,OAAO;IACT;IACA,IAAI;QACF,4EAA4E;QAC5E,MAAM,gBAAgB,MAAM,sIAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,eAAe;QAC5E,OAAO,cAAc,GAAG;IAC1B,EAAE,OAAO,OAAO;QACd,iDAAiD;QACjD,QAAQ,KAAK,CAAC,2CAA2C,MAAM,IAAI;QACnE,OAAO;IACT;AACF;uCAGe,sIAAK","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///home/user/veterinariamagali/src/app/actions/turnosActions.js"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport admin from '@/lib/firebaseAdmin';\n\n// --- Lógica para Turnos de Peluquería ---\n\nconst MAX_PERROS_GRANDES_POR_DIA = 2;\nconst MAX_TURNOS_POR_TURNO_PELUQUERIA = 8;\n\nexport async function solicitarTurnoPeluqueria(turnoData) {\n    const { clienteId, mascotaId, fecha, turno, servicios } = turnoData;\n\n    if (!clienteId || !mascotaId || !fecha || !turno) {\n        return { success: false, error: 'Faltan datos esenciales para solicitar el turno.' };\n    }\n\n    const firestore = admin.firestore();\n\n    try {\n        const mascotaRef = firestore.collection('users').doc(clienteId).collection('mascotas').doc(mascotaId);\n        const mascotaSnap = await mascotaRef.get();\n\n        if (!mascotaSnap.exists) {\n            return { success: false, error: 'La mascota seleccionada no existe.' };\n        }\n        const tamañoMascota = mascotaSnap.data().tamaño;\n\n        const resultado = await firestore.runTransaction(async (transaction) => {\n            const turnosRef = firestore.collection('turnos');\n\n            if (tamañoMascota === 'grande') {\n                const qGrandes = turnosRef\n                    .where('fecha', '==', fecha)\n                    .where('tipo', '==', 'peluqueria')\n                    .where('tamañoMascota', '==', 'grande')\n                    .where('estado', 'in', ['pendiente', 'confirmado']);\n                \n                const snapGrandes = await transaction.get(qGrandes);\n                if (snapGrandes.docs.length >= MAX_PERROS_GRANDES_POR_DIA) {\n                    throw new Error('El cupo para perros grandes en esta fecha ya está completo.');\n                }\n            }\n\n            const qTurno = turnosRef\n                .where('fecha', '==', fecha)\n                .where('turno', '==', turno)\n                .where('tipo', '==', 'peluqueria')\n                .where('estado', 'in', ['pendiente', 'confirmado']);\n\n            const snapTurno = await transaction.get(qTurno);\n            if (snapTurno.docs.length >= MAX_TURNOS_POR_TURNO_PELUQUERIA) {\n                throw new Error(`El turno de la ${turno} para esta fecha ya está completo.`);\n            }\n\n            const nuevoTurnoRef = firestore.collection('turnos').doc();\n            transaction.set(nuevoTurnoRef, {\n                ...turnoData,\n                tamañoMascota,\n                estado: 'pendiente',\n                createdAt: new Date().toISOString(),\n            });\n\n            return { success: true, turnoId: nuevoTurnoRef.id };\n        });\n\n        revalidatePath('/mis-turnos');\n        return resultado;\n\n    } catch (error) {\n        console.error('Error en la transacción de solicitud de turno de peluquería:', error);\n        return { success: false, error: error.message };\n    }\n}\n\n\n// --- Lógica para Turnos de Consulta ---\n\nexport async function solicitarTurno(turnoData) {\n    const { clienteId, mascotaId, fecha, motivo } = turnoData;\n\n    if (!clienteId || !mascotaId || !fecha || !motivo) {\n        return { success: false, error: 'Faltan datos esenciales para solicitar el turno.' };\n    }\n\n    const firestore = admin.firestore();\n\n    try {\n        const nuevoTurnoRef = firestore.collection('turnos').doc();\n        \n        await nuevoTurnoRef.set({\n            ...turnoData,\n            tipo: 'consulta',\n            estado: 'pendiente', // Las consultas siempre inician como pendientes de confirmación\n            createdAt: new Date().toISOString(),\n        });\n\n        // Revalidamos la ruta para que el usuario vea su nueva solicitud\n        revalidatePath('/mis-turnos');\n\n        return { success: true, turnoId: nuevoTurnoRef.id };\n\n    } catch (error) {\n        console.error('Error al solicitar el turno de consulta:', error);\n        return { success: false, error: 'Ocurrió un error inesperado al guardar la solicitud.' };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///home/user/veterinariamagali/.next-internal/server/app/turnos/consulta/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {solicitarTurno as '40ee6d2b131e078c3d3c97d4d5f08185db97354768'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///home/user/veterinariamagali/src/app/turnos/consulta/page.js/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/turnos/consulta/page.js <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/turnos/consulta/page.js <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAmS,GAChU,iEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///home/user/veterinariamagali/src/app/turnos/consulta/page.js/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/turnos/consulta/page.js from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/turnos/consulta/page.js\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA+Q,GAC5S,6CACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}
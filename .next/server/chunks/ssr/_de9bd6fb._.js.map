{"version":3,"sources":["turbopack:///[project]/node_modules/next/src/build/webpack/loaders/next-flight-loader/server-reference.ts","turbopack:///[project]/node_modules/next/src/server/lib/trace/constants.ts","turbopack:///[project]/node_modules/next/src/shared/lib/is-thenable.ts","turbopack:///[project]/node_modules/next/src/server/lib/trace/tracer.ts","turbopack:///[project]/node_modules/next/src/lib/detached-promise.ts","turbopack:///[project]/node_modules/next/src/server/stream-utils/encoded-tags.ts","turbopack:///[project]/node_modules/next/src/server/stream-utils/uint8array-helpers.ts","turbopack:///[project]/node_modules/next/src/shared/lib/errors/constants.ts","turbopack:///[project]/node_modules/next/src/shared/lib/segment-cache/output-export-prefetch-encoding.ts","turbopack:///[project]/node_modules/next/src/server/stream-utils/node-web-streams-helper.ts","turbopack:///[project]/node_modules/next/src/server/app-render/encryption-utils.ts","turbopack:///[project]/node_modules/next/src/server/app-render/encryption.ts","turbopack:///[project]/node_modules/next/src/server/lib/clone-response.ts","turbopack:///[project]/node_modules/next/src/server/lib/dedupe-fetch.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/types.ts","turbopack:///[project]/node_modules/next/src/lib/batcher.ts","turbopack:///[project]/node_modules/next/src/server/request-meta.ts","turbopack:///[project]/node_modules/next/src/server/base-http/helpers.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/adapters/next-request.ts","turbopack:///[project]/node_modules/next/src/server/client-component-renderer-logger.ts","turbopack:///[project]/node_modules/next/src/server/pipe-readable.ts","turbopack:///[project]/node_modules/next/src/server/render-result.ts","turbopack:///[project]/node_modules/next/src/server/route-kind.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/utils.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/index.ts","turbopack:///[project]/node_modules/next/src/server/lib/patch-fetch.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/unstable-cache.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/sorted-routes.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/is-dynamic.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/index.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/revalidate.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/unstable-no-store.ts","turbopack:///[project]/node_modules/next/src/server/use-cache/cache-life.ts","turbopack:///[project]/node_modules/next/src/server/use-cache/cache-tag.ts","turbopack:///[project]/node_modules/next/cache.js","turbopack:///[project]/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-validate.ts","turbopack:///[project]/src/app/actions.js"],"sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nexport { registerServerReference } from 'react-server-dom-webpack/server'\n","/**\n * Contains predefined constants for the trace span name in next/server.\n *\n * Currently, next/server/tracer is internal implementation only for tracking\n * next.js's implementation only with known span names defined here.\n **/\n\n// eslint typescript has a bug with TS enums\n/* eslint-disable no-shadow */\n\nenum BaseServerSpan {\n  handleRequest = 'BaseServer.handleRequest',\n  run = 'BaseServer.run',\n  pipe = 'BaseServer.pipe',\n  getStaticHTML = 'BaseServer.getStaticHTML',\n  render = 'BaseServer.render',\n  renderToResponseWithComponents = 'BaseServer.renderToResponseWithComponents',\n  renderToResponse = 'BaseServer.renderToResponse',\n  renderToHTML = 'BaseServer.renderToHTML',\n  renderError = 'BaseServer.renderError',\n  renderErrorToResponse = 'BaseServer.renderErrorToResponse',\n  renderErrorToHTML = 'BaseServer.renderErrorToHTML',\n  render404 = 'BaseServer.render404',\n}\n\nenum LoadComponentsSpan {\n  loadDefaultErrorComponents = 'LoadComponents.loadDefaultErrorComponents',\n  loadComponents = 'LoadComponents.loadComponents',\n}\n\nenum NextServerSpan {\n  getRequestHandler = 'NextServer.getRequestHandler',\n  getServer = 'NextServer.getServer',\n  getServerRequestHandler = 'NextServer.getServerRequestHandler',\n  createServer = 'createServer.createServer',\n}\n\nenum NextNodeServerSpan {\n  compression = 'NextNodeServer.compression',\n  getBuildId = 'NextNodeServer.getBuildId',\n  createComponentTree = 'NextNodeServer.createComponentTree',\n  clientComponentLoading = 'NextNodeServer.clientComponentLoading',\n  getLayoutOrPageModule = 'NextNodeServer.getLayoutOrPageModule',\n  generateStaticRoutes = 'NextNodeServer.generateStaticRoutes',\n  generateFsStaticRoutes = 'NextNodeServer.generateFsStaticRoutes',\n  generatePublicRoutes = 'NextNodeServer.generatePublicRoutes',\n  generateImageRoutes = 'NextNodeServer.generateImageRoutes.route',\n  sendRenderResult = 'NextNodeServer.sendRenderResult',\n  proxyRequest = 'NextNodeServer.proxyRequest',\n  runApi = 'NextNodeServer.runApi',\n  render = 'NextNodeServer.render',\n  renderHTML = 'NextNodeServer.renderHTML',\n  imageOptimizer = 'NextNodeServer.imageOptimizer',\n  getPagePath = 'NextNodeServer.getPagePath',\n  getRoutesManifest = 'NextNodeServer.getRoutesManifest',\n  findPageComponents = 'NextNodeServer.findPageComponents',\n  getFontManifest = 'NextNodeServer.getFontManifest',\n  getServerComponentManifest = 'NextNodeServer.getServerComponentManifest',\n  getRequestHandler = 'NextNodeServer.getRequestHandler',\n  renderToHTML = 'NextNodeServer.renderToHTML',\n  renderError = 'NextNodeServer.renderError',\n  renderErrorToHTML = 'NextNodeServer.renderErrorToHTML',\n  render404 = 'NextNodeServer.render404',\n  startResponse = 'NextNodeServer.startResponse',\n\n  // nested inner span, does not require parent scope name\n  route = 'route',\n  onProxyReq = 'onProxyReq',\n  apiResolver = 'apiResolver',\n  internalFetch = 'internalFetch',\n}\n\nenum StartServerSpan {\n  startServer = 'startServer.startServer',\n}\n\nenum RenderSpan {\n  getServerSideProps = 'Render.getServerSideProps',\n  getStaticProps = 'Render.getStaticProps',\n  renderToString = 'Render.renderToString',\n  renderDocument = 'Render.renderDocument',\n  createBodyResult = 'Render.createBodyResult',\n}\n\nenum AppRenderSpan {\n  renderToString = 'AppRender.renderToString',\n  renderToReadableStream = 'AppRender.renderToReadableStream',\n  getBodyResult = 'AppRender.getBodyResult',\n  fetch = 'AppRender.fetch',\n}\n\nenum RouterSpan {\n  executeRoute = 'Router.executeRoute',\n}\n\nenum NodeSpan {\n  runHandler = 'Node.runHandler',\n}\n\nenum AppRouteRouteHandlersSpan {\n  runHandler = 'AppRouteRouteHandlers.runHandler',\n}\n\nenum ResolveMetadataSpan {\n  generateMetadata = 'ResolveMetadata.generateMetadata',\n  generateViewport = 'ResolveMetadata.generateViewport',\n}\n\nenum MiddlewareSpan {\n  execute = 'Middleware.execute',\n}\n\ntype SpanTypes =\n  | `${BaseServerSpan}`\n  | `${LoadComponentsSpan}`\n  | `${NextServerSpan}`\n  | `${StartServerSpan}`\n  | `${NextNodeServerSpan}`\n  | `${RenderSpan}`\n  | `${RouterSpan}`\n  | `${AppRenderSpan}`\n  | `${NodeSpan}`\n  | `${AppRouteRouteHandlersSpan}`\n  | `${ResolveMetadataSpan}`\n  | `${MiddlewareSpan}`\n\n// This list is used to filter out spans that are not relevant to the user\nexport const NextVanillaSpanAllowlist = [\n  MiddlewareSpan.execute,\n  BaseServerSpan.handleRequest,\n  RenderSpan.getServerSideProps,\n  RenderSpan.getStaticProps,\n  AppRenderSpan.fetch,\n  AppRenderSpan.getBodyResult,\n  RenderSpan.renderDocument,\n  NodeSpan.runHandler,\n  AppRouteRouteHandlersSpan.runHandler,\n  ResolveMetadataSpan.generateMetadata,\n  ResolveMetadataSpan.generateViewport,\n  NextNodeServerSpan.createComponentTree,\n  NextNodeServerSpan.findPageComponents,\n  NextNodeServerSpan.getLayoutOrPageModule,\n  NextNodeServerSpan.startResponse,\n  NextNodeServerSpan.clientComponentLoading,\n]\n\n// These Spans are allowed to be always logged\n// when the otel log prefix env is set\nexport const LogSpanAllowList = [\n  NextNodeServerSpan.findPageComponents,\n  NextNodeServerSpan.createComponentTree,\n  NextNodeServerSpan.clientComponentLoading,\n]\n\nexport {\n  BaseServerSpan,\n  LoadComponentsSpan,\n  NextServerSpan,\n  NextNodeServerSpan,\n  StartServerSpan,\n  RenderSpan,\n  RouterSpan,\n  AppRenderSpan,\n  NodeSpan,\n  AppRouteRouteHandlersSpan,\n  ResolveMetadataSpan,\n  MiddlewareSpan,\n}\n\nexport type { SpanTypes }\n","/**\n * Check to see if a value is Thenable.\n *\n * @param promise the maybe-thenable value\n * @returns true if the value is thenable\n */\nexport function isThenable<T = unknown>(\n  promise: Promise<T> | T\n): promise is Promise<T> {\n  return (\n    promise !== null &&\n    typeof promise === 'object' &&\n    'then' in promise &&\n    typeof promise.then === 'function'\n  )\n}\n","import type { FetchEventResult } from '../../web/types'\nimport type { TextMapSetter } from '@opentelemetry/api'\nimport type { SpanTypes } from './constants'\nimport { LogSpanAllowList, NextVanillaSpanAllowlist } from './constants'\n\nimport type {\n  ContextAPI,\n  Span,\n  SpanOptions,\n  Tracer,\n  AttributeValue,\n  TextMapGetter,\n} from 'next/dist/compiled/@opentelemetry/api'\nimport { isThenable } from '../../../shared/lib/is-thenable'\n\nlet api: typeof import('next/dist/compiled/@opentelemetry/api')\n\n// we want to allow users to use their own version of @opentelemetry/api if they\n// want to, so we try to require it first, and if it fails we fall back to the\n// version that is bundled with Next.js\n// this is because @opentelemetry/api has to be synced with the version of\n// @opentelemetry/tracing that is used, and we don't want to force users to use\n// the version that is bundled with Next.js.\n// the API is ~stable, so this should be fine\nif (process.env.NEXT_RUNTIME === 'edge') {\n  api = require('@opentelemetry/api') as typeof import('@opentelemetry/api')\n} else {\n  try {\n    api = require('@opentelemetry/api') as typeof import('@opentelemetry/api')\n  } catch (err) {\n    api =\n      require('next/dist/compiled/@opentelemetry/api') as typeof import('next/dist/compiled/@opentelemetry/api')\n  }\n}\n\nconst { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } =\n  api\n\nexport class BubbledError extends Error {\n  constructor(\n    public readonly bubble?: boolean,\n    public readonly result?: FetchEventResult\n  ) {\n    super()\n  }\n}\n\nexport function isBubbledError(error: unknown): error is BubbledError {\n  if (typeof error !== 'object' || error === null) return false\n  return error instanceof BubbledError\n}\n\nconst closeSpanWithError = (span: Span, error?: Error) => {\n  if (isBubbledError(error) && error.bubble) {\n    span.setAttribute('next.bubble', true)\n  } else {\n    if (error) {\n      span.recordException(error)\n      span.setAttribute('error.type', error.name)\n    }\n    span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message })\n  }\n  span.end()\n}\n\ntype TracerSpanOptions = Omit<SpanOptions, 'attributes'> & {\n  parentSpan?: Span\n  spanName?: string\n  attributes?: Partial<Record<AttributeNames, AttributeValue | undefined>>\n  hideSpan?: boolean\n}\n\ninterface NextTracer {\n  getContext(): ContextAPI\n\n  /**\n   * Instruments a function by automatically creating a span activated on its\n   * scope.\n   *\n   * The span will automatically be finished when one of these conditions is\n   * met:\n   *\n   * * The function returns a promise, in which case the span will finish when\n   * the promise is resolved or rejected.\n   * * The function takes a callback as its second parameter, in which case the\n   * span will finish when that callback is called.\n   * * The function doesn't accept a callback and doesn't return a promise, in\n   * which case the span will finish at the end of the function execution.\n   *\n   */\n  trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n  trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n\n  /**\n   * Wrap a function to automatically create a span activated on its\n   * scope when it's called.\n   *\n   * The span will automatically be finished when one of these conditions is\n   * met:\n   *\n   * * The function returns a promise, in which case the span will finish when\n   * the promise is resolved or rejected.\n   * * The function takes a callback as its last parameter, in which case the\n   * span will finish when that callback is called.\n   * * The function doesn't accept a callback and doesn't return a promise, in\n   * which case the span will finish at the end of the function execution.\n   */\n  wrap<T = (...args: Array<any>) => any>(type: SpanTypes, fn: T): T\n  wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: T\n  ): T\n  wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: (...args: any[]) => TracerSpanOptions,\n    fn: T\n  ): T\n\n  /**\n   * Starts and returns a new Span representing a logical unit of work.\n   *\n   * This method do NOT modify the current Context by default. In result, any inner span will not\n   * automatically set its parent context to the span created by this method unless manually activate\n   * context via `tracer.getContext().with`. `trace`, or `wrap` is generally recommended as it gracefully\n   * handles context activation. (ref: https://github.com/open-telemetry/opentelemetry-js/issues/1923)\n   */\n  startSpan(type: SpanTypes): Span\n  startSpan(type: SpanTypes, options: TracerSpanOptions): Span\n\n  /**\n   * Returns currently activated span if current context is in the scope of the span.\n   * Returns undefined otherwise.\n   */\n  getActiveScopeSpan(): Span | undefined\n\n  /**\n   * Returns trace propagation data for the currently active context. The format is equal to data provided\n   * through the OpenTelemetry propagator API.\n   */\n  getTracePropagationData(): ClientTraceDataEntry[]\n}\n\ntype NextAttributeNames =\n  | 'next.route'\n  | 'next.page'\n  | 'next.rsc'\n  | 'next.segment'\n  | 'next.span_name'\n  | 'next.span_type'\n  | 'next.clientComponentLoadCount'\ntype OTELAttributeNames = `http.${string}` | `net.${string}`\ntype AttributeNames = NextAttributeNames | OTELAttributeNames\n\n/** we use this map to propagate attributes from nested spans to the top span */\nconst rootSpanAttributesStore = new Map<\n  number,\n  Map<AttributeNames, AttributeValue | undefined>\n>()\nconst rootSpanIdKey = api.createContextKey('next.rootSpanId')\nlet lastSpanId = 0\nconst getSpanId = () => lastSpanId++\n\nexport interface ClientTraceDataEntry {\n  key: string\n  value: string\n}\n\nconst clientTraceDataSetter: TextMapSetter<ClientTraceDataEntry[]> = {\n  set(carrier, key, value) {\n    carrier.push({\n      key,\n      value,\n    })\n  },\n}\n\nclass NextTracerImpl implements NextTracer {\n  /**\n   * Returns an instance to the trace with configured name.\n   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,\n   * This should be lazily evaluated.\n   */\n  private getTracerInstance(): Tracer {\n    return trace.getTracer('next.js', '0.0.1')\n  }\n\n  public getContext(): ContextAPI {\n    return context\n  }\n\n  public getTracePropagationData(): ClientTraceDataEntry[] {\n    const activeContext = context.active()\n    const entries: ClientTraceDataEntry[] = []\n    propagation.inject(activeContext, entries, clientTraceDataSetter)\n    return entries\n  }\n\n  public getActiveScopeSpan(): Span | undefined {\n    return trace.getSpan(context?.active())\n  }\n\n  public withPropagatedContext<T, C>(\n    carrier: C,\n    fn: () => T,\n    getter?: TextMapGetter<C>\n  ): T {\n    const activeContext = context.active()\n    if (trace.getSpanContext(activeContext)) {\n      // Active span is already set, too late to propagate.\n      return fn()\n    }\n    const remoteContext = propagation.extract(activeContext, carrier, getter)\n    return context.with(remoteContext, fn)\n  }\n\n  // Trace, wrap implementation is inspired by datadog trace implementation\n  // (https://datadoghq.dev/dd-trace-js/interfaces/tracer.html#trace).\n  public trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  public trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n  public trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  public trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n  public trace<T>(...args: Array<any>) {\n    const [type, fnOrOptions, fnOrEmpty] = args\n\n    // coerce options form overload\n    const {\n      fn,\n      options,\n    }: {\n      fn: (span?: Span, done?: (error?: Error) => any) => T | Promise<T>\n      options: TracerSpanOptions\n    } =\n      typeof fnOrOptions === 'function'\n        ? {\n            fn: fnOrOptions,\n            options: {},\n          }\n        : {\n            fn: fnOrEmpty,\n            options: { ...fnOrOptions },\n          }\n\n    const spanName = options.spanName ?? type\n\n    if (\n      (!NextVanillaSpanAllowlist.includes(type) &&\n        process.env.NEXT_OTEL_VERBOSE !== '1') ||\n      options.hideSpan\n    ) {\n      return fn()\n    }\n\n    // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.\n    let spanContext = this.getSpanContext(\n      options?.parentSpan ?? this.getActiveScopeSpan()\n    )\n    let isRootSpan = false\n\n    if (!spanContext) {\n      spanContext = context?.active() ?? ROOT_CONTEXT\n      isRootSpan = true\n    } else if (trace.getSpanContext(spanContext)?.isRemote) {\n      isRootSpan = true\n    }\n\n    const spanId = getSpanId()\n\n    options.attributes = {\n      'next.span_name': spanName,\n      'next.span_type': type,\n      ...options.attributes,\n    }\n\n    return context.with(spanContext.setValue(rootSpanIdKey, spanId), () =>\n      this.getTracerInstance().startActiveSpan(\n        spanName,\n        options,\n        (span: Span) => {\n          const startTime =\n            'performance' in globalThis && 'measure' in performance\n              ? globalThis.performance.now()\n              : undefined\n\n          const onCleanup = () => {\n            rootSpanAttributesStore.delete(spanId)\n            if (\n              startTime &&\n              process.env.NEXT_OTEL_PERFORMANCE_PREFIX &&\n              LogSpanAllowList.includes(type || ('' as any))\n            ) {\n              performance.measure(\n                `${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(\n                  type.split('.').pop() || ''\n                ).replace(\n                  /[A-Z]/g,\n                  (match: string) => '-' + match.toLowerCase()\n                )}`,\n                {\n                  start: startTime,\n                  end: performance.now(),\n                }\n              )\n            }\n          }\n\n          if (isRootSpan) {\n            rootSpanAttributesStore.set(\n              spanId,\n              new Map(\n                Object.entries(options.attributes ?? {}) as [\n                  AttributeNames,\n                  AttributeValue | undefined,\n                ][]\n              )\n            )\n          }\n          try {\n            if (fn.length > 1) {\n              return fn(span, (err) => closeSpanWithError(span, err))\n            }\n\n            const result = fn(span)\n            if (isThenable(result)) {\n              // If there's error make sure it throws\n              return result\n                .then((res) => {\n                  span.end()\n                  // Need to pass down the promise result,\n                  // it could be react stream response with error { error, stream }\n                  return res\n                })\n                .catch((err) => {\n                  closeSpanWithError(span, err)\n                  throw err\n                })\n                .finally(onCleanup)\n            } else {\n              span.end()\n              onCleanup()\n            }\n\n            return result\n          } catch (err: any) {\n            closeSpanWithError(span, err)\n            onCleanup()\n            throw err\n          }\n        }\n      )\n    )\n  }\n\n  public wrap<T = (...args: Array<any>) => any>(type: SpanTypes, fn: T): T\n  public wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: T\n  ): T\n  public wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: (...args: any[]) => TracerSpanOptions,\n    fn: T\n  ): T\n  public wrap(...args: Array<any>) {\n    const tracer = this\n    const [name, options, fn] =\n      args.length === 3 ? args : [args[0], {}, args[1]]\n\n    if (\n      !NextVanillaSpanAllowlist.includes(name) &&\n      process.env.NEXT_OTEL_VERBOSE !== '1'\n    ) {\n      return fn\n    }\n\n    return function (this: any) {\n      let optionsObj = options\n      if (typeof optionsObj === 'function' && typeof fn === 'function') {\n        optionsObj = optionsObj.apply(this, arguments)\n      }\n\n      const lastArgId = arguments.length - 1\n      const cb = arguments[lastArgId]\n\n      if (typeof cb === 'function') {\n        const scopeBoundCb = tracer.getContext().bind(context.active(), cb)\n        return tracer.trace(name, optionsObj, (_span, done) => {\n          arguments[lastArgId] = function (err: any) {\n            done?.(err)\n            return scopeBoundCb.apply(this, arguments)\n          }\n\n          return fn.apply(this, arguments)\n        })\n      } else {\n        return tracer.trace(name, optionsObj, () => fn.apply(this, arguments))\n      }\n    }\n  }\n\n  public startSpan(type: SpanTypes): Span\n  public startSpan(type: SpanTypes, options: TracerSpanOptions): Span\n  public startSpan(...args: Array<any>): Span {\n    const [type, options]: [string, TracerSpanOptions | undefined] = args as any\n\n    const spanContext = this.getSpanContext(\n      options?.parentSpan ?? this.getActiveScopeSpan()\n    )\n    return this.getTracerInstance().startSpan(type, options, spanContext)\n  }\n\n  private getSpanContext(parentSpan?: Span) {\n    const spanContext = parentSpan\n      ? trace.setSpan(context.active(), parentSpan)\n      : undefined\n\n    return spanContext\n  }\n\n  public getRootSpanAttributes() {\n    const spanId = context.active().getValue(rootSpanIdKey) as number\n    return rootSpanAttributesStore.get(spanId)\n  }\n\n  public setRootSpanAttribute(key: AttributeNames, value: AttributeValue) {\n    const spanId = context.active().getValue(rootSpanIdKey) as number\n    const attributes = rootSpanAttributesStore.get(spanId)\n    if (attributes) {\n      attributes.set(key, value)\n    }\n  }\n}\n\nconst getTracer = (() => {\n  const tracer = new NextTracerImpl()\n\n  return () => tracer\n})()\n\nexport { getTracer, SpanStatusCode, SpanKind }\nexport type { NextTracer, Span, SpanOptions, ContextAPI, TracerSpanOptions }\n","/**\n * A `Promise.withResolvers` implementation that exposes the `resolve` and\n * `reject` functions on a `Promise`.\n *\n * @see https://tc39.es/proposal-promise-with-resolvers/\n */\nexport class DetachedPromise<T = any> {\n  public readonly resolve: (value: T | PromiseLike<T>) => void\n  public readonly reject: (reason: any) => void\n  public readonly promise: Promise<T>\n\n  constructor() {\n    let resolve: (value: T | PromiseLike<T>) => void\n    let reject: (reason: any) => void\n\n    // Create the promise and assign the resolvers to the object.\n    this.promise = new Promise<T>((res, rej) => {\n      resolve = res\n      reject = rej\n    })\n\n    // We know that resolvers is defined because the Promise constructor runs\n    // synchronously.\n    this.resolve = resolve!\n    this.reject = reject!\n  }\n}\n","export const ENCODED_TAGS = {\n  // opening tags do not have the closing `>` since they can contain other attributes such as `<body className=''>`\n  OPENING: {\n    // <html\n    HTML: new Uint8Array([60, 104, 116, 109, 108]),\n    // <body\n    BODY: new Uint8Array([60, 98, 111, 100, 121]),\n  },\n  CLOSED: {\n    // </head>\n    HEAD: new Uint8Array([60, 47, 104, 101, 97, 100, 62]),\n    // </body>\n    BODY: new Uint8Array([60, 47, 98, 111, 100, 121, 62]),\n    // </html>\n    HTML: new Uint8Array([60, 47, 104, 116, 109, 108, 62]),\n    // </body></html>\n    BODY_AND_HTML: new Uint8Array([\n      60, 47, 98, 111, 100, 121, 62, 60, 47, 104, 116, 109, 108, 62,\n    ]),\n  },\n  META: {\n    // Only the match the prefix cause the suffix can be different wether it's xml compatible or not \">\" or \"/>\"\n    // <meta name=\"«nxt-icon»\"\n    // This is a special mark that will be replaced by the icon insertion script tag.\n    ICON_MARK: new Uint8Array([\n      60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 194, 171, 110, 120,\n      116, 45, 105, 99, 111, 110, 194, 187, 34,\n    ]),\n  },\n} as const\n","/**\n * Find the starting index of Uint8Array `b` within Uint8Array `a`.\n */\nexport function indexOfUint8Array(a: Uint8Array, b: Uint8Array) {\n  if (b.length === 0) return 0\n  if (a.length === 0 || b.length > a.length) return -1\n\n  // start iterating through `a`\n  for (let i = 0; i <= a.length - b.length; i++) {\n    let completeMatch = true\n    // from index `i`, iterate through `b` and check for mismatch\n    for (let j = 0; j < b.length; j++) {\n      // if the values do not match, then this isn't a complete match, exit `b` iteration early and iterate to next index of `a`.\n      if (a[i + j] !== b[j]) {\n        completeMatch = false\n        break\n      }\n    }\n\n    if (completeMatch) {\n      return i\n    }\n  }\n\n  return -1\n}\n\n/**\n * Check if two Uint8Arrays are strictly equivalent.\n */\nexport function isEquivalentUint8Arrays(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false\n  }\n\n  return true\n}\n\n/**\n * Remove Uint8Array `b` from Uint8Array `a`.\n *\n * If `b` is not in `a`, `a` is returned unchanged.\n *\n * Otherwise, the function returns a new Uint8Array instance with size `a.length - b.length`\n */\nexport function removeFromUint8Array(a: Uint8Array, b: Uint8Array) {\n  const tagIndex = indexOfUint8Array(a, b)\n  if (tagIndex === 0) return a.subarray(b.length)\n  if (tagIndex > -1) {\n    const removed = new Uint8Array(a.length - b.length)\n    removed.set(a.slice(0, tagIndex))\n    removed.set(a.slice(tagIndex + b.length), tagIndex)\n    return removed\n  } else {\n    return a\n  }\n}\n","export const MISSING_ROOT_TAGS_ERROR = 'NEXT_MISSING_ROOT_TAGS'\n","// In output: export mode, the build id is added to the start of the HTML\n// document, directly after the doctype declaration. During a prefetch, the\n// client performs a range request to get the build id, so it can check whether\n// the target page belongs to the same build.\n//\n// The first 64 bytes of the document are requested. The exact number isn't\n// too important; it must be larger than the build id + doctype + closing and\n// ending comment markers, but it doesn't need to match the end of the\n// comment exactly.\n//\n// Build ids are 21 bytes long in the default implementation, though this\n// can be overridden in the Next.js config. For the purposes of this check,\n// it's OK to only match the start of the id, so we'll truncate it if exceeds\n// a certain length.\n\nconst DOCTYPE_PREFIX = '<!DOCTYPE html>' // 15 bytes\nconst MAX_BUILD_ID_LENGTH = 24\n\n// Request the first 64 bytes. The Range header is inclusive of the end value.\nexport const DOC_PREFETCH_RANGE_HEADER_VALUE = 'bytes=0-63'\n\nfunction escapeBuildId(buildId: string) {\n  // If the build id is longer than the given limit, it's OK for our purposes\n  // to only match the beginning.\n  const truncated = buildId.slice(0, MAX_BUILD_ID_LENGTH)\n  // Replace hyphens with underscores so it doesn't break the HTML comment.\n  // (Unlikely, but if this did happen it would break the whole document.)\n  return truncated.replace(/-/g, '_')\n}\n\nexport function insertBuildIdComment(originalHtml: string, buildId: string) {\n  if (\n    // Skip if the build id contains a closing comment marker.\n    buildId.includes('-->') ||\n    // React always inserts a doctype at the start of the document. Skip if it\n    // isn't present. Shouldn't happen; suggests an issue elsewhere.\n    !originalHtml.startsWith(DOCTYPE_PREFIX)\n  ) {\n    // Return the original HTML unchanged. This means the document will not\n    // be prefetched.\n    // TODO: The build id comment is currently only used during prefetches, but\n    // if we eventually use this mechanism for regular navigations, we may need\n    // to error during build if we fail to insert it for some reason.\n    return originalHtml\n  }\n  // The comment must be inserted after the doctype.\n  return originalHtml.replace(\n    DOCTYPE_PREFIX,\n    DOCTYPE_PREFIX + '<!--' + escapeBuildId(buildId) + '-->'\n  )\n}\n\nexport function doesExportedHtmlMatchBuildId(\n  partialHtmlDocument: string,\n  buildId: string\n) {\n  // Check whether the document starts with the expected buildId.\n  return partialHtmlDocument.startsWith(\n    DOCTYPE_PREFIX + '<!--' + escapeBuildId(buildId) + '-->'\n  )\n}\n","import type { ReactDOMServerReadableStream } from 'react-dom/server'\nimport { getTracer } from '../lib/trace/tracer'\nimport { AppRenderSpan } from '../lib/trace/constants'\nimport { DetachedPromise } from '../../lib/detached-promise'\nimport { scheduleImmediate, atLeastOneTask } from '../../lib/scheduler'\nimport { ENCODED_TAGS } from './encoded-tags'\nimport {\n  indexOfUint8Array,\n  isEquivalentUint8Arrays,\n  removeFromUint8Array,\n} from './uint8array-helpers'\nimport { MISSING_ROOT_TAGS_ERROR } from '../../shared/lib/errors/constants'\nimport { insertBuildIdComment } from '../../shared/lib/segment-cache/output-export-prefetch-encoding'\n\nfunction voidCatch() {\n  // this catcher is designed to be used with pipeTo where we expect the underlying\n  // pipe implementation to forward errors but we don't want the pipeTo promise to reject\n  // and be unhandled\n}\n\n// We can share the same encoder instance everywhere\n// Notably we cannot do the same for TextDecoder because it is stateful\n// when handling streaming data\nconst encoder = new TextEncoder()\n\nexport function chainStreams<T>(\n  ...streams: ReadableStream<T>[]\n): ReadableStream<T> {\n  // If we have no streams, return an empty stream. This behavior is\n  // intentional as we're now providing the `RenderResult.EMPTY` value.\n  if (streams.length === 0) {\n    return new ReadableStream<T>({\n      start(controller) {\n        controller.close()\n      },\n    })\n  }\n\n  // If we only have 1 stream we fast path it by returning just this stream\n  if (streams.length === 1) {\n    return streams[0]\n  }\n\n  const { readable, writable } = new TransformStream()\n\n  // We always initiate pipeTo immediately. We know we have at least 2 streams\n  // so we need to avoid closing the writable when this one finishes.\n  let promise = streams[0].pipeTo(writable, { preventClose: true })\n\n  let i = 1\n  for (; i < streams.length - 1; i++) {\n    const nextStream = streams[i]\n    promise = promise.then(() =>\n      nextStream.pipeTo(writable, { preventClose: true })\n    )\n  }\n\n  // We can omit the length check because we halted before the last stream and there\n  // is at least two streams so the lastStream here will always be defined\n  const lastStream = streams[i]\n  promise = promise.then(() => lastStream.pipeTo(writable))\n\n  // Catch any errors from the streams and ignore them, they will be handled\n  // by whatever is consuming the readable stream.\n  promise.catch(voidCatch)\n\n  return readable\n}\n\nexport function streamFromString(str: string): ReadableStream<Uint8Array> {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(encoder.encode(str))\n      controller.close()\n    },\n  })\n}\n\nexport function streamFromBuffer(chunk: Buffer): ReadableStream<Uint8Array> {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(chunk)\n      controller.close()\n    },\n  })\n}\n\nexport async function streamToBuffer(\n  stream: ReadableStream<Uint8Array>\n): Promise<Buffer> {\n  const reader = stream.getReader()\n  const chunks: Uint8Array[] = []\n\n  while (true) {\n    const { done, value } = await reader.read()\n    if (done) {\n      break\n    }\n\n    chunks.push(value)\n  }\n\n  return Buffer.concat(chunks)\n}\n\nexport async function streamToString(\n  stream: ReadableStream<Uint8Array>,\n  signal?: AbortSignal\n): Promise<string> {\n  const decoder = new TextDecoder('utf-8', { fatal: true })\n  let string = ''\n\n  for await (const chunk of stream) {\n    if (signal?.aborted) {\n      return string\n    }\n\n    string += decoder.decode(chunk, { stream: true })\n  }\n\n  string += decoder.decode()\n\n  return string\n}\n\nexport function createBufferedTransformStream(): TransformStream<\n  Uint8Array,\n  Uint8Array\n> {\n  let bufferedChunks: Array<Uint8Array> = []\n  let bufferByteLength: number = 0\n  let pending: DetachedPromise<void> | undefined\n\n  const flush = (controller: TransformStreamDefaultController) => {\n    // If we already have a pending flush, then return early.\n    if (pending) return\n\n    const detached = new DetachedPromise<void>()\n    pending = detached\n\n    scheduleImmediate(() => {\n      try {\n        const chunk = new Uint8Array(bufferByteLength)\n        let copiedBytes = 0\n\n        for (let i = 0; i < bufferedChunks.length; i++) {\n          const bufferedChunk = bufferedChunks[i]\n          chunk.set(bufferedChunk, copiedBytes)\n          copiedBytes += bufferedChunk.byteLength\n        }\n        // We just wrote all the buffered chunks so we need to reset the bufferedChunks array\n        // and our bufferByteLength to prepare for the next round of buffered chunks\n        bufferedChunks.length = 0\n        bufferByteLength = 0\n        controller.enqueue(chunk)\n      } catch {\n        // If an error occurs while enqueuing it can't be due to this\n        // transformers fault. It's likely due to the controller being\n        // errored due to the stream being cancelled.\n      } finally {\n        pending = undefined\n        detached.resolve()\n      }\n    })\n  }\n\n  return new TransformStream({\n    transform(chunk, controller) {\n      // Combine the previous buffer with the new chunk.\n      bufferedChunks.push(chunk)\n      bufferByteLength += chunk.byteLength\n\n      // Flush the buffer to the controller.\n      flush(controller)\n    },\n    flush() {\n      if (!pending) return\n\n      return pending.promise\n    },\n  })\n}\n\nfunction createPrefetchCommentStream(\n  isBuildTimePrerendering: boolean,\n  buildId: string\n): TransformStream<Uint8Array, Uint8Array> {\n  // Insert an extra comment at the beginning of the HTML document. This must\n  // come after the DOCTYPE, which is inserted by React.\n  //\n  // The first chunk sent by React will contain the doctype. After that, we can\n  // pass through the rest of the chunks as-is.\n  let didTransformFirstChunk = false\n  return new TransformStream({\n    transform(chunk, controller) {\n      if (isBuildTimePrerendering && !didTransformFirstChunk) {\n        didTransformFirstChunk = true\n        const decoder = new TextDecoder('utf-8', { fatal: true })\n        const chunkStr = decoder.decode(chunk, {\n          stream: true,\n        })\n        const updatedChunkStr = insertBuildIdComment(chunkStr, buildId)\n        controller.enqueue(encoder.encode(updatedChunkStr))\n        return\n      }\n      controller.enqueue(chunk)\n    },\n  })\n}\n\nexport function renderToInitialFizzStream({\n  ReactDOMServer,\n  element,\n  streamOptions,\n}: {\n  ReactDOMServer: {\n    renderToReadableStream: typeof import('react-dom/server').renderToReadableStream\n  }\n  element: React.ReactElement\n  streamOptions?: Parameters<typeof ReactDOMServer.renderToReadableStream>[1]\n}): Promise<ReactDOMServerReadableStream> {\n  return getTracer().trace(AppRenderSpan.renderToReadableStream, async () =>\n    ReactDOMServer.renderToReadableStream(element, streamOptions)\n  )\n}\n\nfunction createMetadataTransformStream(\n  insert: () => Promise<string> | string\n): TransformStream<Uint8Array, Uint8Array> {\n  let chunkIndex = -1\n  let isMarkRemoved = false\n\n  return new TransformStream({\n    async transform(chunk, controller) {\n      let iconMarkIndex = -1\n      let closedHeadIndex = -1\n      chunkIndex++\n\n      if (isMarkRemoved) {\n        controller.enqueue(chunk)\n        return\n      }\n      let iconMarkLength = 0\n      // Only search for the closed head tag once\n      if (iconMarkIndex === -1) {\n        iconMarkIndex = indexOfUint8Array(chunk, ENCODED_TAGS.META.ICON_MARK)\n        if (iconMarkIndex === -1) {\n          controller.enqueue(chunk)\n          return\n        } else {\n          // When we found the `<meta name=\"«nxt-icon»\"` tag prefix, we will remove it from the chunk.\n          // Its close tag could either be `/>` or `>`, checking the next char to ensure we cover both cases.\n          iconMarkLength = ENCODED_TAGS.META.ICON_MARK.length\n          // Check if next char is /, this is for xml mode.\n          if (chunk[iconMarkIndex + iconMarkLength] === 47) {\n            iconMarkLength += 2\n          } else {\n            // The last char is `>`\n            iconMarkLength++\n          }\n        }\n      }\n\n      // Check if icon mark is inside <head> tag in the first chunk.\n      if (chunkIndex === 0) {\n        closedHeadIndex = indexOfUint8Array(chunk, ENCODED_TAGS.CLOSED.HEAD)\n        if (iconMarkIndex !== -1) {\n          // The mark icon is located in the 1st chunk before the head tag.\n          // We do not need to insert the script tag in this case because it's in the head.\n          // Just remove the icon mark from the chunk.\n          if (iconMarkIndex < closedHeadIndex) {\n            const replaced = new Uint8Array(chunk.length - iconMarkLength)\n\n            // Remove the icon mark from the chunk.\n            replaced.set(chunk.subarray(0, iconMarkIndex))\n            replaced.set(\n              chunk.subarray(iconMarkIndex + iconMarkLength),\n              iconMarkIndex\n            )\n            chunk = replaced\n          } else {\n            // The icon mark is after the head tag, replace and insert the script tag at that position.\n            const insertion = await insert()\n            const encodedInsertion = encoder.encode(insertion)\n            const insertionLength = encodedInsertion.length\n            const replaced = new Uint8Array(\n              chunk.length - iconMarkLength + insertionLength\n            )\n            replaced.set(chunk.subarray(0, iconMarkIndex))\n            replaced.set(encodedInsertion, iconMarkIndex)\n            replaced.set(\n              chunk.subarray(iconMarkIndex + iconMarkLength),\n              iconMarkIndex + insertionLength\n            )\n            chunk = replaced\n          }\n          isMarkRemoved = true\n        }\n        // If there's no icon mark located, it will be handled later when if present in the following chunks.\n      } else {\n        // When it's appeared in the following chunks, we'll need to\n        // remove the mark and then insert the script tag at that position.\n        const insertion = await insert()\n        const encodedInsertion = encoder.encode(insertion)\n        const insertionLength = encodedInsertion.length\n        // Replace the icon mark with the hoist script or empty string.\n        const replaced = new Uint8Array(\n          chunk.length - iconMarkLength + insertionLength\n        )\n        // Set the first part of the chunk, before the icon mark.\n        replaced.set(chunk.subarray(0, iconMarkIndex))\n        // Set the insertion after the icon mark.\n        replaced.set(encodedInsertion, iconMarkIndex)\n\n        // Set the rest of the chunk after the icon mark.\n        replaced.set(\n          chunk.subarray(iconMarkIndex + iconMarkLength),\n          iconMarkIndex + insertionLength\n        )\n        chunk = replaced\n        isMarkRemoved = true\n      }\n      controller.enqueue(chunk)\n    },\n  })\n}\n\nfunction createHeadInsertionTransformStream(\n  insert: () => Promise<string>\n): TransformStream<Uint8Array, Uint8Array> {\n  let inserted = false\n\n  // We need to track if this transform saw any bytes because if it didn't\n  // we won't want to insert any server HTML at all\n  let hasBytes = false\n\n  return new TransformStream({\n    async transform(chunk, controller) {\n      hasBytes = true\n\n      const insertion = await insert()\n      if (inserted) {\n        if (insertion) {\n          const encodedInsertion = encoder.encode(insertion)\n          controller.enqueue(encodedInsertion)\n        }\n        controller.enqueue(chunk)\n      } else {\n        // TODO (@Ethan-Arrowood): Replace the generic `indexOfUint8Array` method with something finely tuned for the subset of things actually being checked for.\n        const index = indexOfUint8Array(chunk, ENCODED_TAGS.CLOSED.HEAD)\n        // In fully static rendering or non PPR rendering cases:\n        // `/head>` will always be found in the chunk in first chunk rendering.\n        if (index !== -1) {\n          if (insertion) {\n            const encodedInsertion = encoder.encode(insertion)\n            // Get the total count of the bytes in the chunk and the insertion\n            // e.g.\n            // chunk = <head><meta charset=\"utf-8\"></head>\n            // insertion = <script>...</script>\n            // output = <head><meta charset=\"utf-8\"> [ <script>...</script> ] </head>\n            const insertedHeadContent = new Uint8Array(\n              chunk.length + encodedInsertion.length\n            )\n            // Append the first part of the chunk, before the head tag\n            insertedHeadContent.set(chunk.slice(0, index))\n            // Append the server inserted content\n            insertedHeadContent.set(encodedInsertion, index)\n            // Append the rest of the chunk\n            insertedHeadContent.set(\n              chunk.slice(index),\n              index + encodedInsertion.length\n            )\n            controller.enqueue(insertedHeadContent)\n          } else {\n            controller.enqueue(chunk)\n          }\n          inserted = true\n        } else {\n          // This will happens in PPR rendering during next start, when the page is partially rendered.\n          // When the page resumes, the head tag will be found in the middle of the chunk.\n          // Where we just need to append the insertion and chunk to the current stream.\n          // e.g.\n          // PPR-static: <head>...</head><body> [ resume content ] </body>\n          // PPR-resume: [ insertion ] [ rest content ]\n          if (insertion) {\n            controller.enqueue(encoder.encode(insertion))\n          }\n          controller.enqueue(chunk)\n          inserted = true\n        }\n      }\n    },\n    async flush(controller) {\n      // Check before closing if there's anything remaining to insert.\n      if (hasBytes) {\n        const insertion = await insert()\n        if (insertion) {\n          controller.enqueue(encoder.encode(insertion))\n        }\n      }\n    },\n  })\n}\n\n// Suffix after main body content - scripts before </body>,\n// but wait for the major chunks to be enqueued.\nfunction createDeferredSuffixStream(\n  suffix: string\n): TransformStream<Uint8Array, Uint8Array> {\n  let flushed = false\n  let pending: DetachedPromise<void> | undefined\n\n  const flush = (controller: TransformStreamDefaultController) => {\n    const detached = new DetachedPromise<void>()\n    pending = detached\n\n    scheduleImmediate(() => {\n      try {\n        controller.enqueue(encoder.encode(suffix))\n      } catch {\n        // If an error occurs while enqueuing it can't be due to this\n        // transformers fault. It's likely due to the controller being\n        // errored due to the stream being cancelled.\n      } finally {\n        pending = undefined\n        detached.resolve()\n      }\n    })\n  }\n\n  return new TransformStream({\n    transform(chunk, controller) {\n      controller.enqueue(chunk)\n\n      // If we've already flushed, we're done.\n      if (flushed) return\n\n      // Schedule the flush to happen.\n      flushed = true\n      flush(controller)\n    },\n    flush(controller) {\n      if (pending) return pending.promise\n      if (flushed) return\n\n      // Flush now.\n      controller.enqueue(encoder.encode(suffix))\n    },\n  })\n}\n\nfunction createFlightDataInjectionTransformStream(\n  stream: ReadableStream<Uint8Array>,\n  delayDataUntilFirstHtmlChunk: boolean\n): TransformStream<Uint8Array, Uint8Array> {\n  let htmlStreamFinished = false\n\n  let pull: Promise<void> | null = null\n  let donePulling = false\n\n  function startOrContinuePulling(\n    controller: TransformStreamDefaultController\n  ) {\n    if (!pull) {\n      pull = startPulling(controller)\n    }\n    return pull\n  }\n\n  async function startPulling(controller: TransformStreamDefaultController) {\n    const reader = stream.getReader()\n\n    if (delayDataUntilFirstHtmlChunk) {\n      // NOTE: streaming flush\n      // We are buffering here for the inlined data stream because the\n      // \"shell\" stream might be chunkenized again by the underlying stream\n      // implementation, e.g. with a specific high-water mark. To ensure it's\n      // the safe timing to pipe the data stream, this extra tick is\n      // necessary.\n\n      // We don't start reading until we've left the current Task to ensure\n      // that it's inserted after flushing the shell. Note that this implementation\n      // might get stale if impl details of Fizz change in the future.\n      await atLeastOneTask()\n    }\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read()\n        if (done) {\n          donePulling = true\n          return\n        }\n\n        // We want to prioritize HTML over RSC data.\n        // The SSR render is based on the same RSC stream, so when we get a new RSC chunk,\n        // we're likely to produce an HTML chunk as well, so give it a chance to flush first.\n        if (!delayDataUntilFirstHtmlChunk && !htmlStreamFinished) {\n          await atLeastOneTask()\n        }\n        controller.enqueue(value)\n      }\n    } catch (err) {\n      controller.error(err)\n    }\n  }\n\n  return new TransformStream({\n    start(controller) {\n      if (!delayDataUntilFirstHtmlChunk) {\n        startOrContinuePulling(controller)\n      }\n    },\n    transform(chunk, controller) {\n      controller.enqueue(chunk)\n\n      // Start the streaming if it hasn't already been started yet.\n      if (delayDataUntilFirstHtmlChunk) {\n        startOrContinuePulling(controller)\n      }\n    },\n    flush(controller) {\n      htmlStreamFinished = true\n      if (donePulling) {\n        return\n      }\n      return startOrContinuePulling(controller)\n    },\n  })\n}\n\nconst CLOSE_TAG = '</body></html>'\n\n/**\n * This transform stream moves the suffix to the end of the stream, so results\n * like `</body></html><script>...</script>` will be transformed to\n * `<script>...</script></body></html>`.\n */\nfunction createMoveSuffixStream(): TransformStream<Uint8Array, Uint8Array> {\n  let foundSuffix = false\n\n  return new TransformStream({\n    transform(chunk, controller) {\n      if (foundSuffix) {\n        return controller.enqueue(chunk)\n      }\n\n      const index = indexOfUint8Array(chunk, ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n      if (index > -1) {\n        foundSuffix = true\n\n        // If the whole chunk is the suffix, then don't write anything, it will\n        // be written in the flush.\n        if (chunk.length === ENCODED_TAGS.CLOSED.BODY_AND_HTML.length) {\n          return\n        }\n\n        // Write out the part before the suffix.\n        const before = chunk.slice(0, index)\n        controller.enqueue(before)\n\n        // In the case where the suffix is in the middle of the chunk, we need\n        // to split the chunk into two parts.\n        if (chunk.length > ENCODED_TAGS.CLOSED.BODY_AND_HTML.length + index) {\n          // Write out the part after the suffix.\n          const after = chunk.slice(\n            index + ENCODED_TAGS.CLOSED.BODY_AND_HTML.length\n          )\n          controller.enqueue(after)\n        }\n      } else {\n        controller.enqueue(chunk)\n      }\n    },\n    flush(controller) {\n      // Even if we didn't find the suffix, the HTML is not valid if we don't\n      // add it, so insert it at the end.\n      controller.enqueue(ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n    },\n  })\n}\n\nfunction createStripDocumentClosingTagsTransform(): TransformStream<\n  Uint8Array,\n  Uint8Array\n> {\n  return new TransformStream({\n    transform(chunk, controller) {\n      // We rely on the assumption that chunks will never break across a code unit.\n      // This is reasonable because we currently concat all of React's output from a single\n      // flush into one chunk before streaming it forward which means the chunk will represent\n      // a single coherent utf-8 string. This is not safe to use if we change our streaming to no\n      // longer do this large buffered chunk\n      if (\n        isEquivalentUint8Arrays(chunk, ENCODED_TAGS.CLOSED.BODY_AND_HTML) ||\n        isEquivalentUint8Arrays(chunk, ENCODED_TAGS.CLOSED.BODY) ||\n        isEquivalentUint8Arrays(chunk, ENCODED_TAGS.CLOSED.HTML)\n      ) {\n        // the entire chunk is the closing tags; return without enqueueing anything.\n        return\n      }\n\n      // We assume these tags will go at together at the end of the document and that\n      // they won't appear anywhere else in the document. This is not really a safe assumption\n      // but until we revamp our streaming infra this is a performant way to string the tags\n      chunk = removeFromUint8Array(chunk, ENCODED_TAGS.CLOSED.BODY)\n      chunk = removeFromUint8Array(chunk, ENCODED_TAGS.CLOSED.HTML)\n\n      controller.enqueue(chunk)\n    },\n  })\n}\n\n/*\n * Checks if the root layout is missing the html or body tags\n * and if so, it will inject a script tag to throw an error in the browser, showing the user\n * the error message in the error overlay.\n */\nexport function createRootLayoutValidatorStream(): TransformStream<\n  Uint8Array,\n  Uint8Array\n> {\n  let foundHtml = false\n  let foundBody = false\n  return new TransformStream({\n    async transform(chunk, controller) {\n      // Peek into the streamed chunk to see if the tags are present.\n      if (\n        !foundHtml &&\n        indexOfUint8Array(chunk, ENCODED_TAGS.OPENING.HTML) > -1\n      ) {\n        foundHtml = true\n      }\n\n      if (\n        !foundBody &&\n        indexOfUint8Array(chunk, ENCODED_TAGS.OPENING.BODY) > -1\n      ) {\n        foundBody = true\n      }\n\n      controller.enqueue(chunk)\n    },\n    flush(controller) {\n      const missingTags: ('html' | 'body')[] = []\n      if (!foundHtml) missingTags.push('html')\n      if (!foundBody) missingTags.push('body')\n\n      if (!missingTags.length) return\n\n      controller.enqueue(\n        encoder.encode(\n          `<html id=\"__next_error__\">\n            <template\n              data-next-error-message=\"Missing ${missingTags\n                .map((c) => `<${c}>`)\n                .join(\n                  missingTags.length > 1 ? ' and ' : ''\n                )} tags in the root layout.\\nRead more at https://nextjs.org/docs/messages/missing-root-layout-tags\"\n              data-next-error-digest=\"${MISSING_ROOT_TAGS_ERROR}\"\n              data-next-error-stack=\"\"\n            ></template>\n          `\n        )\n      )\n    },\n  })\n}\n\nfunction chainTransformers<T>(\n  readable: ReadableStream<T>,\n  transformers: ReadonlyArray<TransformStream<T, T> | null>\n): ReadableStream<T> {\n  let stream = readable\n  for (const transformer of transformers) {\n    if (!transformer) continue\n\n    stream = stream.pipeThrough(transformer)\n  }\n  return stream\n}\n\nexport type ContinueStreamOptions = {\n  inlinedDataStream: ReadableStream<Uint8Array> | undefined\n  isStaticGeneration: boolean\n  isBuildTimePrerendering: boolean\n  buildId: string\n  getServerInsertedHTML: () => Promise<string>\n  getServerInsertedMetadata: () => Promise<string>\n  validateRootLayout?: boolean\n  /**\n   * Suffix to inject after the buffered data, but before the close tags.\n   */\n  suffix?: string | undefined\n}\n\nexport async function continueFizzStream(\n  renderStream: ReactDOMServerReadableStream,\n  {\n    suffix,\n    inlinedDataStream,\n    isStaticGeneration,\n    isBuildTimePrerendering,\n    buildId,\n    getServerInsertedHTML,\n    getServerInsertedMetadata,\n    validateRootLayout,\n  }: ContinueStreamOptions\n): Promise<ReadableStream<Uint8Array>> {\n  // Suffix itself might contain close tags at the end, so we need to split it.\n  const suffixUnclosed = suffix ? suffix.split(CLOSE_TAG, 1)[0] : null\n\n  // If we're generating static HTML we need to wait for it to resolve before continuing.\n  if (isStaticGeneration) {\n    await renderStream.allReady\n  }\n\n  return chainTransformers(renderStream, [\n    // Buffer everything to avoid flushing too frequently\n    createBufferedTransformStream(),\n\n    // Add build id comment to start of the HTML document (in export mode)\n    createPrefetchCommentStream(isBuildTimePrerendering, buildId),\n\n    // Transform metadata\n    createMetadataTransformStream(getServerInsertedMetadata),\n\n    // Insert suffix content\n    suffixUnclosed != null && suffixUnclosed.length > 0\n      ? createDeferredSuffixStream(suffixUnclosed)\n      : null,\n\n    // Insert the inlined data (Flight data, form state, etc.) stream into the HTML\n    inlinedDataStream\n      ? createFlightDataInjectionTransformStream(inlinedDataStream, true)\n      : null,\n\n    // Validate the root layout for missing html or body tags\n    validateRootLayout ? createRootLayoutValidatorStream() : null,\n\n    // Close tags should always be deferred to the end\n    createMoveSuffixStream(),\n\n    // Special head insertions\n    // TODO-APP: Insert server side html to end of head in app layout rendering, to avoid\n    // hydration errors. Remove this once it's ready to be handled by react itself.\n    createHeadInsertionTransformStream(getServerInsertedHTML),\n  ])\n}\n\ntype ContinueDynamicPrerenderOptions = {\n  getServerInsertedHTML: () => Promise<string>\n  getServerInsertedMetadata: () => Promise<string>\n}\n\nexport async function continueDynamicPrerender(\n  prerenderStream: ReadableStream<Uint8Array>,\n  {\n    getServerInsertedHTML,\n    getServerInsertedMetadata,\n  }: ContinueDynamicPrerenderOptions\n) {\n  return (\n    prerenderStream\n      // Buffer everything to avoid flushing too frequently\n      .pipeThrough(createBufferedTransformStream())\n      .pipeThrough(createStripDocumentClosingTagsTransform())\n      // Insert generated tags to head\n      .pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML))\n      // Transform metadata\n      .pipeThrough(createMetadataTransformStream(getServerInsertedMetadata))\n  )\n}\n\ntype ContinueStaticPrerenderOptions = {\n  inlinedDataStream: ReadableStream<Uint8Array>\n  getServerInsertedHTML: () => Promise<string>\n  getServerInsertedMetadata: () => Promise<string>\n  isBuildTimePrerendering: boolean\n  buildId: string\n}\n\nexport async function continueStaticPrerender(\n  prerenderStream: ReadableStream<Uint8Array>,\n  {\n    inlinedDataStream,\n    getServerInsertedHTML,\n    getServerInsertedMetadata,\n    isBuildTimePrerendering,\n    buildId,\n  }: ContinueStaticPrerenderOptions\n) {\n  return (\n    prerenderStream\n      // Buffer everything to avoid flushing too frequently\n      .pipeThrough(createBufferedTransformStream())\n      // Add build id comment to start of the HTML document (in export mode)\n      .pipeThrough(\n        createPrefetchCommentStream(isBuildTimePrerendering, buildId)\n      )\n      // Insert generated tags to head\n      .pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML))\n      // Transform metadata\n      .pipeThrough(createMetadataTransformStream(getServerInsertedMetadata))\n      // Insert the inlined data (Flight data, form state, etc.) stream into the HTML\n      .pipeThrough(\n        createFlightDataInjectionTransformStream(inlinedDataStream, true)\n      )\n      // Close tags should always be deferred to the end\n      .pipeThrough(createMoveSuffixStream())\n  )\n}\n\ntype ContinueResumeOptions = {\n  inlinedDataStream: ReadableStream<Uint8Array>\n  getServerInsertedHTML: () => Promise<string>\n  getServerInsertedMetadata: () => Promise<string>\n  delayDataUntilFirstHtmlChunk: boolean\n}\n\nexport async function continueDynamicHTMLResume(\n  renderStream: ReadableStream<Uint8Array>,\n  {\n    delayDataUntilFirstHtmlChunk,\n    inlinedDataStream,\n    getServerInsertedHTML,\n    getServerInsertedMetadata,\n  }: ContinueResumeOptions\n) {\n  return (\n    renderStream\n      // Buffer everything to avoid flushing too frequently\n      .pipeThrough(createBufferedTransformStream())\n      // Insert generated tags to head\n      .pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML))\n      // Transform metadata\n      .pipeThrough(createMetadataTransformStream(getServerInsertedMetadata))\n      // Insert the inlined data (Flight data, form state, etc.) stream into the HTML\n      .pipeThrough(\n        createFlightDataInjectionTransformStream(\n          inlinedDataStream,\n          delayDataUntilFirstHtmlChunk\n        )\n      )\n      // Close tags should always be deferred to the end\n      .pipeThrough(createMoveSuffixStream())\n  )\n}\n\nexport function createDocumentClosingStream(): ReadableStream<Uint8Array> {\n  return streamFromString(CLOSE_TAG)\n}\n","import type { ActionManifest } from '../../build/webpack/plugins/flight-client-entry-plugin'\nimport type {\n  ClientReferenceManifest,\n  ClientReferenceManifestForRsc,\n} from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport { InvariantError } from '../../shared/lib/invariant-error'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { workAsyncStorage } from './work-async-storage.external'\n\nlet __next_loaded_action_key: CryptoKey\n\nexport function arrayBufferToString(\n  buffer: ArrayBuffer | Uint8Array<ArrayBufferLike>\n) {\n  const bytes = new Uint8Array(buffer)\n  const len = bytes.byteLength\n\n  // @anonrig: V8 has a limit of 65535 arguments in a function.\n  // For len < 65535, this is faster.\n  // https://github.com/vercel/next.js/pull/56377#pullrequestreview-1656181623\n  if (len < 65535) {\n    return String.fromCharCode.apply(null, bytes as unknown as number[])\n  }\n\n  let binary = ''\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i])\n  }\n  return binary\n}\n\nexport function stringToUint8Array(binary: string) {\n  const len = binary.length\n  const arr = new Uint8Array(len)\n\n  for (let i = 0; i < len; i++) {\n    arr[i] = binary.charCodeAt(i)\n  }\n\n  return arr\n}\n\nexport function encrypt(key: CryptoKey, iv: Uint8Array, data: Uint8Array) {\n  return crypto.subtle.encrypt(\n    {\n      name: 'AES-GCM',\n      iv,\n    },\n    key,\n    data\n  )\n}\n\nexport function decrypt(key: CryptoKey, iv: Uint8Array, data: Uint8Array) {\n  return crypto.subtle.decrypt(\n    {\n      name: 'AES-GCM',\n      iv,\n    },\n    key,\n    data\n  )\n}\n\n// This is a global singleton that is used to encode/decode the action bound args from\n// the closure. This can't be using a AsyncLocalStorage as it might happen on the module\n// level. Since the client reference manifest won't be mutated, let's use a global singleton\n// to keep it.\nconst SERVER_ACTION_MANIFESTS_SINGLETON = Symbol.for(\n  'next.server.action-manifests'\n)\n\nexport function setReferenceManifestsSingleton({\n  page,\n  clientReferenceManifest,\n  serverActionsManifest,\n  serverModuleMap,\n}: {\n  page: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  serverActionsManifest: DeepReadonly<ActionManifest>\n  serverModuleMap: {\n    [id: string]: {\n      id: string\n      chunks: string[]\n      name: string\n    }\n  }\n}) {\n  // @ts-expect-error\n  const clientReferenceManifestsPerPage = globalThis[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ]?.clientReferenceManifestsPerPage as\n    | undefined\n    | DeepReadonly<Record<string, ClientReferenceManifest>>\n\n  // @ts-expect-error\n  globalThis[SERVER_ACTION_MANIFESTS_SINGLETON] = {\n    clientReferenceManifestsPerPage: {\n      ...clientReferenceManifestsPerPage,\n      [normalizeAppPath(page)]: clientReferenceManifest,\n    },\n    serverActionsManifest,\n    serverModuleMap,\n  }\n}\n\nexport function getServerModuleMap() {\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    serverModuleMap: {\n      [id: string]: {\n        id: string\n        chunks: string[]\n        name: string\n      }\n    }\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new InvariantError('Missing manifest for Server Actions.')\n  }\n\n  return serverActionsManifestSingleton.serverModuleMap\n}\n\nexport function getClientReferenceManifestForRsc(): DeepReadonly<ClientReferenceManifestForRsc> {\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    clientReferenceManifestsPerPage: DeepReadonly<\n      Record<string, ClientReferenceManifest>\n    >\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new InvariantError('Missing manifest for Server Actions.')\n  }\n\n  const { clientReferenceManifestsPerPage } = serverActionsManifestSingleton\n  const workStore = workAsyncStorage.getStore()\n\n  if (!workStore) {\n    // If there's no work store defined, we can assume that a client reference\n    // manifest is needed during module evaluation, e.g. to create a server\n    // action using a higher-order function. This might also use client\n    // components which need to be serialized by Flight, and therefore client\n    // references need to be resolvable. To make this work, we're returning a\n    // merged manifest across all pages. This is fine as long as the module IDs\n    // are not page specific, which they are not for Webpack. TODO: Fix this in\n    // Turbopack.\n    return mergeClientReferenceManifests(clientReferenceManifestsPerPage)\n  }\n\n  const clientReferenceManifest =\n    clientReferenceManifestsPerPage[workStore.route]\n\n  if (!clientReferenceManifest) {\n    throw new InvariantError(\n      `Missing Client Reference Manifest for ${workStore.route}.`\n    )\n  }\n\n  return clientReferenceManifest\n}\n\nexport async function getActionEncryptionKey() {\n  if (__next_loaded_action_key) {\n    return __next_loaded_action_key\n  }\n\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    serverActionsManifest: DeepReadonly<ActionManifest>\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new InvariantError('Missing manifest for Server Actions.')\n  }\n\n  const rawKey =\n    process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY ||\n    serverActionsManifestSingleton.serverActionsManifest.encryptionKey\n\n  if (rawKey === undefined) {\n    throw new InvariantError('Missing encryption key for Server Actions')\n  }\n\n  __next_loaded_action_key = await crypto.subtle.importKey(\n    'raw',\n    stringToUint8Array(atob(rawKey)),\n    'AES-GCM',\n    true,\n    ['encrypt', 'decrypt']\n  )\n\n  return __next_loaded_action_key\n}\n\nfunction mergeClientReferenceManifests(\n  clientReferenceManifestsPerPage: DeepReadonly<\n    Record<string, ClientReferenceManifest>\n  >\n): ClientReferenceManifestForRsc {\n  const clientReferenceManifests = Object.values(\n    clientReferenceManifestsPerPage as Record<string, ClientReferenceManifest>\n  )\n\n  const mergedClientReferenceManifest: ClientReferenceManifestForRsc = {\n    clientModules: {},\n    edgeRscModuleMapping: {},\n    rscModuleMapping: {},\n  }\n\n  for (const clientReferenceManifest of clientReferenceManifests) {\n    mergedClientReferenceManifest.clientModules = {\n      ...mergedClientReferenceManifest.clientModules,\n      ...clientReferenceManifest.clientModules,\n    }\n    mergedClientReferenceManifest.edgeRscModuleMapping = {\n      ...mergedClientReferenceManifest.edgeRscModuleMapping,\n      ...clientReferenceManifest.edgeRscModuleMapping,\n    }\n    mergedClientReferenceManifest.rscModuleMapping = {\n      ...mergedClientReferenceManifest.rscModuleMapping,\n      ...clientReferenceManifest.rscModuleMapping,\n    }\n  }\n\n  return mergedClientReferenceManifest\n}\n","/* eslint-disable import/no-extraneous-dependencies */\nimport 'server-only'\n\n/* eslint-disable import/no-extraneous-dependencies */\nimport { renderToReadableStream } from 'react-server-dom-webpack/server'\n/* eslint-disable import/no-extraneous-dependencies */\nimport { createFromReadableStream } from 'react-server-dom-webpack/client'\n\nimport { streamToString } from '../stream-utils/node-web-streams-helper'\nimport {\n  arrayBufferToString,\n  decrypt,\n  encrypt,\n  getActionEncryptionKey,\n  getClientReferenceManifestForRsc,\n  getServerModuleMap,\n  stringToUint8Array,\n} from './encryption-utils'\nimport {\n  getCacheSignal,\n  getPrerenderResumeDataCache,\n  getRenderResumeDataCache,\n  workUnitAsyncStorage,\n} from './work-unit-async-storage.external'\nimport { createHangingInputAbortSignal } from './dynamic-rendering'\nimport React from 'react'\n\nconst isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nconst filterStackFrame =\n  process.env.NODE_ENV !== 'production'\n    ? (require('../lib/source-maps') as typeof import('../lib/source-maps'))\n        .filterStackFrameDEV\n    : undefined\nconst findSourceMapURL =\n  process.env.NODE_ENV !== 'production'\n    ? (require('../lib/source-maps') as typeof import('../lib/source-maps'))\n        .findSourceMapURLDEV\n    : undefined\n\n/**\n * Decrypt the serialized string with the action id as the salt.\n */\nasync function decodeActionBoundArg(actionId: string, arg: string) {\n  const key = await getActionEncryptionKey()\n  if (typeof key === 'undefined') {\n    throw new Error(\n      `Missing encryption key for Server Action. This is a bug in Next.js`\n    )\n  }\n\n  // Get the iv (16 bytes) and the payload from the arg.\n  const originalPayload = atob(arg)\n  const ivValue = originalPayload.slice(0, 16)\n  const payload = originalPayload.slice(16)\n\n  const decrypted = textDecoder.decode(\n    await decrypt(key, stringToUint8Array(ivValue), stringToUint8Array(payload))\n  )\n\n  if (!decrypted.startsWith(actionId)) {\n    throw new Error('Invalid Server Action payload: failed to decrypt.')\n  }\n\n  return decrypted.slice(actionId.length)\n}\n\n/**\n * Encrypt the serialized string with the action id as the salt. Add a prefix to\n * later ensure that the payload is correctly decrypted, similar to a checksum.\n */\nasync function encodeActionBoundArg(actionId: string, arg: string) {\n  const key = await getActionEncryptionKey()\n  if (key === undefined) {\n    throw new Error(\n      `Missing encryption key for Server Action. This is a bug in Next.js`\n    )\n  }\n\n  // Get 16 random bytes as iv.\n  const randomBytes = new Uint8Array(16)\n  workUnitAsyncStorage.exit(() => crypto.getRandomValues(randomBytes))\n  const ivValue = arrayBufferToString(randomBytes.buffer)\n\n  const encrypted = await encrypt(\n    key,\n    randomBytes,\n    textEncoder.encode(actionId + arg)\n  )\n\n  return btoa(ivValue + arrayBufferToString(encrypted))\n}\n\nenum ReadStatus {\n  Ready,\n  Pending,\n  Complete,\n}\n\n// Encrypts the action's bound args into a string. For the same combination of\n// actionId and args the same cached promise is returned. This ensures reference\n// equality for returned objects from \"use cache\" functions when they're invoked\n// multiple times within one render pass using the same bound args.\nexport const encryptActionBoundArgs = React.cache(\n  async function encryptActionBoundArgs(actionId: string, ...args: any[]) {\n    const workUnitStore = workUnitAsyncStorage.getStore()\n    const cacheSignal = workUnitStore\n      ? getCacheSignal(workUnitStore)\n      : undefined\n\n    const { clientModules } = getClientReferenceManifestForRsc()\n\n    // Create an error before any asynchronous calls, to capture the original\n    // call stack in case we need it when the serialization errors.\n    const error = new Error()\n    Error.captureStackTrace(error, encryptActionBoundArgs)\n\n    let didCatchError = false\n\n    const hangingInputAbortSignal = workUnitStore\n      ? createHangingInputAbortSignal(workUnitStore)\n      : undefined\n\n    let readStatus = ReadStatus.Ready\n    function startReadOnce() {\n      if (readStatus === ReadStatus.Ready) {\n        readStatus = ReadStatus.Pending\n        cacheSignal?.beginRead()\n      }\n    }\n\n    function endReadIfStarted() {\n      if (readStatus === ReadStatus.Pending) {\n        cacheSignal?.endRead()\n      }\n      readStatus = ReadStatus.Complete\n    }\n\n    // streamToString might take longer than a microtask to resolve and then other things\n    // waiting on the cache signal might not realize there is another cache to fill so if\n    // we are no longer waiting on the bound args serialization via the hangingInputAbortSignal\n    // we should eagerly start the cache read to prevent other readers of the cache signal from\n    // missing this cache fill. We use a idempotent function to only start reading once because\n    // it's also possible that streamToString finishes before the hangingInputAbortSignal aborts.\n    if (hangingInputAbortSignal && cacheSignal) {\n      hangingInputAbortSignal.addEventListener('abort', startReadOnce, {\n        once: true,\n      })\n    }\n\n    // Using Flight to serialize the args into a string.\n    const serialized = await streamToString(\n      renderToReadableStream(args, clientModules, {\n        filterStackFrame,\n        signal: hangingInputAbortSignal,\n        onError(err) {\n          if (hangingInputAbortSignal?.aborted) {\n            return\n          }\n\n          // We're only reporting one error at a time, starting with the first.\n          if (didCatchError) {\n            return\n          }\n\n          didCatchError = true\n\n          // Use the original error message together with the previously created\n          // stack, because err.stack is a useless Flight Server call stack.\n          error.message = err instanceof Error ? err.message : String(err)\n        },\n      }),\n      // We pass the abort signal to `streamToString` so that no chunks are\n      // included that are emitted after the signal was already aborted. This\n      // ensures that we can encode hanging promises.\n      hangingInputAbortSignal\n    )\n\n    if (didCatchError) {\n      if (process.env.NODE_ENV === 'development') {\n        // Logging the error is needed for server functions that are passed to the\n        // client where the decryption is not done during rendering. Console\n        // replaying allows us to still show the error dev overlay in this case.\n        console.error(error)\n      }\n\n      endReadIfStarted()\n      throw error\n    }\n\n    if (!workUnitStore) {\n      // We don't need to call cacheSignal.endRead here because we can't have a cacheSignal\n      // if we do not have a workUnitStore.\n      return encodeActionBoundArg(actionId, serialized)\n    }\n\n    startReadOnce()\n\n    const prerenderResumeDataCache = getPrerenderResumeDataCache(workUnitStore)\n    const renderResumeDataCache = getRenderResumeDataCache(workUnitStore)\n    const cacheKey = actionId + serialized\n\n    const cachedEncrypted =\n      prerenderResumeDataCache?.encryptedBoundArgs.get(cacheKey) ??\n      renderResumeDataCache?.encryptedBoundArgs.get(cacheKey)\n\n    if (cachedEncrypted) {\n      return cachedEncrypted\n    }\n\n    const encrypted = await encodeActionBoundArg(actionId, serialized)\n\n    endReadIfStarted()\n    prerenderResumeDataCache?.encryptedBoundArgs.set(cacheKey, encrypted)\n\n    return encrypted\n  }\n)\n\n// Decrypts the action's bound args from the encrypted string.\nexport async function decryptActionBoundArgs(\n  actionId: string,\n  encryptedPromise: Promise<string>\n) {\n  const encrypted = await encryptedPromise\n  const workUnitStore = workUnitAsyncStorage.getStore()\n\n  let decrypted: string | undefined\n\n  if (workUnitStore) {\n    const cacheSignal = getCacheSignal(workUnitStore)\n    const prerenderResumeDataCache = getPrerenderResumeDataCache(workUnitStore)\n    const renderResumeDataCache = getRenderResumeDataCache(workUnitStore)\n\n    decrypted =\n      prerenderResumeDataCache?.decryptedBoundArgs.get(encrypted) ??\n      renderResumeDataCache?.decryptedBoundArgs.get(encrypted)\n\n    if (!decrypted) {\n      cacheSignal?.beginRead()\n      decrypted = await decodeActionBoundArg(actionId, encrypted)\n      cacheSignal?.endRead()\n      prerenderResumeDataCache?.decryptedBoundArgs.set(encrypted, decrypted)\n    }\n  } else {\n    decrypted = await decodeActionBoundArg(actionId, encrypted)\n  }\n\n  const { edgeRscModuleMapping, rscModuleMapping } =\n    getClientReferenceManifestForRsc()\n\n  // Using Flight to deserialize the args from the string.\n  const deserialized = await createFromReadableStream(\n    new ReadableStream({\n      start(controller) {\n        controller.enqueue(textEncoder.encode(decrypted))\n\n        switch (workUnitStore?.type) {\n          case 'prerender':\n          case 'prerender-runtime':\n            // Explicitly don't close the stream here (until prerendering is\n            // complete) so that hanging promises are not rejected.\n            if (workUnitStore.renderSignal.aborted) {\n              controller.close()\n            } else {\n              workUnitStore.renderSignal.addEventListener(\n                'abort',\n                () => controller.close(),\n                { once: true }\n              )\n            }\n            break\n          case 'prerender-client':\n          case 'prerender-ppr':\n          case 'prerender-legacy':\n          case 'request':\n          case 'cache':\n          case 'private-cache':\n          case 'unstable-cache':\n          case undefined:\n            return controller.close()\n          default:\n            workUnitStore satisfies never\n        }\n      },\n    }),\n    {\n      findSourceMapURL,\n      serverConsumerManifest: {\n        // moduleLoading must be null because we don't want to trigger preloads of ClientReferences\n        // to be added to the current execution. Instead, we'll wait for any ClientReference\n        // to be emitted which themselves will handle the preloading.\n        moduleLoading: null,\n        moduleMap: isEdgeRuntime ? edgeRscModuleMapping : rscModuleMapping,\n        serverModuleMap: getServerModuleMap(),\n      },\n    }\n  )\n\n  return deserialized\n}\n","const noop = () => {}\n\nlet registry: FinalizationRegistry<WeakRef<ReadableStream>> | undefined\n\nif (globalThis.FinalizationRegistry) {\n  registry = new FinalizationRegistry((weakRef: WeakRef<ReadableStream>) => {\n    const stream = weakRef.deref()\n    if (stream && !stream.locked) {\n      stream.cancel('Response object has been garbage collected').then(noop)\n    }\n  })\n}\n\n/**\n * Clones a response by teeing the body so we can return two independent\n * ReadableStreams from it. This avoids the bug in the undici library around\n * response cloning.\n *\n * After cloning, the original response's body will be consumed and closed.\n *\n * @see https://github.com/vercel/next.js/pull/73274\n *\n * @param original - The original response to clone.\n * @returns A tuple containing two independent clones of the original response.\n */\nexport function cloneResponse(original: Response): [Response, Response] {\n  // If the response has no body, then we can just return the original response\n  // twice because it's immutable.\n  if (!original.body) {\n    return [original, original]\n  }\n\n  const [body1, body2] = original.body.tee()\n\n  const cloned1 = new Response(body1, {\n    status: original.status,\n    statusText: original.statusText,\n    headers: original.headers,\n  })\n\n  Object.defineProperty(cloned1, 'url', {\n    value: original.url,\n    // How the original response.url behaves\n    configurable: true,\n    enumerable: true,\n    writable: false,\n  })\n\n  // The Fetch Standard allows users to skip consuming the response body by\n  // relying on garbage collection to release connection resources.\n  // https://github.com/nodejs/undici?tab=readme-ov-file#garbage-collection\n  //\n  // To cancel the stream you then need to cancel both resulting branches.\n  // Teeing a stream will generally lock it for the duration, preventing other\n  // readers from locking it.\n  // https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/tee\n\n  // cloned2 is stored in a react cache and cloned for subsequent requests.\n  // It is the original request, and is is garbage collected by a\n  // FinalizationRegistry in Undici, but since we're tee-ing the stream\n  // ourselves, we need to cancel clone1's stream (the response returned from\n  // our dedupe fetch) when clone1 is reclaimed, otherwise we leak memory.\n  if (registry && cloned1.body) {\n    registry.register(cloned1, new WeakRef(cloned1.body))\n  }\n\n  const cloned2 = new Response(body2, {\n    status: original.status,\n    statusText: original.statusText,\n    headers: original.headers,\n  })\n\n  Object.defineProperty(cloned2, 'url', {\n    value: original.url,\n    // How the original response.url behaves\n    configurable: true,\n    enumerable: true,\n    writable: false,\n  })\n\n  return [cloned1, cloned2]\n}\n","/**\n * Based on https://github.com/facebook/react/blob/d4e78c42a94be027b4dc7ed2659a5fddfbf9bd4e/packages/react/src/ReactFetch.js\n */\nimport * as React from 'react'\nimport { cloneResponse } from './clone-response'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nconst simpleCacheKey = '[\"GET\",[],null,\"follow\",null,null,null,null]' // generateCacheKey(new Request('https://blank'));\n\nfunction generateCacheKey(request: Request): string {\n  // We pick the fields that goes into the key used to dedupe requests.\n  // We don't include the `cache` field, because we end up using whatever\n  // caching resulted from the first request.\n  // Notably we currently don't consider non-standard (or future) options.\n  // This might not be safe. TODO: warn for non-standard extensions differing.\n  // IF YOU CHANGE THIS UPDATE THE simpleCacheKey ABOVE.\n  return JSON.stringify([\n    request.method,\n    Array.from(request.headers.entries()),\n    request.mode,\n    request.redirect,\n    request.credentials,\n    request.referrer,\n    request.referrerPolicy,\n    request.integrity,\n  ])\n}\n\ntype CacheEntry = [\n  key: string,\n  promise: Promise<Response>,\n  response: Response | null,\n]\n\nexport function createDedupeFetch(originalFetch: typeof fetch) {\n  const getCacheEntries = React.cache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- url is the cache key\n    (url: string): CacheEntry[] => []\n  )\n\n  return function dedupeFetch(\n    resource: URL | RequestInfo,\n    options?: RequestInit\n  ): Promise<Response> {\n    if (options && options.signal) {\n      // If we're passed a signal, then we assume that\n      // someone else controls the lifetime of this object and opts out of\n      // caching. It's effectively the opt-out mechanism.\n      // Ideally we should be able to check this on the Request but\n      // it always gets initialized with its own signal so we don't\n      // know if it's supposed to override - unless we also override the\n      // Request constructor.\n      return originalFetch(resource, options)\n    }\n    // Normalize the Request\n    let url: string\n    let cacheKey: string\n    if (typeof resource === 'string' && !options) {\n      // Fast path.\n      cacheKey = simpleCacheKey\n      url = resource\n    } else {\n      // Normalize the request.\n      // if resource is not a string or a URL (its an instance of Request)\n      // then do not instantiate a new Request but instead\n      // reuse the request as to not disturb the body in the event it's a ReadableStream.\n      const request =\n        typeof resource === 'string' || resource instanceof URL\n          ? new Request(resource, options)\n          : resource\n      if (\n        (request.method !== 'GET' && request.method !== 'HEAD') ||\n        request.keepalive\n      ) {\n        // We currently don't dedupe requests that might have side-effects. Those\n        // have to be explicitly cached. We assume that the request doesn't have a\n        // body if it's GET or HEAD.\n        // keepalive gets treated the same as if you passed a custom cache signal.\n        return originalFetch(resource, options)\n      }\n      cacheKey = generateCacheKey(request)\n      url = request.url\n    }\n\n    const cacheEntries = getCacheEntries(url)\n    for (let i = 0, j = cacheEntries.length; i < j; i += 1) {\n      const [key, promise] = cacheEntries[i]\n      if (key === cacheKey) {\n        return promise.then(() => {\n          const response = cacheEntries[i][2]\n          if (!response) throw new InvariantError('No cached response')\n\n          // We're cloning the response using this utility because there exists\n          // a bug in the undici library around response cloning. See the\n          // following pull request for more details:\n          // https://github.com/vercel/next.js/pull/73274\n          const [cloned1, cloned2] = cloneResponse(response)\n          cacheEntries[i][2] = cloned2\n          return cloned1\n        })\n      }\n    }\n\n    // We pass the original arguments here in case normalizing the Request\n    // doesn't include all the options in this environment.\n    const promise = originalFetch(resource, options)\n    const entry: CacheEntry = [cacheKey, promise, null]\n    cacheEntries.push(entry)\n\n    return promise.then((response) => {\n      // We're cloning the response using this utility because there exists\n      // a bug in the undici library around response cloning. See the\n      // following pull request for more details:\n      // https://github.com/vercel/next.js/pull/73274\n      const [cloned1, cloned2] = cloneResponse(response)\n      entry[2] = cloned2\n      return cloned1\n    })\n  }\n}\n","import type { OutgoingHttpHeaders } from 'http'\nimport type RenderResult from '../render-result'\nimport type { CacheControl, Revalidate } from '../lib/cache-control'\nimport type { RouteKind } from '../route-kind'\n\nexport interface ResponseCacheBase {\n  get(\n    key: string | null,\n    responseGenerator: ResponseGenerator,\n    context: {\n      isOnDemandRevalidate?: boolean\n      isPrefetch?: boolean\n      incrementalCache: IncrementalCache\n      /**\n       * This is a hint to the cache to help it determine what kind of route\n       * this is so it knows where to look up the cache entry from. If not\n       * provided it will test the filesystem to check.\n       */\n      routeKind: RouteKind\n\n      /**\n       * True if this is a fallback request.\n       */\n      isFallback?: boolean\n\n      /**\n       * True if the route is enabled for PPR.\n       */\n      isRoutePPREnabled?: boolean\n    }\n  ): Promise<ResponseCacheEntry | null>\n}\n\n// The server components HMR cache might store other data as well in the future,\n// at which point this should be refactored to a discriminated union type.\nexport interface ServerComponentsHmrCache {\n  get(key: string): CachedFetchData | undefined\n  set(key: string, data: CachedFetchData): void\n}\n\nexport type CachedFetchData = {\n  headers: Record<string, string>\n  body: string\n  url: string\n  status?: number\n}\n\nexport const enum CachedRouteKind {\n  APP_PAGE = 'APP_PAGE',\n  APP_ROUTE = 'APP_ROUTE',\n  PAGES = 'PAGES',\n  FETCH = 'FETCH',\n  REDIRECT = 'REDIRECT',\n  IMAGE = 'IMAGE',\n}\n\nexport interface CachedFetchValue {\n  kind: CachedRouteKind.FETCH\n  data: CachedFetchData\n  // tags are only present with file-system-cache\n  // fetch cache stores tags outside of cache entry\n  tags?: string[]\n  revalidate: number\n}\n\nexport interface CachedRedirectValue {\n  kind: CachedRouteKind.REDIRECT\n  props: Object\n}\n\nexport interface CachedAppPageValue {\n  kind: CachedRouteKind.APP_PAGE\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  html: RenderResult\n  rscData: Buffer | undefined\n  status: number | undefined\n  postponed: string | undefined\n  headers: OutgoingHttpHeaders | undefined\n  segmentData: Map<string, Buffer> | undefined\n}\n\nexport interface CachedPageValue {\n  kind: CachedRouteKind.PAGES\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  html: RenderResult\n  pageData: Object\n  status: number | undefined\n  headers: OutgoingHttpHeaders | undefined\n}\n\nexport interface CachedRouteValue {\n  kind: CachedRouteKind.APP_ROUTE\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  body: Buffer\n  status: number\n  headers: OutgoingHttpHeaders\n}\n\nexport interface CachedImageValue {\n  kind: CachedRouteKind.IMAGE\n  etag: string\n  upstreamEtag: string\n  buffer: Buffer\n  extension: string\n  isMiss?: boolean\n  isStale?: boolean\n}\n\nexport interface IncrementalCachedAppPageValue {\n  kind: CachedRouteKind.APP_PAGE\n  // this needs to be a string since the cache expects to store\n  // the string value\n  html: string\n  rscData: Buffer | undefined\n  headers: OutgoingHttpHeaders | undefined\n  postponed: string | undefined\n  status: number | undefined\n  segmentData: Map<string, Buffer> | undefined\n}\n\nexport interface IncrementalCachedPageValue {\n  kind: CachedRouteKind.PAGES\n  // this needs to be a string since the cache expects to store\n  // the string value\n  html: string\n  pageData: Object\n  headers: OutgoingHttpHeaders | undefined\n  status: number | undefined\n}\n\nexport interface IncrementalResponseCacheEntry {\n  cacheControl?: CacheControl\n  /**\n   * timestamp in milliseconds to revalidate after\n   */\n  revalidateAfter?: Revalidate\n  /**\n   * `-1` here dictates a blocking revalidate should be used\n   */\n  isStale?: boolean | -1\n  isMiss?: boolean\n  value: Exclude<IncrementalCacheValue, CachedFetchValue> | null\n}\n\nexport interface IncrementalFetchCacheEntry {\n  /**\n   * `-1` here dictates a blocking revalidate should be used\n   */\n  isStale?: boolean | -1\n  value: CachedFetchValue\n}\n\nexport type IncrementalCacheEntry =\n  | IncrementalResponseCacheEntry\n  | IncrementalFetchCacheEntry\n\nexport type IncrementalCacheValue =\n  | CachedRedirectValue\n  | IncrementalCachedPageValue\n  | IncrementalCachedAppPageValue\n  | CachedImageValue\n  | CachedFetchValue\n  | CachedRouteValue\n\nexport type ResponseCacheValue =\n  | CachedRedirectValue\n  | CachedPageValue\n  | CachedAppPageValue\n  | CachedImageValue\n  | CachedRouteValue\n\nexport type ResponseCacheEntry = {\n  cacheControl?: CacheControl\n  value: ResponseCacheValue | null\n  isStale?: boolean | -1\n  isMiss?: boolean\n}\n\n/**\n * @param hasResolved whether the responseGenerator has resolved it's promise\n * @param previousCacheEntry the previous cache entry if it exists or the current\n */\nexport type ResponseGenerator = (state: {\n  hasResolved: boolean\n  previousCacheEntry?: IncrementalResponseCacheEntry | null\n  isRevalidating?: boolean\n  span?: any\n}) => Promise<ResponseCacheEntry | null>\n\nexport const enum IncrementalCacheKind {\n  APP_PAGE = 'APP_PAGE',\n  APP_ROUTE = 'APP_ROUTE',\n  PAGES = 'PAGES',\n  FETCH = 'FETCH',\n  IMAGE = 'IMAGE',\n}\n\nexport interface GetIncrementalFetchCacheContext {\n  kind: IncrementalCacheKind.FETCH\n  revalidate?: Revalidate\n  fetchUrl?: string\n  fetchIdx?: number\n  tags?: string[]\n  softTags?: string[]\n}\n\nexport interface GetIncrementalResponseCacheContext {\n  kind: Exclude<IncrementalCacheKind, IncrementalCacheKind.FETCH>\n\n  /**\n   * True if the route is enabled for PPR.\n   */\n  isRoutePPREnabled?: boolean\n\n  /**\n   * True if this is a fallback request.\n   */\n  isFallback: boolean\n}\n\nexport interface SetIncrementalFetchCacheContext {\n  fetchCache: true\n  fetchUrl?: string\n  fetchIdx?: number\n  tags?: string[]\n  isImplicitBuildTimeCache?: boolean\n}\n\nexport interface SetIncrementalResponseCacheContext {\n  fetchCache?: false\n  cacheControl?: CacheControl\n\n  /**\n   * True if the route is enabled for PPR.\n   */\n  isRoutePPREnabled?: boolean\n\n  /**\n   * True if this is a fallback request.\n   */\n  isFallback?: boolean\n}\n\nexport interface IncrementalResponseCache {\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalResponseCacheContext\n  ): Promise<IncrementalResponseCacheEntry | null>\n  set(\n    key: string,\n    data: Exclude<IncrementalCacheValue, CachedFetchValue> | null,\n    ctx: SetIncrementalResponseCacheContext\n  ): Promise<void>\n}\n\nexport interface IncrementalCache extends IncrementalResponseCache {\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalFetchCacheContext\n  ): Promise<IncrementalFetchCacheEntry | null>\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalResponseCacheContext\n  ): Promise<IncrementalResponseCacheEntry | null>\n  set(\n    key: string,\n    data: CachedFetchValue | null,\n    ctx: SetIncrementalFetchCacheContext\n  ): Promise<void>\n  set(\n    key: string,\n    data: Exclude<IncrementalCacheValue, CachedFetchValue> | null,\n    ctx: SetIncrementalResponseCacheContext\n  ): Promise<void>\n}\n","import type { SchedulerFn } from './scheduler'\n\nimport { DetachedPromise } from './detached-promise'\n\ntype CacheKeyFn<K, C extends string | number | null> = (\n  key: K\n) => PromiseLike<C> | C\n\ntype BatcherOptions<K, C extends string | number | null> = {\n  cacheKeyFn?: CacheKeyFn<K, C>\n  schedulerFn?: SchedulerFn<void>\n}\n\ntype WorkFn<V, C> = (\n  key: C,\n  resolve: (value: V | PromiseLike<V>) => void\n) => Promise<V>\n\n/**\n * A wrapper for a function that will only allow one call to the function to\n * execute at a time.\n */\nexport class Batcher<K, V, C extends string | number | null> {\n  private readonly pending = new Map<C, Promise<V>>()\n\n  protected constructor(\n    private readonly cacheKeyFn?: CacheKeyFn<K, C>,\n    /**\n     * A function that will be called to schedule the wrapped function to be\n     * executed. This defaults to a function that will execute the function\n     * immediately.\n     */\n    private readonly schedulerFn: SchedulerFn<void> = (fn) => fn()\n  ) {}\n\n  /**\n   * Creates a new instance of PendingWrapper. If the key extends a string or\n   * number, the key will be used as the cache key. If the key is an object, a\n   * cache key function must be provided.\n   */\n  public static create<K extends string | number | null, V>(\n    options?: BatcherOptions<K, K>\n  ): Batcher<K, V, K>\n  public static create<K, V, C extends string | number | null>(\n    options: BatcherOptions<K, C> &\n      Required<Pick<BatcherOptions<K, C>, 'cacheKeyFn'>>\n  ): Batcher<K, V, C>\n  public static create<K, V, C extends string | number | null>(\n    options?: BatcherOptions<K, C>\n  ): Batcher<K, V, C> {\n    return new Batcher<K, V, C>(options?.cacheKeyFn, options?.schedulerFn)\n  }\n\n  /**\n   * Wraps a function in a promise that will be resolved or rejected only once\n   * for a given key. This will allow multiple calls to the function to be\n   * made, but only one will be executed at a time. The result of the first\n   * call will be returned to all callers.\n   *\n   * @param key the key to use for the cache\n   * @param fn the function to wrap\n   * @returns a promise that resolves to the result of the function\n   */\n  public async batch(key: K, fn: WorkFn<V, C>): Promise<V> {\n    const cacheKey = (this.cacheKeyFn ? await this.cacheKeyFn(key) : key) as C\n    if (cacheKey === null) {\n      return fn(cacheKey, Promise.resolve)\n    }\n\n    const pending = this.pending.get(cacheKey)\n    if (pending) return pending\n\n    const { promise, resolve, reject } = new DetachedPromise<V>()\n    this.pending.set(cacheKey, promise)\n\n    this.schedulerFn(async () => {\n      try {\n        const result = await fn(cacheKey, resolve)\n\n        // Resolving a promise multiple times is a no-op, so we can safely\n        // resolve all pending promises with the same result.\n        resolve(result)\n      } catch (err) {\n        reject(err)\n      } finally {\n        this.pending.delete(cacheKey)\n      }\n    })\n\n    return promise\n  }\n}\n","/* eslint-disable no-redeclare */\nimport type { IncomingMessage } from 'http'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { UrlWithParsedQuery } from 'url'\nimport type { BaseNextRequest } from './base-http'\nimport type { CloneableBody } from './body-streams'\nimport type { RouteMatch } from './route-matches/route-match'\nimport type { NEXT_RSC_UNION_QUERY } from '../client/components/app-router-headers'\nimport type { ServerComponentsHmrCache } from './response-cache'\nimport type { PagesDevOverlayBridgeType } from '../next-devtools/userspace/pages/pages-dev-overlay-setup'\n\n// FIXME: (wyattjoh) this is a temporary solution to allow us to pass data between bundled modules\nexport const NEXT_REQUEST_META = Symbol.for('NextInternalRequestMeta')\n\nexport type NextIncomingMessage = (BaseNextRequest | IncomingMessage) & {\n  [NEXT_REQUEST_META]?: RequestMeta\n}\n\nexport interface RequestMeta {\n  /**\n   * The query that was used to make the request.\n   */\n  initQuery?: ParsedUrlQuery\n\n  /**\n   * The URL that was used to make the request.\n   */\n  initURL?: string\n\n  /**\n   * The protocol that was used to make the request.\n   */\n  initProtocol?: string\n\n  /**\n   * The body that was read from the request. This is used to allow the body to\n   * be read multiple times.\n   */\n  clonableBody?: CloneableBody\n\n  /**\n   * True when the request matched a locale domain that was configured in the\n   * next.config.js file.\n   */\n  isLocaleDomain?: boolean\n\n  /**\n   * True when the request had locale information stripped from the pathname\n   * part of the URL.\n   */\n  didStripLocale?: boolean\n\n  /**\n   * If the request had it's URL rewritten, this is the URL it was rewritten to.\n   */\n  rewroteURL?: string\n\n  /**\n   * The cookies that were added by middleware and were added to the response.\n   */\n  middlewareCookie?: string[]\n\n  /**\n   * The match on the request for a given route.\n   */\n  match?: RouteMatch\n\n  /**\n   * The incremental cache to use for the request.\n   */\n  incrementalCache?: any\n\n  /**\n   * The server components HMR cache, only for dev.\n   */\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n\n  /**\n   * Equals the segment path that was used for the prefetch RSC request.\n   */\n  segmentPrefetchRSCRequest?: string\n\n  /**\n   * True when the request is for the prefetch flight data.\n   */\n  isPrefetchRSCRequest?: true\n\n  /**\n   * True when the request is for the flight data.\n   */\n  isRSCRequest?: true\n\n  /**\n   * A search param set by the Next.js client when performing RSC requests.\n   * Because some CDNs do not vary their cache entries on our custom headers,\n   * this search param represents a hash of the header values. For any cached\n   * RSC request, we should verify that the hash matches before responding.\n   * Otherwise this can lead to cache poisoning.\n   * TODO: Consider not using custom request headers at all, and instead encode\n   * everything into the search param.\n   */\n  cacheBustingSearchParam?: string\n\n  /**\n   * True when the request is for the `/_next/data` route using the pages\n   * router.\n   */\n  isNextDataReq?: true\n\n  /**\n   * Postponed state to use for resumption. If present it's assumed that the\n   * request is for a page that has postponed (there are no guarantees that the\n   * page actually has postponed though as it would incur an additional cache\n   * lookup).\n   */\n  postponed?: string\n\n  /**\n   * If provided, this will be called when a response cache entry was generated\n   * or looked up in the cache.\n   */\n  onCacheEntry?: (\n    cacheEntry: any,\n    requestMeta: any\n  ) => Promise<boolean | void> | boolean | void\n\n  /**\n   * The previous revalidate before rendering 404 page for notFound: true\n   */\n  notFoundRevalidate?: number | false\n\n  /**\n   * In development, the original source page that returned a 404.\n   */\n  developmentNotFoundSourcePage?: string\n\n  /**\n   * The path we routed to and should be invoked\n   */\n  invokePath?: string\n\n  /**\n   * The specific page output we should be matching\n   */\n  invokeOutput?: string\n\n  /**\n   * The status we are invoking the request with from routing\n   */\n  invokeStatus?: number\n\n  /**\n   * The routing error we are invoking with\n   */\n  invokeError?: Error\n\n  /**\n   * The query parsed for the invocation\n   */\n  invokeQuery?: Record<string, undefined | string | string[]>\n\n  /**\n   * Whether the request is a middleware invocation\n   */\n  middlewareInvoke?: boolean\n\n  /**\n   * Whether the request should render the fallback shell or not.\n   */\n  renderFallbackShell?: boolean\n\n  /**\n   * Whether the request is for the custom error page.\n   */\n  customErrorRender?: true\n\n  /**\n   * Whether to bubble up the NoFallbackError to the caller when a 404 is\n   * returned.\n   */\n  bubbleNoFallback?: true\n\n  /**\n   * True when the request had locale information inferred from the default\n   * locale.\n   */\n  localeInferredFromDefault?: true\n\n  /**\n   * The locale that was inferred or explicitly set for the request.\n   */\n  locale?: string\n\n  /**\n   * The default locale that was inferred or explicitly set for the request.\n   */\n  defaultLocale?: string\n\n  /**\n   * The relative project dir the server is running in from project root\n   */\n  relativeProjectDir?: string\n\n  /**\n   * The dist directory the server is currently using\n   */\n  distDir?: string\n\n  /**\n   * The query after resolving routes\n   */\n  query?: ParsedUrlQuery\n\n  /**\n   * The params after resolving routes\n   */\n  params?: ParsedUrlQuery\n\n  /**\n   * The AMP validator to use in development\n   */\n  ampValidator?: (html: string, pathname: string) => Promise<void>\n\n  /**\n   * ErrorOverlay component to use in development for pages router\n   */\n  PagesErrorDebug?: PagesDevOverlayBridgeType\n\n  /**\n   * Whether server is in minimal mode (this will be replaced with more\n   * specific flags in future)\n   */\n  minimalMode?: boolean\n\n  /**\n   * DEV only: The fallback params that should be used when validating prerenders during dev\n   */\n  devValidatingFallbackParams?: Map<string, string>\n}\n\n/**\n * Gets the request metadata. If no key is provided, the entire metadata object\n * is returned.\n *\n * @param req the request to get the metadata from\n * @param key the key to get from the metadata (optional)\n * @returns the value for the key or the entire metadata object\n */\nexport function getRequestMeta(\n  req: NextIncomingMessage,\n  key?: undefined\n): RequestMeta\nexport function getRequestMeta<K extends keyof RequestMeta>(\n  req: NextIncomingMessage,\n  key: K\n): RequestMeta[K]\nexport function getRequestMeta<K extends keyof RequestMeta>(\n  req: NextIncomingMessage,\n  key?: K\n): RequestMeta | RequestMeta[K] {\n  const meta = req[NEXT_REQUEST_META] || {}\n  return typeof key === 'string' ? meta[key] : meta\n}\n\n/**\n * Sets the request metadata.\n *\n * @param req the request to set the metadata on\n * @param meta the metadata to set\n * @returns the mutated request metadata\n */\nexport function setRequestMeta(req: NextIncomingMessage, meta: RequestMeta) {\n  req[NEXT_REQUEST_META] = meta\n  return meta\n}\n\n/**\n * Adds a value to the request metadata.\n *\n * @param request the request to mutate\n * @param key the key to set\n * @param value the value to set\n * @returns the mutated request metadata\n */\nexport function addRequestMeta<K extends keyof RequestMeta>(\n  request: NextIncomingMessage,\n  key: K,\n  value: RequestMeta[K]\n) {\n  const meta = getRequestMeta(request)\n  meta[key] = value\n  return setRequestMeta(request, meta)\n}\n\n/**\n * Removes a key from the request metadata.\n *\n * @param request the request to mutate\n * @param key the key to remove\n * @returns the mutated request metadata\n */\nexport function removeRequestMeta<K extends keyof RequestMeta>(\n  request: NextIncomingMessage,\n  key: K\n) {\n  const meta = getRequestMeta(request)\n  delete meta[key]\n  return setRequestMeta(request, meta)\n}\n\ntype NextQueryMetadata = {\n  /**\n   * The `_rsc` query parameter used for cache busting to ensure that the RSC\n   * requests do not get cached by the browser explicitly.\n   */\n  [NEXT_RSC_UNION_QUERY]?: string\n}\n\nexport type NextParsedUrlQuery = ParsedUrlQuery &\n  NextQueryMetadata & {\n    amp?: '1'\n  }\n\nexport interface NextUrlWithParsedQuery extends UrlWithParsedQuery {\n  query: NextParsedUrlQuery\n}\n","import type { BaseNextRequest, BaseNextResponse } from './'\nimport type { NodeNextRequest, NodeNextResponse } from './node'\nimport type { WebNextRequest, WebNextResponse } from './web'\n\n/**\n * This file provides some helpers that should be used in conjunction with\n * explicit environment checks. When combined with the environment checks, it\n * will ensure that the correct typings are used as well as enable code\n * elimination.\n */\n\n/**\n * Type guard to determine if a request is a WebNextRequest. This does not\n * actually check the type of the request, but rather the runtime environment.\n * It's expected that when the runtime environment is the edge runtime, that any\n * base request is a WebNextRequest.\n */\nexport const isWebNextRequest = (req: BaseNextRequest): req is WebNextRequest =>\n  process.env.NEXT_RUNTIME === 'edge'\n\n/**\n * Type guard to determine if a response is a WebNextResponse. This does not\n * actually check the type of the response, but rather the runtime environment.\n * It's expected that when the runtime environment is the edge runtime, that any\n * base response is a WebNextResponse.\n */\nexport const isWebNextResponse = (\n  res: BaseNextResponse\n): res is WebNextResponse => process.env.NEXT_RUNTIME === 'edge'\n\n/**\n * Type guard to determine if a request is a NodeNextRequest. This does not\n * actually check the type of the request, but rather the runtime environment.\n * It's expected that when the runtime environment is the node runtime, that any\n * base request is a NodeNextRequest.\n */\nexport const isNodeNextRequest = (\n  req: BaseNextRequest\n): req is NodeNextRequest => process.env.NEXT_RUNTIME !== 'edge'\n\n/**\n * Type guard to determine if a response is a NodeNextResponse. This does not\n * actually check the type of the response, but rather the runtime environment.\n * It's expected that when the runtime environment is the node runtime, that any\n * base response is a NodeNextResponse.\n */\nexport const isNodeNextResponse = (\n  res: BaseNextResponse\n): res is NodeNextResponse => process.env.NEXT_RUNTIME !== 'edge'\n","import type { BaseNextRequest } from '../../../base-http'\nimport type { NodeNextRequest } from '../../../base-http/node'\nimport type { WebNextRequest } from '../../../base-http/web'\nimport type { Writable } from 'node:stream'\n\nimport { getRequestMeta } from '../../../request-meta'\nimport { fromNodeOutgoingHttpHeaders } from '../../utils'\nimport { NextRequest } from '../request'\nimport { isNodeNextRequest, isWebNextRequest } from '../../../base-http/helpers'\n\nexport const ResponseAbortedName = 'ResponseAborted'\nexport class ResponseAborted extends Error {\n  public readonly name = ResponseAbortedName\n}\n\n/**\n * Creates an AbortController tied to the closing of a ServerResponse (or other\n * appropriate Writable).\n *\n * If the `close` event is fired before the `finish` event, then we'll send the\n * `abort` signal.\n */\nexport function createAbortController(response: Writable): AbortController {\n  const controller = new AbortController()\n\n  // If `finish` fires first, then `res.end()` has been called and the close is\n  // just us finishing the stream on our side. If `close` fires first, then we\n  // know the client disconnected before we finished.\n  response.once('close', () => {\n    if (response.writableFinished) return\n\n    controller.abort(new ResponseAborted())\n  })\n\n  return controller\n}\n\n/**\n * Creates an AbortSignal tied to the closing of a ServerResponse (or other\n * appropriate Writable).\n *\n * This cannot be done with the request (IncomingMessage or Readable) because\n * the `abort` event will not fire if to data has been fully read (because that\n * will \"close\" the readable stream and nothing fires after that).\n */\nexport function signalFromNodeResponse(response: Writable): AbortSignal {\n  const { errored, destroyed } = response\n  if (errored || destroyed) {\n    return AbortSignal.abort(errored ?? new ResponseAborted())\n  }\n\n  const { signal } = createAbortController(response)\n  return signal\n}\n\nexport class NextRequestAdapter {\n  public static fromBaseNextRequest(\n    request: BaseNextRequest,\n    signal: AbortSignal\n  ): NextRequest {\n    if (\n      // The type check here ensures that `req` is correctly typed, and the\n      // environment variable check provides dead code elimination.\n      process.env.NEXT_RUNTIME === 'edge' &&\n      isWebNextRequest(request)\n    ) {\n      return NextRequestAdapter.fromWebNextRequest(request)\n    } else if (\n      // The type check here ensures that `req` is correctly typed, and the\n      // environment variable check provides dead code elimination.\n      process.env.NEXT_RUNTIME !== 'edge' &&\n      isNodeNextRequest(request)\n    ) {\n      return NextRequestAdapter.fromNodeNextRequest(request, signal)\n    } else {\n      throw new Error('Invariant: Unsupported NextRequest type')\n    }\n  }\n\n  public static fromNodeNextRequest(\n    request: NodeNextRequest,\n    signal: AbortSignal\n  ): NextRequest {\n    // HEAD and GET requests can not have a body.\n    let body: BodyInit | null = null\n    if (request.method !== 'GET' && request.method !== 'HEAD' && request.body) {\n      // @ts-expect-error - this is handled by undici, when streams/web land use it instead\n      body = request.body\n    }\n\n    let url: URL\n    if (request.url.startsWith('http')) {\n      url = new URL(request.url)\n    } else {\n      // Grab the full URL from the request metadata.\n      const base = getRequestMeta(request, 'initURL')\n      if (!base || !base.startsWith('http')) {\n        // Because the URL construction relies on the fact that the URL provided\n        // is absolute, we need to provide a base URL. We can't use the request\n        // URL because it's relative, so we use a dummy URL instead.\n        url = new URL(request.url, 'http://n')\n      } else {\n        url = new URL(request.url, base)\n      }\n    }\n\n    return new NextRequest(url, {\n      method: request.method,\n      headers: fromNodeOutgoingHttpHeaders(request.headers),\n      duplex: 'half',\n      signal,\n      // geo\n      // ip\n      // nextConfig\n\n      // body can not be passed if request was aborted\n      // or we get a Request body was disturbed error\n      ...(signal.aborted\n        ? {}\n        : {\n            body,\n          }),\n    })\n  }\n\n  public static fromWebNextRequest(request: WebNextRequest): NextRequest {\n    // HEAD and GET requests can not have a body.\n    let body: ReadableStream | null = null\n    if (request.method !== 'GET' && request.method !== 'HEAD') {\n      body = request.body\n    }\n\n    return new NextRequest(request.url, {\n      method: request.method,\n      headers: fromNodeOutgoingHttpHeaders(request.headers),\n      duplex: 'half',\n      signal: request.request.signal,\n      // geo\n      // ip\n      // nextConfig\n\n      // body can not be passed if request was aborted\n      // or we get a Request body was disturbed error\n      ...(request.request.signal.aborted\n        ? {}\n        : {\n            body,\n          }),\n    })\n  }\n}\n","import type { AppPageModule } from './route-modules/app-page/module'\n\n// Combined load times for loading client components\nlet clientComponentLoadStart = 0\nlet clientComponentLoadTimes = 0\nlet clientComponentLoadCount = 0\n\nexport function wrapClientComponentLoader(\n  ComponentMod: AppPageModule\n): AppPageModule['__next_app__'] {\n  if (!('performance' in globalThis)) {\n    return ComponentMod.__next_app__\n  }\n\n  return {\n    require: (...args) => {\n      const startTime = performance.now()\n\n      if (clientComponentLoadStart === 0) {\n        clientComponentLoadStart = startTime\n      }\n\n      try {\n        clientComponentLoadCount += 1\n        return ComponentMod.__next_app__.require(...args)\n      } finally {\n        clientComponentLoadTimes += performance.now() - startTime\n      }\n    },\n    loadChunk: (...args) => {\n      const startTime = performance.now()\n      const result = ComponentMod.__next_app__.loadChunk(...args)\n      // Avoid wrapping `loadChunk`'s result in an extra promise in case something like React depends on its identity.\n      // We only need to know when it's settled.\n      result.finally(() => {\n        clientComponentLoadTimes += performance.now() - startTime\n      })\n      return result\n    },\n  }\n}\n\nexport function getClientComponentLoaderMetrics(\n  options: { reset?: boolean } = {}\n) {\n  const metrics =\n    clientComponentLoadStart === 0\n      ? undefined\n      : {\n          clientComponentLoadStart,\n          clientComponentLoadTimes,\n          clientComponentLoadCount,\n        }\n\n  if (options.reset) {\n    clientComponentLoadStart = 0\n    clientComponentLoadTimes = 0\n    clientComponentLoadCount = 0\n  }\n\n  return metrics\n}\n","import type { ServerResponse } from 'node:http'\n\nimport {\n  ResponseAbortedName,\n  createAbortController,\n} from './web/spec-extension/adapters/next-request'\nimport { DetachedPromise } from '../lib/detached-promise'\nimport { getTracer } from './lib/trace/tracer'\nimport { NextNodeServerSpan } from './lib/trace/constants'\nimport { getClientComponentLoaderMetrics } from './client-component-renderer-logger'\n\nexport function isAbortError(e: any): e is Error & { name: 'AbortError' } {\n  return e?.name === 'AbortError' || e?.name === ResponseAbortedName\n}\n\nfunction createWriterFromResponse(\n  res: ServerResponse,\n  waitUntilForEnd?: Promise<unknown>\n): WritableStream<Uint8Array> {\n  let started = false\n\n  // Create a promise that will resolve once the response has drained. See\n  // https://nodejs.org/api/stream.html#stream_event_drain\n  let drained = new DetachedPromise<void>()\n  function onDrain() {\n    drained.resolve()\n  }\n  res.on('drain', onDrain)\n\n  // If the finish event fires, it means we shouldn't block and wait for the\n  // drain event.\n  res.once('close', () => {\n    res.off('drain', onDrain)\n    drained.resolve()\n  })\n\n  // Create a promise that will resolve once the response has finished. See\n  // https://nodejs.org/api/http.html#event-finish_1\n  const finished = new DetachedPromise<void>()\n  res.once('finish', () => {\n    finished.resolve()\n  })\n\n  // Create a writable stream that will write to the response.\n  return new WritableStream<Uint8Array>({\n    write: async (chunk) => {\n      // You'd think we'd want to use `start` instead of placing this in `write`\n      // but this ensures that we don't actually flush the headers until we've\n      // started writing chunks.\n      if (!started) {\n        started = true\n\n        if (\n          'performance' in globalThis &&\n          process.env.NEXT_OTEL_PERFORMANCE_PREFIX\n        ) {\n          const metrics = getClientComponentLoaderMetrics()\n          if (metrics) {\n            performance.measure(\n              `${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-client-component-loading`,\n              {\n                start: metrics.clientComponentLoadStart,\n                end:\n                  metrics.clientComponentLoadStart +\n                  metrics.clientComponentLoadTimes,\n              }\n            )\n          }\n        }\n\n        res.flushHeaders()\n        getTracer().trace(\n          NextNodeServerSpan.startResponse,\n          {\n            spanName: 'start response',\n          },\n          () => undefined\n        )\n      }\n\n      try {\n        const ok = res.write(chunk)\n\n        // Added by the `compression` middleware, this is a function that will\n        // flush the partially-compressed response to the client.\n        if ('flush' in res && typeof res.flush === 'function') {\n          res.flush()\n        }\n\n        // If the write returns false, it means there's some backpressure, so\n        // wait until it's streamed before continuing.\n        if (!ok) {\n          await drained.promise\n\n          // Reset the drained promise so that we can wait for the next drain event.\n          drained = new DetachedPromise<void>()\n        }\n      } catch (err) {\n        res.end()\n        throw new Error('failed to write chunk to response', { cause: err })\n      }\n    },\n    abort: (err) => {\n      if (res.writableFinished) return\n\n      res.destroy(err)\n    },\n    close: async () => {\n      // if a waitUntil promise was passed, wait for it to resolve before\n      // ending the response.\n      if (waitUntilForEnd) {\n        await waitUntilForEnd\n      }\n\n      if (res.writableFinished) return\n\n      res.end()\n      return finished.promise\n    },\n  })\n}\n\nexport async function pipeToNodeResponse(\n  readable: ReadableStream<Uint8Array>,\n  res: ServerResponse,\n  waitUntilForEnd?: Promise<unknown>\n) {\n  try {\n    // If the response has already errored, then just return now.\n    const { errored, destroyed } = res\n    if (errored || destroyed) return\n\n    // Create a new AbortController so that we can abort the readable if the\n    // client disconnects.\n    const controller = createAbortController(res)\n\n    const writer = createWriterFromResponse(res, waitUntilForEnd)\n\n    await readable.pipeTo(writer, { signal: controller.signal })\n  } catch (err: any) {\n    // If this isn't related to an abort error, re-throw it.\n    if (isAbortError(err)) return\n\n    throw new Error('failed to pipe response', { cause: err })\n  }\n}\n","import type { OutgoingHttpHeaders, ServerResponse } from 'http'\nimport type { CacheControl } from './lib/cache-control'\nimport type { FetchMetrics } from './base-http'\n\nimport {\n  chainStreams,\n  streamFromBuffer,\n  streamFromString,\n  streamToString,\n} from './stream-utils/node-web-streams-helper'\nimport { isAbortError, pipeToNodeResponse } from './pipe-readable'\nimport type { RenderResumeDataCache } from './resume-data-cache/resume-data-cache'\nimport { InvariantError } from '../shared/lib/invariant-error'\nimport type {\n  HTML_CONTENT_TYPE_HEADER,\n  JSON_CONTENT_TYPE_HEADER,\n  TEXT_PLAIN_CONTENT_TYPE_HEADER,\n} from '../lib/constants'\nimport type { RSC_CONTENT_TYPE_HEADER } from '../client/components/app-router-headers'\n\ntype ContentTypeOption =\n  | typeof RSC_CONTENT_TYPE_HEADER // For App Page RSC responses\n  | typeof HTML_CONTENT_TYPE_HEADER // For App Page, Pages HTML responses\n  | typeof JSON_CONTENT_TYPE_HEADER // For API routes, Next.js data requests\n  | typeof TEXT_PLAIN_CONTENT_TYPE_HEADER // For simplified errors\n\nexport type AppPageRenderResultMetadata = {\n  flightData?: Buffer\n  cacheControl?: CacheControl\n  staticBailoutInfo?: {\n    stack?: string\n    description?: string\n  }\n\n  /**\n   * The postponed state if the render had postponed and needs to be resumed.\n   */\n  postponed?: string\n\n  /**\n   * The headers to set on the response that were added by the render.\n   */\n  headers?: OutgoingHttpHeaders\n  statusCode?: number\n  fetchTags?: string\n  fetchMetrics?: FetchMetrics\n\n  segmentData?: Map<string, Buffer>\n\n  /**\n   * In development, the resume data cache is warmed up before the render. This\n   * is attached to the metadata so that it can be used during the render. When\n   * prerendering, the filled resume data cache is also attached to the metadata\n   * so that it can be used when prerendering matching fallback shells.\n   */\n  renderResumeDataCache?: RenderResumeDataCache\n}\n\nexport type PagesRenderResultMetadata = {\n  pageData?: any\n  cacheControl?: CacheControl\n  assetQueryString?: string\n  isNotFound?: boolean\n  isRedirect?: boolean\n}\n\nexport type StaticRenderResultMetadata = {}\n\nexport type RenderResultMetadata = AppPageRenderResultMetadata &\n  PagesRenderResultMetadata &\n  StaticRenderResultMetadata\n\nexport type RenderResultResponse =\n  | ReadableStream<Uint8Array>[]\n  | ReadableStream<Uint8Array>\n  | string\n  | Buffer\n  | null\n\nexport type RenderResultOptions<\n  Metadata extends RenderResultMetadata = RenderResultMetadata,\n> = {\n  contentType: ContentTypeOption | null\n  waitUntil?: Promise<unknown>\n  metadata: Metadata\n}\n\nexport default class RenderResult<\n  Metadata extends RenderResultMetadata = RenderResultMetadata,\n> {\n  /**\n   * The detected content type for the response. This is used to set the\n   * `Content-Type` header.\n   */\n  public readonly contentType: ContentTypeOption | null\n\n  /**\n   * The metadata for the response. This is used to set the revalidation times\n   * and other metadata.\n   */\n  public readonly metadata: Readonly<Metadata>\n\n  /**\n   * The response itself. This can be a string, a stream, or null. If it's a\n   * string, then it's a static response. If it's a stream, then it's a\n   * dynamic response. If it's null, then the response was not found or was\n   * already sent.\n   */\n  private response: RenderResultResponse\n\n  /**\n   * A render result that represents an empty response. This is used to\n   * represent a response that was not found or was already sent.\n   */\n  public static readonly EMPTY = new RenderResult<StaticRenderResultMetadata>(\n    null,\n    { metadata: {}, contentType: null }\n  )\n\n  /**\n   * Creates a new RenderResult instance from a static response.\n   *\n   * @param value the static response value\n   * @param contentType the content type of the response\n   * @returns a new RenderResult instance\n   */\n  public static fromStatic(\n    value: string | Buffer,\n    contentType: ContentTypeOption\n  ) {\n    return new RenderResult<StaticRenderResultMetadata>(value, {\n      metadata: {},\n      contentType,\n    })\n  }\n\n  private readonly waitUntil?: Promise<unknown>\n\n  constructor(\n    response: RenderResultResponse,\n    { contentType, waitUntil, metadata }: RenderResultOptions<Metadata>\n  ) {\n    this.response = response\n    this.contentType = contentType\n    this.metadata = metadata\n    this.waitUntil = waitUntil\n  }\n\n  public assignMetadata(metadata: Metadata) {\n    Object.assign(this.metadata, metadata)\n  }\n\n  /**\n   * Returns true if the response is null. It can be null if the response was\n   * not found or was already sent.\n   */\n  public get isNull(): boolean {\n    return this.response === null\n  }\n\n  /**\n   * Returns false if the response is a string. It can be a string if the page\n   * was prerendered. If it's not, then it was generated dynamically.\n   */\n  public get isDynamic(): boolean {\n    return typeof this.response !== 'string'\n  }\n\n  /**\n   * Returns the response if it is a string. If the page was dynamic, this will\n   * return a promise if the `stream` option is true, or it will throw an error.\n   *\n   * @param stream Whether or not to return a promise if the response is dynamic\n   * @returns The response as a string\n   */\n  public toUnchunkedString(stream?: false): string\n  public toUnchunkedString(stream: true): Promise<string>\n  public toUnchunkedString(stream = false): Promise<string> | string {\n    if (this.response === null) {\n      // If the response is null, return an empty string. This behavior is\n      // intentional as we're now providing the `RenderResult.EMPTY` value.\n      return ''\n    }\n\n    if (typeof this.response !== 'string') {\n      if (!stream) {\n        throw new InvariantError(\n          'dynamic responses cannot be unchunked. This is a bug in Next.js'\n        )\n      }\n\n      return streamToString(this.readable)\n    }\n\n    return this.response\n  }\n\n  /**\n   * Returns a readable stream of the response.\n   */\n  private get readable(): ReadableStream<Uint8Array> {\n    if (this.response === null) {\n      // If the response is null, return an empty stream. This behavior is\n      // intentional as we're now providing the `RenderResult.EMPTY` value.\n      return new ReadableStream<Uint8Array>({\n        start(controller) {\n          controller.close()\n        },\n      })\n    }\n\n    if (typeof this.response === 'string') {\n      return streamFromString(this.response)\n    }\n\n    if (Buffer.isBuffer(this.response)) {\n      return streamFromBuffer(this.response)\n    }\n\n    // If the response is an array of streams, then chain them together.\n    if (Array.isArray(this.response)) {\n      return chainStreams(...this.response)\n    }\n\n    return this.response\n  }\n\n  /**\n   * Coerces the response to an array of streams. This will convert the response\n   * to an array of streams if it is not already one.\n   *\n   * @returns An array of streams\n   */\n  private coerce(): ReadableStream<Uint8Array>[] {\n    if (this.response === null) {\n      // If the response is null, return an empty stream. This behavior is\n      // intentional as we're now providing the `RenderResult.EMPTY` value.\n      return []\n    }\n\n    if (typeof this.response === 'string') {\n      return [streamFromString(this.response)]\n    } else if (Array.isArray(this.response)) {\n      return this.response\n    } else if (Buffer.isBuffer(this.response)) {\n      return [streamFromBuffer(this.response)]\n    } else {\n      return [this.response]\n    }\n  }\n\n  /**\n   * Unshifts a new stream to the response. This will convert the response to an\n   * array of streams if it is not already one and will add the new stream to\n   * the start of the array. When this response is piped, all of the streams\n   * will be piped one after the other.\n   *\n   * @param readable The new stream to unshift\n   */\n  public unshift(readable: ReadableStream<Uint8Array>): void {\n    // Coerce the response to an array of streams.\n    this.response = this.coerce()\n\n    // Add the new stream to the start of the array.\n    this.response.unshift(readable)\n  }\n\n  /**\n   * Chains a new stream to the response. This will convert the response to an\n   * array of streams if it is not already one and will add the new stream to\n   * the end. When this response is piped, all of the streams will be piped\n   * one after the other.\n   *\n   * @param readable The new stream to chain\n   */\n  public push(readable: ReadableStream<Uint8Array>): void {\n    // Coerce the response to an array of streams.\n    this.response = this.coerce()\n\n    // Add the new stream to the end of the array.\n    this.response.push(readable)\n  }\n\n  /**\n   * Pipes the response to a writable stream. This will close/cancel the\n   * writable stream if an error is encountered. If this doesn't throw, then\n   * the writable stream will be closed or aborted.\n   *\n   * @param writable Writable stream to pipe the response to\n   */\n  public async pipeTo(writable: WritableStream<Uint8Array>): Promise<void> {\n    try {\n      await this.readable.pipeTo(writable, {\n        // We want to close the writable stream ourselves so that we can wait\n        // for the waitUntil promise to resolve before closing it. If an error\n        // is encountered, we'll abort the writable stream if we swallowed the\n        // error.\n        preventClose: true,\n      })\n\n      // If there is a waitUntil promise, wait for it to resolve before\n      // closing the writable stream.\n      if (this.waitUntil) await this.waitUntil\n\n      // Close the writable stream.\n      await writable.close()\n    } catch (err) {\n      // If this is an abort error, we should abort the writable stream (as we\n      // took ownership of it when we started piping). We don't need to re-throw\n      // because we handled the error.\n      if (isAbortError(err)) {\n        // Abort the writable stream if an error is encountered.\n        await writable.abort(err)\n\n        return\n      }\n\n      // We're not aborting the writer here as when this method throws it's not\n      // clear as to how so the caller should assume it's their responsibility\n      // to clean up the writer.\n      throw err\n    }\n  }\n\n  /**\n   * Pipes the response to a node response. This will close/cancel the node\n   * response if an error is encountered.\n   *\n   * @param res\n   */\n  public async pipeToNodeResponse(res: ServerResponse) {\n    await pipeToNodeResponse(this.readable, res, this.waitUntil)\n  }\n}\n","export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n","import {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedAppPageValue,\n  type CachedPageValue,\n  type IncrementalResponseCacheEntry,\n  type ResponseCacheEntry,\n} from './types'\n\nimport RenderResult from '../render-result'\nimport { RouteKind } from '../route-kind'\nimport { HTML_CONTENT_TYPE_HEADER } from '../../lib/constants'\n\nexport async function fromResponseCacheEntry(\n  cacheEntry: ResponseCacheEntry\n): Promise<IncrementalResponseCacheEntry> {\n  return {\n    ...cacheEntry,\n    value:\n      cacheEntry.value?.kind === CachedRouteKind.PAGES\n        ? {\n            kind: CachedRouteKind.PAGES,\n            html: await cacheEntry.value.html.toUnchunkedString(true),\n            pageData: cacheEntry.value.pageData,\n            headers: cacheEntry.value.headers,\n            status: cacheEntry.value.status,\n          }\n        : cacheEntry.value?.kind === CachedRouteKind.APP_PAGE\n          ? {\n              kind: CachedRouteKind.APP_PAGE,\n              html: await cacheEntry.value.html.toUnchunkedString(true),\n              postponed: cacheEntry.value.postponed,\n              rscData: cacheEntry.value.rscData,\n              headers: cacheEntry.value.headers,\n              status: cacheEntry.value.status,\n              segmentData: cacheEntry.value.segmentData,\n            }\n          : cacheEntry.value,\n  }\n}\n\nexport async function toResponseCacheEntry(\n  response: IncrementalResponseCacheEntry | null\n): Promise<ResponseCacheEntry | null> {\n  if (!response) return null\n\n  return {\n    isMiss: response.isMiss,\n    isStale: response.isStale,\n    cacheControl: response.cacheControl,\n    value:\n      response.value?.kind === CachedRouteKind.PAGES\n        ? ({\n            kind: CachedRouteKind.PAGES,\n            html: RenderResult.fromStatic(\n              response.value.html,\n              HTML_CONTENT_TYPE_HEADER\n            ),\n            pageData: response.value.pageData,\n            headers: response.value.headers,\n            status: response.value.status,\n          } satisfies CachedPageValue)\n        : response.value?.kind === CachedRouteKind.APP_PAGE\n          ? ({\n              kind: CachedRouteKind.APP_PAGE,\n              html: RenderResult.fromStatic(\n                response.value.html,\n                HTML_CONTENT_TYPE_HEADER\n              ),\n              rscData: response.value.rscData,\n              headers: response.value.headers,\n              status: response.value.status,\n              postponed: response.value.postponed,\n              segmentData: response.value.segmentData,\n            } satisfies CachedAppPageValue)\n          : response.value,\n  }\n}\n\nexport function routeKindToIncrementalCacheKind(\n  routeKind: RouteKind\n): Exclude<IncrementalCacheKind, IncrementalCacheKind.FETCH> {\n  switch (routeKind) {\n    case RouteKind.PAGES:\n      return IncrementalCacheKind.PAGES\n    case RouteKind.APP_PAGE:\n      return IncrementalCacheKind.APP_PAGE\n    case RouteKind.IMAGE:\n      return IncrementalCacheKind.IMAGE\n    case RouteKind.APP_ROUTE:\n      return IncrementalCacheKind.APP_ROUTE\n    case RouteKind.PAGES_API:\n      // Pages Router API routes are not cached in the incremental cache.\n      throw new Error(`Unexpected route kind ${routeKind}`)\n    default:\n      return routeKind satisfies never\n  }\n}\n","import type {\n  ResponseCacheEntry,\n  ResponseGenerator,\n  ResponseCacheBase,\n  IncrementalResponseCacheEntry,\n  IncrementalResponseCache,\n} from './types'\n\nimport { Batcher } from '../../lib/batcher'\nimport { scheduleOnNextTick } from '../../lib/scheduler'\nimport {\n  fromResponseCacheEntry,\n  routeKindToIncrementalCacheKind,\n  toResponseCacheEntry,\n} from './utils'\nimport type { RouteKind } from '../route-kind'\n\nexport * from './types'\n\nexport default class ResponseCache implements ResponseCacheBase {\n  private readonly batcher = Batcher.create<\n    { key: string; isOnDemandRevalidate: boolean },\n    IncrementalResponseCacheEntry | null,\n    string\n  >({\n    // Ensure on-demand revalidate doesn't block normal requests, it should be\n    // safe to run an on-demand revalidate for the same key as a normal request.\n    cacheKeyFn: ({ key, isOnDemandRevalidate }) =>\n      `${key}-${isOnDemandRevalidate ? '1' : '0'}`,\n    // We wait to do any async work until after we've added our promise to\n    // `pendingResponses` to ensure that any any other calls will reuse the\n    // same promise until we've fully finished our work.\n    schedulerFn: scheduleOnNextTick,\n  })\n\n  private previousCacheItem?: {\n    key: string\n    entry: IncrementalResponseCacheEntry | null\n    expiresAt: number\n  }\n\n  // we don't use minimal_mode name here as this.minimal_mode is\n  // statically replace for server runtimes but we need it to\n  // be dynamic here\n  private minimal_mode?: boolean\n\n  constructor(minimal_mode: boolean) {\n    this.minimal_mode = minimal_mode\n  }\n\n  public async get(\n    key: string | null,\n    responseGenerator: ResponseGenerator,\n    context: {\n      routeKind: RouteKind\n      isOnDemandRevalidate?: boolean\n      isPrefetch?: boolean\n      incrementalCache: IncrementalResponseCache\n      isRoutePPREnabled?: boolean\n      isFallback?: boolean\n      waitUntil?: (prom: Promise<any>) => void\n    }\n  ): Promise<ResponseCacheEntry | null> {\n    // If there is no key for the cache, we can't possibly look this up in the\n    // cache so just return the result of the response generator.\n    if (!key) {\n      return responseGenerator({ hasResolved: false, previousCacheEntry: null })\n    }\n\n    const {\n      incrementalCache,\n      isOnDemandRevalidate = false,\n      isFallback = false,\n      isRoutePPREnabled = false,\n      waitUntil,\n    } = context\n\n    const response = await this.batcher.batch(\n      { key, isOnDemandRevalidate },\n      (cacheKey, resolve) => {\n        const prom = (async () => {\n          // We keep the previous cache entry around to leverage when the\n          // incremental cache is disabled in minimal mode.\n          if (\n            this.minimal_mode &&\n            this.previousCacheItem?.key === cacheKey &&\n            this.previousCacheItem.expiresAt > Date.now()\n          ) {\n            return this.previousCacheItem.entry\n          }\n\n          // Coerce the kindHint into a given kind for the incremental cache.\n          const kind = routeKindToIncrementalCacheKind(context.routeKind)\n\n          let resolved = false\n          let cachedResponse: IncrementalResponseCacheEntry | null = null\n          try {\n            cachedResponse = !this.minimal_mode\n              ? await incrementalCache.get(key, {\n                  kind,\n                  isRoutePPREnabled: context.isRoutePPREnabled,\n                  isFallback,\n                })\n              : null\n\n            if (cachedResponse && !isOnDemandRevalidate) {\n              resolve(cachedResponse)\n              resolved = true\n\n              if (!cachedResponse.isStale || context.isPrefetch) {\n                // The cached value is still valid, so we don't need\n                // to update it yet.\n                return null\n              }\n            }\n\n            const cacheEntry = await responseGenerator({\n              hasResolved: resolved,\n              previousCacheEntry: cachedResponse,\n              isRevalidating: true,\n            })\n\n            // If the cache entry couldn't be generated, we don't want to cache\n            // the result.\n            if (!cacheEntry) {\n              // Unset the previous cache item if it was set.\n              if (this.minimal_mode) this.previousCacheItem = undefined\n              return null\n            }\n\n            const resolveValue = await fromResponseCacheEntry({\n              ...cacheEntry,\n              isMiss: !cachedResponse,\n            })\n            if (!resolveValue) {\n              // Unset the previous cache item if it was set.\n              if (this.minimal_mode) this.previousCacheItem = undefined\n              return null\n            }\n\n            // For on-demand revalidate wait to resolve until cache is set.\n            // Otherwise resolve now.\n            if (!isOnDemandRevalidate && !resolved) {\n              resolve(resolveValue)\n              resolved = true\n            }\n\n            // We want to persist the result only if it has a cache control value\n            // defined.\n            if (resolveValue.cacheControl) {\n              if (this.minimal_mode) {\n                this.previousCacheItem = {\n                  key: cacheKey,\n                  entry: resolveValue,\n                  expiresAt: Date.now() + 1000,\n                }\n              } else {\n                await incrementalCache.set(key, resolveValue.value, {\n                  cacheControl: resolveValue.cacheControl,\n                  isRoutePPREnabled,\n                  isFallback,\n                })\n              }\n            }\n\n            return resolveValue\n          } catch (err) {\n            // When a path is erroring we automatically re-set the existing cache\n            // with new revalidate and expire times to prevent non-stop retrying.\n            if (cachedResponse?.cacheControl) {\n              const newRevalidate = Math.min(\n                Math.max(cachedResponse.cacheControl.revalidate || 3, 3),\n                30\n              )\n\n              const newExpire =\n                cachedResponse.cacheControl.expire === undefined\n                  ? undefined\n                  : Math.max(\n                      newRevalidate + 3,\n                      cachedResponse.cacheControl.expire\n                    )\n\n              await incrementalCache.set(key, cachedResponse.value, {\n                cacheControl: { revalidate: newRevalidate, expire: newExpire },\n                isRoutePPREnabled,\n                isFallback,\n              })\n            }\n\n            // While revalidating in the background we can't reject as we already\n            // resolved the cache entry so log the error here.\n            if (resolved) {\n              console.error(err)\n              return null\n            }\n\n            // We haven't resolved yet, so let's throw to indicate an error.\n            throw err\n          }\n        })()\n\n        // we need to ensure background revalidates are\n        // passed to waitUntil\n        if (waitUntil) {\n          waitUntil(prom)\n        }\n        return prom\n      }\n    )\n\n    return toResponseCacheEntry(response)\n  }\n}\n","import type {\n  WorkAsyncStorage,\n  WorkStore,\n} from '../app-render/work-async-storage.external'\n\nimport { AppRenderSpan, NextNodeServerSpan } from './trace/constants'\nimport { getTracer, SpanKind } from './trace/tracer'\nimport {\n  CACHE_ONE_YEAR,\n  INFINITE_CACHE,\n  NEXT_CACHE_TAG_MAX_ITEMS,\n  NEXT_CACHE_TAG_MAX_LENGTH,\n} from '../../lib/constants'\nimport { markCurrentScopeAsDynamic } from '../app-render/dynamic-rendering'\nimport { makeHangingPromise } from '../dynamic-rendering-utils'\nimport type { FetchMetric } from '../base-http'\nimport { createDedupeFetch } from './dedupe-fetch'\nimport {\n  getCacheSignal,\n  type RevalidateStore,\n  type WorkUnitAsyncStorage,\n} from '../app-render/work-unit-async-storage.external'\nimport {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedFetchData,\n  type ServerComponentsHmrCache,\n  type SetIncrementalFetchCacheContext,\n} from '../response-cache'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\nimport { cloneResponse } from './clone-response'\nimport type { IncrementalCache } from './incremental-cache'\n\nconst isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n\ntype Fetcher = typeof fetch\n\ntype PatchedFetcher = Fetcher & {\n  readonly __nextPatched: true\n  readonly __nextGetStaticStore: () => WorkAsyncStorage\n  readonly _nextOriginalFetch: Fetcher\n}\n\nexport const NEXT_PATCH_SYMBOL = Symbol.for('next-patch')\n\nfunction isFetchPatched() {\n  return (globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] === true\n}\n\nexport function validateRevalidate(\n  revalidateVal: unknown,\n  route: string\n): undefined | number {\n  try {\n    let normalizedRevalidate: number | undefined = undefined\n\n    if (revalidateVal === false) {\n      normalizedRevalidate = INFINITE_CACHE\n    } else if (\n      typeof revalidateVal === 'number' &&\n      !isNaN(revalidateVal) &&\n      revalidateVal > -1\n    ) {\n      normalizedRevalidate = revalidateVal\n    } else if (typeof revalidateVal !== 'undefined') {\n      throw new Error(\n        `Invalid revalidate value \"${revalidateVal}\" on \"${route}\", must be a non-negative number or false`\n      )\n    }\n    return normalizedRevalidate\n  } catch (err: any) {\n    // handle client component error from attempting to check revalidate value\n    if (err instanceof Error && err.message.includes('Invalid revalidate')) {\n      throw err\n    }\n    return undefined\n  }\n}\n\nexport function validateTags(tags: any[], description: string) {\n  const validTags: string[] = []\n  const invalidTags: Array<{\n    tag: any\n    reason: string\n  }> = []\n\n  for (let i = 0; i < tags.length; i++) {\n    const tag = tags[i]\n\n    if (typeof tag !== 'string') {\n      invalidTags.push({ tag, reason: 'invalid type, must be a string' })\n    } else if (tag.length > NEXT_CACHE_TAG_MAX_LENGTH) {\n      invalidTags.push({\n        tag,\n        reason: `exceeded max length of ${NEXT_CACHE_TAG_MAX_LENGTH}`,\n      })\n    } else {\n      validTags.push(tag)\n    }\n\n    if (validTags.length > NEXT_CACHE_TAG_MAX_ITEMS) {\n      console.warn(\n        `Warning: exceeded max tag count for ${description}, dropped tags:`,\n        tags.slice(i).join(', ')\n      )\n      break\n    }\n  }\n\n  if (invalidTags.length > 0) {\n    console.warn(`Warning: invalid tags passed to ${description}: `)\n\n    for (const { tag, reason } of invalidTags) {\n      console.log(`tag: \"${tag}\" ${reason}`)\n    }\n  }\n  return validTags\n}\n\nfunction trackFetchMetric(\n  workStore: WorkStore,\n  ctx: Omit<FetchMetric, 'end' | 'idx'>\n) {\n  if (!workStore.shouldTrackFetchMetrics) {\n    return\n  }\n\n  workStore.fetchMetrics ??= []\n\n  workStore.fetchMetrics.push({\n    ...ctx,\n    end: performance.timeOrigin + performance.now(),\n    idx: workStore.nextFetchId || 0,\n  })\n}\n\nasync function createCachedPrerenderResponse(\n  res: Response,\n  cacheKey: string,\n  incrementalCacheContext: SetIncrementalFetchCacheContext | undefined,\n  incrementalCache: IncrementalCache,\n  revalidate: number,\n  handleUnlock: () => Promise<void> | void\n): Promise<Response> {\n  // We are prerendering at build time or revalidate time with cacheComponents so we\n  // need to buffer the response so we can guarantee it can be read in a\n  // microtask.\n  const bodyBuffer = await res.arrayBuffer()\n\n  const fetchedData = {\n    headers: Object.fromEntries(res.headers.entries()),\n    body: Buffer.from(bodyBuffer).toString('base64'),\n    status: res.status,\n    url: res.url,\n  }\n\n  // We can skip setting the serverComponentsHmrCache because we aren't in dev\n  // mode.\n\n  if (incrementalCacheContext) {\n    await incrementalCache.set(\n      cacheKey,\n      { kind: CachedRouteKind.FETCH, data: fetchedData, revalidate },\n      incrementalCacheContext\n    )\n  }\n\n  await handleUnlock()\n\n  // We return a new Response to the caller.\n  return new Response(bodyBuffer, {\n    headers: res.headers,\n    status: res.status,\n    statusText: res.statusText,\n  })\n}\n\nasync function createCachedDynamicResponse(\n  workStore: WorkStore,\n  res: Response,\n  cacheKey: string,\n  incrementalCacheContext: SetIncrementalFetchCacheContext | undefined,\n  incrementalCache: IncrementalCache,\n  serverComponentsHmrCache: ServerComponentsHmrCache | undefined,\n  revalidate: number,\n  input: RequestInfo | URL,\n  handleUnlock: () => Promise<void> | void\n): Promise<Response> {\n  // We're cloning the response using this utility because there exists a bug in\n  // the undici library around response cloning. See the following pull request\n  // for more details: https://github.com/vercel/next.js/pull/73274\n  const [cloned1, cloned2] = cloneResponse(res)\n\n  // We are dynamically rendering including dev mode. We want to return the\n  // response to the caller as soon as possible because it might stream over a\n  // very long time.\n  const cacheSetPromise = cloned1\n    .arrayBuffer()\n    .then(async (arrayBuffer) => {\n      const bodyBuffer = Buffer.from(arrayBuffer)\n\n      const fetchedData = {\n        headers: Object.fromEntries(cloned1.headers.entries()),\n        body: bodyBuffer.toString('base64'),\n        status: cloned1.status,\n        url: cloned1.url,\n      }\n\n      serverComponentsHmrCache?.set(cacheKey, fetchedData)\n\n      if (incrementalCacheContext) {\n        await incrementalCache.set(\n          cacheKey,\n          { kind: CachedRouteKind.FETCH, data: fetchedData, revalidate },\n          incrementalCacheContext\n        )\n      }\n    })\n    .catch((error) => console.warn(`Failed to set fetch cache`, input, error))\n    .finally(handleUnlock)\n\n  const pendingRevalidateKey = `cache-set-${cacheKey}`\n  workStore.pendingRevalidates ??= {}\n\n  if (pendingRevalidateKey in workStore.pendingRevalidates) {\n    // there is already a pending revalidate entry that we need to await to\n    // avoid race conditions\n    await workStore.pendingRevalidates[pendingRevalidateKey]\n  }\n\n  workStore.pendingRevalidates[pendingRevalidateKey] = cacheSetPromise.finally(\n    () => {\n      // If the pending revalidate is not present in the store, then we have\n      // nothing to delete.\n      if (!workStore.pendingRevalidates?.[pendingRevalidateKey]) {\n        return\n      }\n\n      delete workStore.pendingRevalidates[pendingRevalidateKey]\n    }\n  )\n\n  return cloned2\n}\n\ninterface PatchableModule {\n  workAsyncStorage: WorkAsyncStorage\n  workUnitAsyncStorage: WorkUnitAsyncStorage\n}\n\nexport function createPatchedFetcher(\n  originFetch: Fetcher,\n  { workAsyncStorage, workUnitAsyncStorage }: PatchableModule\n): PatchedFetcher {\n  // Create the patched fetch function.\n  const patched = async function fetch(\n    input: RequestInfo | URL,\n    init: RequestInit | undefined\n  ): Promise<Response> {\n    let url: URL | undefined\n    try {\n      url = new URL(input instanceof Request ? input.url : input)\n      url.username = ''\n      url.password = ''\n    } catch {\n      // Error caused by malformed URL should be handled by native fetch\n      url = undefined\n    }\n    const fetchUrl = url?.href ?? ''\n    const method = init?.method?.toUpperCase() || 'GET'\n\n    // Do create a new span trace for internal fetches in the\n    // non-verbose mode.\n    const isInternal = (init?.next as any)?.internal === true\n    const hideSpan = process.env.NEXT_OTEL_FETCH_DISABLED === '1'\n    // We don't track fetch metrics for internal fetches\n    // so it's not critical that we have a start time, as it won't be recorded.\n    // This is to workaround a flaky issue where performance APIs might\n    // not be available and will require follow-up investigation.\n    const fetchStart: number | undefined = isInternal\n      ? undefined\n      : performance.timeOrigin + performance.now()\n\n    const workStore = workAsyncStorage.getStore()\n    const workUnitStore = workUnitAsyncStorage.getStore()\n\n    // During static generation we track cache reads so we can reason about when they fill\n    let cacheSignal = workUnitStore ? getCacheSignal(workUnitStore) : null\n    if (cacheSignal) {\n      cacheSignal.beginRead()\n    }\n\n    const result = getTracer().trace(\n      isInternal ? NextNodeServerSpan.internalFetch : AppRenderSpan.fetch,\n      {\n        hideSpan,\n        kind: SpanKind.CLIENT,\n        spanName: ['fetch', method, fetchUrl].filter(Boolean).join(' '),\n        attributes: {\n          'http.url': fetchUrl,\n          'http.method': method,\n          'net.peer.name': url?.hostname,\n          'net.peer.port': url?.port || undefined,\n        },\n      },\n      async () => {\n        // If this is an internal fetch, we should not do any special treatment.\n        if (isInternal) {\n          return originFetch(input, init)\n        }\n\n        // If the workStore is not available, we can't do any\n        // special treatment of fetch, therefore fallback to the original\n        // fetch implementation.\n        if (!workStore) {\n          return originFetch(input, init)\n        }\n\n        // We should also fallback to the original fetch implementation if we\n        // are in draft mode, it does not constitute a static generation.\n        if (workStore.isDraftMode) {\n          return originFetch(input, init)\n        }\n\n        const isRequestInput =\n          input &&\n          typeof input === 'object' &&\n          typeof (input as Request).method === 'string'\n\n        const getRequestMeta = (field: string) => {\n          // If request input is present but init is not, retrieve from input first.\n          const value = (init as any)?.[field]\n          return value || (isRequestInput ? (input as any)[field] : null)\n        }\n\n        let finalRevalidate: number | undefined = undefined\n        const getNextField = (field: 'revalidate' | 'tags') => {\n          return typeof init?.next?.[field] !== 'undefined'\n            ? init?.next?.[field]\n            : isRequestInput\n              ? (input as any).next?.[field]\n              : undefined\n        }\n        // RequestInit doesn't keep extra fields e.g. next so it's\n        // only available if init is used separate\n        const originalFetchRevalidate = getNextField('revalidate')\n        let currentFetchRevalidate = originalFetchRevalidate\n        const tags: string[] = validateTags(\n          getNextField('tags') || [],\n          `fetch ${input.toString()}`\n        )\n\n        let revalidateStore: RevalidateStore | undefined\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'prerender':\n            case 'prerender-runtime':\n            // TODO: Stop accumulating tags in client prerender. (fallthrough)\n            case 'prerender-client':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'cache':\n            case 'private-cache':\n              revalidateStore = workUnitStore\n              break\n            case 'request':\n            case 'unstable-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        if (revalidateStore) {\n          if (Array.isArray(tags)) {\n            // Collect tags onto parent caches or parent prerenders.\n            const collectedTags =\n              revalidateStore.tags ?? (revalidateStore.tags = [])\n            for (const tag of tags) {\n              if (!collectedTags.includes(tag)) {\n                collectedTags.push(tag)\n              }\n            }\n          }\n        }\n\n        const implicitTags = workUnitStore?.implicitTags\n\n        let pageFetchCacheMode = workStore.fetchCache\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'unstable-cache':\n              // Inside unstable-cache we treat it the same as force-no-store on\n              // the page.\n              pageFetchCacheMode = 'force-no-store'\n              break\n            case 'prerender':\n            case 'prerender-client':\n            case 'prerender-runtime':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'request':\n            case 'cache':\n            case 'private-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        const isUsingNoStore = !!workStore.isUnstableNoStore\n\n        let currentFetchCacheConfig = getRequestMeta('cache')\n        let cacheReason = ''\n        let cacheWarning: string | undefined\n\n        if (\n          typeof currentFetchCacheConfig === 'string' &&\n          typeof currentFetchRevalidate !== 'undefined'\n        ) {\n          // If the revalidate value conflicts with the cache value, we should warn the user and unset the conflicting values.\n          const isConflictingRevalidate =\n            // revalidate: 0 and cache: force-cache\n            (currentFetchCacheConfig === 'force-cache' &&\n              currentFetchRevalidate === 0) ||\n            // revalidate: >0 or revalidate: false and cache: no-store\n            (currentFetchCacheConfig === 'no-store' &&\n              (currentFetchRevalidate > 0 || currentFetchRevalidate === false))\n\n          if (isConflictingRevalidate) {\n            cacheWarning = `Specified \"cache: ${currentFetchCacheConfig}\" and \"revalidate: ${currentFetchRevalidate}\", only one should be specified.`\n            currentFetchCacheConfig = undefined\n            currentFetchRevalidate = undefined\n          }\n        }\n\n        const hasExplicitFetchCacheOptOut =\n          // fetch config itself signals not to cache\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store' ||\n          // the fetch isn't explicitly caching and the segment level cache config signals not to cache\n          // note: `pageFetchCacheMode` is also set by being in an unstable_cache context.\n          pageFetchCacheMode === 'force-no-store' ||\n          pageFetchCacheMode === 'only-no-store'\n\n        // If no explicit fetch cache mode is set, but dynamic = `force-dynamic` is set,\n        // we shouldn't consider caching the fetch. This is because the `dynamic` cache\n        // is considered a \"top-level\" cache mode, whereas something like `fetchCache` is more\n        // fine-grained. Top-level modes are responsible for setting reasonable defaults for the\n        // other configurations.\n        const noFetchConfigAndForceDynamic =\n          !pageFetchCacheMode &&\n          !currentFetchCacheConfig &&\n          !currentFetchRevalidate &&\n          workStore.forceDynamic\n\n        if (\n          // force-cache was specified without a revalidate value. We set the revalidate value to false\n          // which will signal the cache to not revalidate\n          currentFetchCacheConfig === 'force-cache' &&\n          typeof currentFetchRevalidate === 'undefined'\n        ) {\n          currentFetchRevalidate = false\n        } else if (\n          hasExplicitFetchCacheOptOut ||\n          noFetchConfigAndForceDynamic\n        ) {\n          currentFetchRevalidate = 0\n        }\n\n        if (\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store'\n        ) {\n          cacheReason = `cache: ${currentFetchCacheConfig}`\n        }\n\n        finalRevalidate = validateRevalidate(\n          currentFetchRevalidate,\n          workStore.route\n        )\n\n        const _headers = getRequestMeta('headers')\n        const initHeaders: Headers =\n          typeof _headers?.get === 'function'\n            ? _headers\n            : new Headers(_headers || {})\n\n        const hasUnCacheableHeader =\n          initHeaders.get('authorization') || initHeaders.get('cookie')\n\n        const isUnCacheableMethod = !['get', 'head'].includes(\n          getRequestMeta('method')?.toLowerCase() || 'get'\n        )\n\n        /**\n         * We automatically disable fetch caching under the following conditions:\n         * - Fetch cache configs are not set. Specifically:\n         *    - A page fetch cache mode is not set (export const fetchCache=...)\n         *    - A fetch cache mode is not set in the fetch call (fetch(url, { cache: ... }))\n         *      or the fetch cache mode is set to 'default'\n         *    - A fetch revalidate value is not set in the fetch call (fetch(url, { revalidate: ... }))\n         * - OR the fetch comes after a configuration that triggered dynamic rendering (e.g., reading cookies())\n         *   and the fetch was considered uncacheable (e.g., POST method or has authorization headers)\n         */\n        const hasNoExplicitCacheConfig =\n          // eslint-disable-next-line eqeqeq\n          pageFetchCacheMode == undefined &&\n          // eslint-disable-next-line eqeqeq\n          (currentFetchCacheConfig == undefined ||\n            // when considering whether to opt into the default \"no-cache\" fetch semantics,\n            // a \"default\" cache config should be treated the same as no cache config\n            currentFetchCacheConfig === 'default') &&\n          // eslint-disable-next-line eqeqeq\n          currentFetchRevalidate == undefined\n\n        let autoNoCache = Boolean(\n          (hasUnCacheableHeader || isUnCacheableMethod) &&\n            revalidateStore?.revalidate === 0\n        )\n\n        let isImplicitBuildTimeCache = false\n\n        if (!autoNoCache && hasNoExplicitCacheConfig) {\n          // We don't enable automatic no-cache behavior during build-time\n          // prerendering so that we can still leverage the fetch cache between\n          // export workers.\n          if (workStore.isBuildTimePrerendering) {\n            isImplicitBuildTimeCache = true\n          } else {\n            autoNoCache = true\n          }\n        }\n\n        // If we have no cache config, and we're in Dynamic I/O prerendering,\n        // it'll be a dynamic call. We don't have to issue that dynamic call.\n        if (hasNoExplicitCacheConfig && workUnitStore !== undefined) {\n          switch (workUnitStore.type) {\n            case 'prerender':\n            case 'prerender-runtime':\n            // While we don't want to do caching in the client scope we know the\n            // fetch will be dynamic for cacheComponents so we may as well avoid the\n            // call here. (fallthrough)\n            case 'prerender-client':\n              if (cacheSignal) {\n                cacheSignal.endRead()\n                cacheSignal = null\n              }\n\n              return makeHangingPromise<Response>(\n                workUnitStore.renderSignal,\n                workStore.route,\n                'fetch()'\n              )\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'request':\n            case 'cache':\n            case 'private-cache':\n            case 'unstable-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        switch (pageFetchCacheMode) {\n          case 'force-no-store': {\n            cacheReason = 'fetchCache = force-no-store'\n            break\n          }\n          case 'only-no-store': {\n            if (\n              currentFetchCacheConfig === 'force-cache' ||\n              (typeof finalRevalidate !== 'undefined' && finalRevalidate > 0)\n            ) {\n              throw new Error(\n                `cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`\n              )\n            }\n            cacheReason = 'fetchCache = only-no-store'\n            break\n          }\n          case 'only-cache': {\n            if (currentFetchCacheConfig === 'no-store') {\n              throw new Error(\n                `cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`\n              )\n            }\n            break\n          }\n          case 'force-cache': {\n            if (\n              typeof currentFetchRevalidate === 'undefined' ||\n              currentFetchRevalidate === 0\n            ) {\n              cacheReason = 'fetchCache = force-cache'\n              finalRevalidate = INFINITE_CACHE\n            }\n            break\n          }\n          case 'default-cache':\n          case 'default-no-store':\n          case 'auto':\n          case undefined:\n            // sometimes we won't match the above cases. the reason we don't move\n            // everything to this switch is the use of autoNoCache which is not a fetchCacheMode\n            // I suspect this could be unified with fetchCacheMode however in which case we could\n            // simplify the switch case and ensure we have an exhaustive switch handling all modes\n            break\n          default:\n            pageFetchCacheMode satisfies never\n        }\n\n        if (typeof finalRevalidate === 'undefined') {\n          if (pageFetchCacheMode === 'default-cache' && !isUsingNoStore) {\n            finalRevalidate = INFINITE_CACHE\n            cacheReason = 'fetchCache = default-cache'\n          } else if (pageFetchCacheMode === 'default-no-store') {\n            finalRevalidate = 0\n            cacheReason = 'fetchCache = default-no-store'\n          } else if (isUsingNoStore) {\n            finalRevalidate = 0\n            cacheReason = 'noStore call'\n          } else if (autoNoCache) {\n            finalRevalidate = 0\n            cacheReason = 'auto no cache'\n          } else {\n            // TODO: should we consider this case an invariant?\n            cacheReason = 'auto cache'\n            finalRevalidate = revalidateStore\n              ? revalidateStore.revalidate\n              : INFINITE_CACHE\n          }\n        } else if (!cacheReason) {\n          cacheReason = `revalidate: ${finalRevalidate}`\n        }\n\n        if (\n          // when force static is configured we don't bail from\n          // `revalidate: 0` values\n          !(workStore.forceStatic && finalRevalidate === 0) &&\n          // we don't consider autoNoCache to switch to dynamic for ISR\n          !autoNoCache &&\n          // If the revalidate value isn't currently set or the value is less\n          // than the current revalidate value, we should update the revalidate\n          // value.\n          revalidateStore &&\n          finalRevalidate < revalidateStore.revalidate\n        ) {\n          // If we were setting the revalidate value to 0, we should try to\n          // postpone instead first.\n          if (finalRevalidate === 0) {\n            if (workUnitStore) {\n              switch (workUnitStore.type) {\n                case 'prerender':\n                case 'prerender-client':\n                case 'prerender-runtime':\n                  if (cacheSignal) {\n                    cacheSignal.endRead()\n                    cacheSignal = null\n                  }\n                  return makeHangingPromise<Response>(\n                    workUnitStore.renderSignal,\n                    workStore.route,\n                    'fetch()'\n                  )\n                case 'prerender-ppr':\n                case 'prerender-legacy':\n                case 'request':\n                case 'cache':\n                case 'private-cache':\n                case 'unstable-cache':\n                  break\n                default:\n                  workUnitStore satisfies never\n              }\n            }\n\n            markCurrentScopeAsDynamic(\n              workStore,\n              workUnitStore,\n              `revalidate: 0 fetch ${input} ${workStore.route}`\n            )\n          }\n\n          // We only want to set the revalidate store's revalidate time if it\n          // was explicitly set for the fetch call, i.e.\n          // originalFetchRevalidate.\n          if (revalidateStore && originalFetchRevalidate === finalRevalidate) {\n            revalidateStore.revalidate = finalRevalidate\n          }\n        }\n\n        const isCacheableRevalidate =\n          typeof finalRevalidate === 'number' && finalRevalidate > 0\n\n        let cacheKey: string | undefined\n        const { incrementalCache } = workStore\n        let isHmrRefresh = false\n        let serverComponentsHmrCache: ServerComponentsHmrCache | undefined\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'request':\n            case 'cache':\n            case 'private-cache':\n              isHmrRefresh = workUnitStore.isHmrRefresh ?? false\n              serverComponentsHmrCache = workUnitStore.serverComponentsHmrCache\n              break\n            case 'prerender':\n            case 'prerender-client':\n            case 'prerender-runtime':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'unstable-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        if (\n          incrementalCache &&\n          (isCacheableRevalidate || serverComponentsHmrCache)\n        ) {\n          try {\n            cacheKey = await incrementalCache.generateCacheKey(\n              fetchUrl,\n              isRequestInput ? (input as RequestInit) : init\n            )\n          } catch (err) {\n            console.error(`Failed to generate cache key for`, input)\n          }\n        }\n\n        const fetchIdx = workStore.nextFetchId ?? 1\n        workStore.nextFetchId = fetchIdx + 1\n\n        let handleUnlock: () => Promise<void> | void = () => {}\n\n        const doOriginalFetch = async (\n          isStale?: boolean,\n          cacheReasonOverride?: string\n        ) => {\n          const requestInputFields = [\n            'cache',\n            'credentials',\n            'headers',\n            'integrity',\n            'keepalive',\n            'method',\n            'mode',\n            'redirect',\n            'referrer',\n            'referrerPolicy',\n            'window',\n            'duplex',\n\n            // don't pass through signal when revalidating\n            ...(isStale ? [] : ['signal']),\n          ]\n\n          if (isRequestInput) {\n            const reqInput: Request = input as any\n            const reqOptions: RequestInit = {\n              body: (reqInput as any)._ogBody || reqInput.body,\n            }\n\n            for (const field of requestInputFields) {\n              // @ts-expect-error custom fields\n              reqOptions[field] = reqInput[field]\n            }\n            input = new Request(reqInput.url, reqOptions)\n          } else if (init) {\n            const { _ogBody, body, signal, ...otherInput } =\n              init as RequestInit & { _ogBody?: any }\n            init = {\n              ...otherInput,\n              body: _ogBody || body,\n              signal: isStale ? undefined : signal,\n            }\n          }\n\n          // add metadata to init without editing the original\n          const clonedInit = {\n            ...init,\n            next: { ...init?.next, fetchType: 'origin', fetchIdx },\n          }\n\n          return originFetch(input, clonedInit)\n            .then(async (res) => {\n              if (!isStale && fetchStart) {\n                trackFetchMetric(workStore, {\n                  start: fetchStart,\n                  url: fetchUrl,\n                  cacheReason: cacheReasonOverride || cacheReason,\n                  cacheStatus:\n                    finalRevalidate === 0 || cacheReasonOverride\n                      ? 'skip'\n                      : 'miss',\n                  cacheWarning,\n                  status: res.status,\n                  method: clonedInit.method || 'GET',\n                })\n              }\n              if (\n                res.status === 200 &&\n                incrementalCache &&\n                cacheKey &&\n                (isCacheableRevalidate || serverComponentsHmrCache)\n              ) {\n                const normalizedRevalidate =\n                  finalRevalidate >= INFINITE_CACHE\n                    ? CACHE_ONE_YEAR\n                    : finalRevalidate\n\n                const incrementalCacheConfig:\n                  | SetIncrementalFetchCacheContext\n                  | undefined = isCacheableRevalidate\n                  ? {\n                      fetchCache: true,\n                      fetchUrl,\n                      fetchIdx,\n                      tags,\n                      isImplicitBuildTimeCache,\n                    }\n                  : undefined\n\n                switch (workUnitStore?.type) {\n                  case 'prerender':\n                  case 'prerender-client':\n                  case 'prerender-runtime':\n                    return createCachedPrerenderResponse(\n                      res,\n                      cacheKey,\n                      incrementalCacheConfig,\n                      incrementalCache,\n                      normalizedRevalidate,\n                      handleUnlock\n                    )\n                  case 'prerender-ppr':\n                  case 'prerender-legacy':\n                  case 'request':\n                  case 'cache':\n                  case 'private-cache':\n                  case 'unstable-cache':\n                  case undefined:\n                    return createCachedDynamicResponse(\n                      workStore,\n                      res,\n                      cacheKey,\n                      incrementalCacheConfig,\n                      incrementalCache,\n                      serverComponentsHmrCache,\n                      normalizedRevalidate,\n                      input,\n                      handleUnlock\n                    )\n                  default:\n                    workUnitStore satisfies never\n                }\n              }\n\n              // we had response that we determined shouldn't be cached so we return it\n              // and don't cache it. This also needs to unlock the cache lock we acquired.\n              await handleUnlock()\n\n              return res\n            })\n            .catch((error) => {\n              handleUnlock()\n              throw error\n            })\n        }\n\n        let cacheReasonOverride\n        let isForegroundRevalidate = false\n        let isHmrRefreshCache = false\n\n        if (cacheKey && incrementalCache) {\n          let cachedFetchData: CachedFetchData | undefined\n\n          if (isHmrRefresh && serverComponentsHmrCache) {\n            cachedFetchData = serverComponentsHmrCache.get(cacheKey)\n            isHmrRefreshCache = true\n          }\n\n          if (isCacheableRevalidate && !cachedFetchData) {\n            handleUnlock = await incrementalCache.lock(cacheKey)\n            const entry = workStore.isOnDemandRevalidate\n              ? null\n              : await incrementalCache.get(cacheKey, {\n                  kind: IncrementalCacheKind.FETCH,\n                  revalidate: finalRevalidate,\n                  fetchUrl,\n                  fetchIdx,\n                  tags,\n                  softTags: implicitTags?.tags,\n                })\n\n            if (hasNoExplicitCacheConfig && workUnitStore) {\n              switch (workUnitStore.type) {\n                case 'prerender':\n                case 'prerender-client':\n                case 'prerender-runtime':\n                  // We sometimes use the cache to dedupe fetches that do not\n                  // specify a cache configuration. In these cases we want to\n                  // make sure we still exclude them from prerenders if\n                  // cacheComponents is on so we introduce an artificial task boundary\n                  // here.\n                  await waitAtLeastOneReactRenderTask()\n                  break\n                case 'prerender-ppr':\n                case 'prerender-legacy':\n                case 'request':\n                case 'cache':\n                case 'private-cache':\n                case 'unstable-cache':\n                  break\n                default:\n                  workUnitStore satisfies never\n              }\n            }\n\n            if (entry) {\n              await handleUnlock()\n            } else {\n              // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers\n              cacheReasonOverride = 'cache-control: no-cache (hard refresh)'\n            }\n\n            if (entry?.value && entry.value.kind === CachedRouteKind.FETCH) {\n              // when stale and is revalidating we wait for fresh data\n              // so the revalidated entry has the updated data\n              if (workStore.isRevalidate && entry.isStale) {\n                isForegroundRevalidate = true\n              } else {\n                if (entry.isStale) {\n                  workStore.pendingRevalidates ??= {}\n                  if (!workStore.pendingRevalidates[cacheKey]) {\n                    const pendingRevalidate = doOriginalFetch(true)\n                      .then(async (response) => ({\n                        body: await response.arrayBuffer(),\n                        headers: response.headers,\n                        status: response.status,\n                        statusText: response.statusText,\n                      }))\n                      .finally(() => {\n                        workStore.pendingRevalidates ??= {}\n                        delete workStore.pendingRevalidates[cacheKey || '']\n                      })\n\n                    // Attach the empty catch here so we don't get a \"unhandled\n                    // promise rejection\" warning.\n                    pendingRevalidate.catch(console.error)\n\n                    workStore.pendingRevalidates[cacheKey] = pendingRevalidate\n                  }\n                }\n\n                cachedFetchData = entry.value.data\n              }\n            }\n          }\n\n          if (cachedFetchData) {\n            if (fetchStart) {\n              trackFetchMetric(workStore, {\n                start: fetchStart,\n                url: fetchUrl,\n                cacheReason,\n                cacheStatus: isHmrRefreshCache ? 'hmr' : 'hit',\n                cacheWarning,\n                status: cachedFetchData.status || 200,\n                method: init?.method || 'GET',\n              })\n            }\n\n            const response = new Response(\n              Buffer.from(cachedFetchData.body, 'base64'),\n              {\n                headers: cachedFetchData.headers,\n                status: cachedFetchData.status,\n              }\n            )\n\n            Object.defineProperty(response, 'url', {\n              value: cachedFetchData.url,\n            })\n\n            return response\n          }\n        }\n\n        if (workStore.isStaticGeneration && init && typeof init === 'object') {\n          const { cache } = init\n\n          // Delete `cache` property as Cloudflare Workers will throw an error\n          if (isEdgeRuntime) delete init.cache\n\n          if (cache === 'no-store') {\n            // If enabled, we should bail out of static generation.\n            if (workUnitStore) {\n              switch (workUnitStore.type) {\n                case 'prerender':\n                case 'prerender-client':\n                case 'prerender-runtime':\n                  if (cacheSignal) {\n                    cacheSignal.endRead()\n                    cacheSignal = null\n                  }\n                  return makeHangingPromise<Response>(\n                    workUnitStore.renderSignal,\n                    workStore.route,\n                    'fetch()'\n                  )\n                case 'prerender-ppr':\n                case 'prerender-legacy':\n                case 'request':\n                case 'cache':\n                case 'private-cache':\n                case 'unstable-cache':\n                  break\n                default:\n                  workUnitStore satisfies never\n              }\n            }\n            markCurrentScopeAsDynamic(\n              workStore,\n              workUnitStore,\n              `no-store fetch ${input} ${workStore.route}`\n            )\n          }\n\n          const hasNextConfig = 'next' in init\n          const { next = {} } = init\n          if (\n            typeof next.revalidate === 'number' &&\n            revalidateStore &&\n            next.revalidate < revalidateStore.revalidate\n          ) {\n            if (next.revalidate === 0) {\n              // If enabled, we should bail out of static generation.\n              if (workUnitStore) {\n                switch (workUnitStore.type) {\n                  case 'prerender':\n                  case 'prerender-client':\n                  case 'prerender-runtime':\n                    return makeHangingPromise<Response>(\n                      workUnitStore.renderSignal,\n                      workStore.route,\n                      'fetch()'\n                    )\n                  case 'request':\n                  case 'cache':\n                  case 'private-cache':\n                  case 'unstable-cache':\n                  case 'prerender-legacy':\n                  case 'prerender-ppr':\n                    break\n                  default:\n                    workUnitStore satisfies never\n                }\n              }\n              markCurrentScopeAsDynamic(\n                workStore,\n                workUnitStore,\n                `revalidate: 0 fetch ${input} ${workStore.route}`\n              )\n            }\n\n            if (!workStore.forceStatic || next.revalidate !== 0) {\n              revalidateStore.revalidate = next.revalidate\n            }\n          }\n          if (hasNextConfig) delete init.next\n        }\n\n        // if we are revalidating the whole page via time or on-demand and\n        // the fetch cache entry is stale we should still de-dupe the\n        // origin hit if it's a cache-able entry\n        if (cacheKey && isForegroundRevalidate) {\n          const pendingRevalidateKey = cacheKey\n          workStore.pendingRevalidates ??= {}\n          let pendingRevalidate =\n            workStore.pendingRevalidates[pendingRevalidateKey]\n\n          if (pendingRevalidate) {\n            const revalidatedResult: {\n              body: ArrayBuffer\n              headers: Headers\n              status: number\n              statusText: string\n            } = await pendingRevalidate\n            return new Response(revalidatedResult.body, {\n              headers: revalidatedResult.headers,\n              status: revalidatedResult.status,\n              statusText: revalidatedResult.statusText,\n            })\n          }\n\n          // We used to just resolve the Response and clone it however for\n          // static generation with cacheComponents we need the response to be able to\n          // be resolved in a microtask and cloning the response will never have\n          // a body that can resolve in a microtask in node (as observed through\n          // experimentation) So instead we await the body and then when it is\n          // available we construct manually cloned Response objects with the\n          // body as an ArrayBuffer. This will be resolvable in a microtask\n          // making it compatible with cacheComponents.\n          const pendingResponse = doOriginalFetch(true, cacheReasonOverride)\n            // We're cloning the response using this utility because there\n            // exists a bug in the undici library around response cloning.\n            // See the following pull request for more details:\n            // https://github.com/vercel/next.js/pull/73274\n            .then(cloneResponse)\n\n          pendingRevalidate = pendingResponse\n            .then(async (responses) => {\n              const response = responses[0]\n              return {\n                body: await response.arrayBuffer(),\n                headers: response.headers,\n                status: response.status,\n                statusText: response.statusText,\n              }\n            })\n            .finally(() => {\n              // If the pending revalidate is not present in the store, then\n              // we have nothing to delete.\n              if (!workStore.pendingRevalidates?.[pendingRevalidateKey]) {\n                return\n              }\n\n              delete workStore.pendingRevalidates[pendingRevalidateKey]\n            })\n\n          // Attach the empty catch here so we don't get a \"unhandled promise\n          // rejection\" warning\n          pendingRevalidate.catch(() => {})\n\n          workStore.pendingRevalidates[pendingRevalidateKey] = pendingRevalidate\n\n          return pendingResponse.then((responses) => responses[1])\n        } else {\n          return doOriginalFetch(false, cacheReasonOverride)\n        }\n      }\n    )\n\n    if (cacheSignal) {\n      try {\n        return await result\n      } finally {\n        if (cacheSignal) {\n          cacheSignal.endRead()\n        }\n      }\n    }\n    return result\n  }\n\n  // Attach the necessary properties to the patched fetch function.\n  // We don't use this to determine if the fetch function has been patched,\n  // but for external consumers to determine if the fetch function has been\n  // patched.\n  patched.__nextPatched = true as const\n  patched.__nextGetStaticStore = () => workAsyncStorage\n  patched._nextOriginalFetch = originFetch\n  ;(globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] = true\n\n  // Assign the function name also as a name property, so that it's preserved\n  // even when mangling is enabled.\n  Object.defineProperty(patched, 'name', { value: 'fetch', writable: false })\n\n  return patched\n}\n\n// we patch fetch to collect cache information used for\n// determining if a page is static or not\nexport function patchFetch(options: PatchableModule) {\n  // If we've already patched fetch, we should not patch it again.\n  if (isFetchPatched()) return\n\n  // Grab the original fetch function. We'll attach this so we can use it in\n  // the patched fetch function.\n  const original = createDedupeFetch(globalThis.fetch)\n\n  // Set the global fetch to the patched fetch.\n  globalThis.fetch = createPatchedFetcher(original, options)\n}\n","import type { IncrementalCache } from '../../lib/incremental-cache'\n\nimport { CACHE_ONE_YEAR } from '../../../lib/constants'\nimport { validateRevalidate, validateTags } from '../../lib/patch-fetch'\nimport {\n  workAsyncStorage,\n  type WorkStore,\n} from '../../app-render/work-async-storage.external'\nimport {\n  getCacheSignal,\n  getDraftModeProviderForCacheScope,\n  workUnitAsyncStorage,\n} from '../../app-render/work-unit-async-storage.external'\nimport {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedFetchData,\n} from '../../response-cache'\nimport type {\n  UnstableCacheStore,\n  WorkUnitStore,\n} from '../../app-render/work-unit-async-storage.external'\n\ntype Callback = (...args: any[]) => Promise<any>\n\nlet noStoreFetchIdx = 0\n\nasync function cacheNewResult<T>(\n  result: T,\n  incrementalCache: IncrementalCache,\n  cacheKey: string,\n  tags: string[],\n  revalidate: number | false | undefined,\n  fetchIdx: number,\n  fetchUrl: string\n): Promise<unknown> {\n  await incrementalCache.set(\n    cacheKey,\n    {\n      kind: CachedRouteKind.FETCH,\n      data: {\n        headers: {},\n        // TODO: handle non-JSON values?\n        body: JSON.stringify(result),\n        status: 200,\n        url: '',\n      } satisfies CachedFetchData,\n      revalidate: typeof revalidate !== 'number' ? CACHE_ONE_YEAR : revalidate,\n    },\n    { fetchCache: true, tags, fetchIdx, fetchUrl }\n  )\n  return\n}\n\n/**\n * This function allows you to cache the results of expensive operations, like database queries, and reuse them across multiple requests.\n *\n * Read more: [Next.js Docs: `unstable_cache`](https://nextjs.org/docs/app/api-reference/functions/unstable_cache)\n */\nexport function unstable_cache<T extends Callback>(\n  cb: T,\n  keyParts?: string[],\n  options: {\n    /**\n     * The revalidation interval in seconds.\n     */\n    revalidate?: number | false\n    tags?: string[]\n  } = {}\n): T {\n  if (options.revalidate === 0) {\n    throw new Error(\n      `Invariant revalidate: 0 can not be passed to unstable_cache(), must be \"false\" or \"> 0\" ${cb.toString()}`\n    )\n  }\n\n  // Validate the tags provided are valid\n  const tags = options.tags\n    ? validateTags(options.tags, `unstable_cache ${cb.toString()}`)\n    : []\n\n  // Validate the revalidate options\n  validateRevalidate(\n    options.revalidate,\n    `unstable_cache ${cb.name || cb.toString()}`\n  )\n\n  // Stash the fixed part of the key at construction time. The invocation key will combine\n  // the fixed key with the arguments when actually called\n  // @TODO if cb.toString() is long we should hash it\n  // @TODO come up with a collision-free way to combine keyParts\n  // @TODO consider validating the keyParts are all strings. TS can't provide runtime guarantees\n  // and the error produced by accidentally using something that cannot be safely coerced is likely\n  // hard to debug\n  const fixedKey = `${cb.toString()}-${\n    Array.isArray(keyParts) && keyParts.join(',')\n  }`\n\n  const cachedCb = async (...args: any[]) => {\n    const workStore = workAsyncStorage.getStore()\n    const workUnitStore = workUnitAsyncStorage.getStore()\n\n    // We must be able to find the incremental cache otherwise we throw\n    const maybeIncrementalCache:\n      | import('../../lib/incremental-cache').IncrementalCache\n      | undefined =\n      workStore?.incrementalCache || (globalThis as any).__incrementalCache\n\n    if (!maybeIncrementalCache) {\n      throw new Error(\n        `Invariant: incrementalCache missing in unstable_cache ${cb.toString()}`\n      )\n    }\n    const incrementalCache = maybeIncrementalCache\n\n    const cacheSignal = workUnitStore ? getCacheSignal(workUnitStore) : null\n    if (cacheSignal) {\n      cacheSignal.beginRead()\n    }\n    try {\n      // If there's no request store, we aren't in a request (or we're not in\n      // app router) and if there's no static generation store, we aren't in app\n      // router. Default to an empty pathname and search params when there's no\n      // request store or static generation store available.\n      const fetchUrlPrefix =\n        workStore && workUnitStore\n          ? getFetchUrlPrefix(workStore, workUnitStore)\n          : ''\n\n      // Construct the complete cache key for this function invocation\n      // @TODO stringify is likely not safe here. We will coerce undefined to null which will make\n      // the keyspace smaller than the execution space\n      const invocationKey = `${fixedKey}-${JSON.stringify(args)}`\n      const cacheKey = await incrementalCache.generateCacheKey(invocationKey)\n      // $urlWithPath,$sortedQueryStringKeys,$hashOfEveryThingElse\n      const fetchUrl = `unstable_cache ${fetchUrlPrefix} ${cb.name ? ` ${cb.name}` : cacheKey}`\n      const fetchIdx =\n        (workStore ? workStore.nextFetchId : noStoreFetchIdx) ?? 1\n\n      const implicitTags = workUnitStore?.implicitTags\n\n      const innerCacheStore: UnstableCacheStore = {\n        type: 'unstable-cache',\n        phase: 'render',\n        implicitTags,\n        draftMode:\n          workUnitStore &&\n          workStore &&\n          getDraftModeProviderForCacheScope(workStore, workUnitStore),\n      }\n\n      if (workStore) {\n        workStore.nextFetchId = fetchIdx + 1\n\n        // We are in an App Router context. We try to return the cached entry if it exists and is valid\n        // If the entry is fresh we return it. If the entry is stale we return it but revalidate the entry in\n        // the background. If the entry is missing or invalid we generate a new entry and return it.\n\n        let isNestedUnstableCache = false\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'cache':\n            case 'private-cache':\n            case 'prerender':\n            case 'prerender-runtime':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n              // We update the store's revalidate property if the option.revalidate is a higher precedence\n              // options.revalidate === undefined doesn't affect timing.\n              // options.revalidate === false doesn't shrink timing. it stays at the maximum.\n              if (typeof options.revalidate === 'number') {\n                if (workUnitStore.revalidate < options.revalidate) {\n                  // The store is already revalidating on a shorter time interval, leave it alone\n                } else {\n                  workUnitStore.revalidate = options.revalidate\n                }\n              }\n\n              // We need to accumulate the tags for this invocation within the store\n              const collectedTags = workUnitStore.tags\n              if (collectedTags === null) {\n                workUnitStore.tags = tags.slice()\n              } else {\n                for (const tag of tags) {\n                  // @TODO refactor tags to be a set to avoid this O(n) lookup\n                  if (!collectedTags.includes(tag)) {\n                    collectedTags.push(tag)\n                  }\n                }\n              }\n              break\n            case 'unstable-cache':\n              isNestedUnstableCache = true\n              break\n            case 'prerender-client':\n            case 'request':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        if (\n          // when we are nested inside of other unstable_cache's\n          // we should bypass cache similar to fetches\n          !isNestedUnstableCache &&\n          workStore.fetchCache !== 'force-no-store' &&\n          !workStore.isOnDemandRevalidate &&\n          !incrementalCache.isOnDemandRevalidate &&\n          !workStore.isDraftMode\n        ) {\n          // We attempt to get the current cache entry from the incremental cache.\n          const cacheEntry = await incrementalCache.get(cacheKey, {\n            kind: IncrementalCacheKind.FETCH,\n            revalidate: options.revalidate,\n            tags,\n            softTags: implicitTags?.tags,\n            fetchIdx,\n            fetchUrl,\n          })\n\n          if (cacheEntry && cacheEntry.value) {\n            // The entry exists and has a value\n            if (cacheEntry.value.kind !== CachedRouteKind.FETCH) {\n              // The entry is invalid and we need a special warning\n              // @TODO why do we warn this way? Should this just be an error? How are these errors surfaced\n              // so bugs can be reported\n              // @TODO the invocation key can have sensitive data in it. we should not log this entire object\n              console.error(\n                `Invariant invalid cacheEntry returned for ${invocationKey}`\n              )\n              // will fall through to generating a new cache entry below\n            } else {\n              // We have a valid cache entry so we will be returning it. We also check to see if we need\n              // to background revalidate it by checking if it is stale.\n              const cachedResponse =\n                cacheEntry.value.data.body !== undefined\n                  ? JSON.parse(cacheEntry.value.data.body)\n                  : undefined\n              if (cacheEntry.isStale) {\n                // In App Router we return the stale result and revalidate in the background\n                if (!workStore.pendingRevalidates) {\n                  workStore.pendingRevalidates = {}\n                }\n\n                // We run the cache function asynchronously and save the result when it completes\n                workStore.pendingRevalidates[invocationKey] =\n                  workUnitAsyncStorage\n                    .run(innerCacheStore, cb, ...args)\n                    .then((result) => {\n                      return cacheNewResult(\n                        result,\n                        incrementalCache,\n                        cacheKey,\n                        tags,\n                        options.revalidate,\n                        fetchIdx,\n                        fetchUrl\n                      )\n                    })\n                    // @TODO This error handling seems wrong. We swallow the error?\n                    .catch((err) =>\n                      console.error(\n                        `revalidating cache with key: ${invocationKey}`,\n                        err\n                      )\n                    )\n              }\n              // We had a valid cache entry so we return it here\n              return cachedResponse\n            }\n          }\n        }\n\n        // If we got this far then we had an invalid cache entry and need to generate a new one\n        const result = await workUnitAsyncStorage.run(\n          innerCacheStore,\n          cb,\n          ...args\n        )\n\n        if (!workStore.isDraftMode) {\n          if (!workStore.pendingRevalidates) {\n            workStore.pendingRevalidates = {}\n          }\n\n          // We need to push the cache result promise to pending\n          // revalidates otherwise it won't be awaited and is just\n          // dangling\n          workStore.pendingRevalidates[invocationKey] = cacheNewResult(\n            result,\n            incrementalCache,\n            cacheKey,\n            tags,\n            options.revalidate,\n            fetchIdx,\n            fetchUrl\n          )\n        }\n\n        return result\n      } else {\n        noStoreFetchIdx += 1\n        // We are in Pages Router or were called outside of a render. We don't have a store\n        // so we just call the callback directly when it needs to run.\n        // If the entry is fresh we return it. If the entry is stale we return it but revalidate the entry in\n        // the background. If the entry is missing or invalid we generate a new entry and return it.\n\n        if (!incrementalCache.isOnDemandRevalidate) {\n          // We aren't doing an on demand revalidation so we check use the cache if valid\n          const cacheEntry = await incrementalCache.get(cacheKey, {\n            kind: IncrementalCacheKind.FETCH,\n            revalidate: options.revalidate,\n            tags,\n            fetchIdx,\n            fetchUrl,\n            softTags: implicitTags?.tags,\n          })\n\n          if (cacheEntry && cacheEntry.value) {\n            // The entry exists and has a value\n            if (cacheEntry.value.kind !== CachedRouteKind.FETCH) {\n              // The entry is invalid and we need a special warning\n              // @TODO why do we warn this way? Should this just be an error? How are these errors surfaced\n              // so bugs can be reported\n              console.error(\n                `Invariant invalid cacheEntry returned for ${invocationKey}`\n              )\n              // will fall through to generating a new cache entry below\n            } else if (!cacheEntry.isStale) {\n              // We have a valid cache entry and it is fresh so we return it\n              return cacheEntry.value.data.body !== undefined\n                ? JSON.parse(cacheEntry.value.data.body)\n                : undefined\n            }\n          }\n        }\n\n        // If we got this far then we had an invalid cache entry and need to generate a new one\n        const result = await workUnitAsyncStorage.run(\n          innerCacheStore,\n          cb,\n          ...args\n        )\n\n        // we need to wait setting the new cache result here as\n        // we don't have pending revalidates on workStore to\n        // push to and we can't have a dangling promise\n        await cacheNewResult(\n          result,\n          incrementalCache,\n          cacheKey,\n          tags,\n          options.revalidate,\n          fetchIdx,\n          fetchUrl\n        )\n        return result\n      }\n    } finally {\n      if (cacheSignal) {\n        cacheSignal.endRead()\n      }\n    }\n  }\n  // TODO: once AsyncLocalStorage.run() returns the correct types this override will no longer be necessary\n  return cachedCb as unknown as T\n}\n\nfunction getFetchUrlPrefix(\n  workStore: WorkStore,\n  workUnitStore: WorkUnitStore\n): string {\n  switch (workUnitStore.type) {\n    case 'request':\n      const pathname = workUnitStore.url.pathname\n      const searchParams = new URLSearchParams(workUnitStore.url.search)\n\n      const sortedSearch = [...searchParams.keys()]\n        .sort((a, b) => a.localeCompare(b))\n        .map((key) => `${key}=${searchParams.get(key)}`)\n        .join('&')\n\n      return `${pathname}${sortedSearch.length ? '?' : ''}${sortedSearch}`\n    case 'prerender':\n    case 'prerender-client':\n    case 'prerender-runtime':\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'cache':\n    case 'private-cache':\n    case 'unstable-cache':\n      return workStore.route\n    default:\n      return workUnitStore satisfies never\n  }\n}\n","class UrlNode {\n  placeholder: boolean = true\n  children: Map<string, UrlNode> = new Map()\n  slugName: string | null = null\n  restSlugName: string | null = null\n  optionalRestSlugName: string | null = null\n\n  insert(urlPath: string): void {\n    this._insert(urlPath.split('/').filter(Boolean), [], false)\n  }\n\n  smoosh(): string[] {\n    return this._smoosh()\n  }\n\n  private _smoosh(prefix: string = '/'): string[] {\n    const childrenPaths = [...this.children.keys()].sort()\n    if (this.slugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[]'), 1)\n    }\n    if (this.restSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[...]'), 1)\n    }\n    if (this.optionalRestSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[[...]]'), 1)\n    }\n\n    const routes = childrenPaths\n      .map((c) => this.children.get(c)!._smoosh(`${prefix}${c}/`))\n      .reduce((prev, curr) => [...prev, ...curr], [])\n\n    if (this.slugName !== null) {\n      routes.push(\n        ...this.children.get('[]')!._smoosh(`${prefix}[${this.slugName}]/`)\n      )\n    }\n\n    if (!this.placeholder) {\n      const r = prefix === '/' ? '/' : prefix.slice(0, -1)\n      if (this.optionalRestSlugName != null) {\n        throw new Error(\n          `You cannot define a route with the same specificity as a optional catch-all route (\"${r}\" and \"${r}[[...${this.optionalRestSlugName}]]\").`\n        )\n      }\n\n      routes.unshift(r)\n    }\n\n    if (this.restSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[...]')!\n          ._smoosh(`${prefix}[...${this.restSlugName}]/`)\n      )\n    }\n\n    if (this.optionalRestSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[[...]]')!\n          ._smoosh(`${prefix}[[...${this.optionalRestSlugName}]]/`)\n      )\n    }\n\n    return routes\n  }\n\n  private _insert(\n    urlPaths: string[],\n    slugNames: string[],\n    isCatchAll: boolean\n  ): void {\n    if (urlPaths.length === 0) {\n      this.placeholder = false\n      return\n    }\n\n    if (isCatchAll) {\n      throw new Error(`Catch-all must be the last part of the URL.`)\n    }\n\n    // The next segment in the urlPaths list\n    let nextSegment = urlPaths[0]\n\n    // Check if the segment matches `[something]`\n    if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n      // Strip `[` and `]`, leaving only `something`\n      let segmentName = nextSegment.slice(1, -1)\n\n      let isOptional = false\n      if (segmentName.startsWith('[') && segmentName.endsWith(']')) {\n        // Strip optional `[` and `]`, leaving only `something`\n        segmentName = segmentName.slice(1, -1)\n        isOptional = true\n      }\n\n      if (segmentName.startsWith('…')) {\n        throw new Error(\n          `Detected a three-dot character ('…') at ('${segmentName}'). Did you mean ('...')?`\n        )\n      }\n\n      if (segmentName.startsWith('...')) {\n        // Strip `...`, leaving only `something`\n        segmentName = segmentName.substring(3)\n        isCatchAll = true\n      }\n\n      if (segmentName.startsWith('[') || segmentName.endsWith(']')) {\n        throw new Error(\n          `Segment names may not start or end with extra brackets ('${segmentName}').`\n        )\n      }\n\n      if (segmentName.startsWith('.')) {\n        throw new Error(\n          `Segment names may not start with erroneous periods ('${segmentName}').`\n        )\n      }\n\n      function handleSlug(previousSlug: string | null, nextSlug: string) {\n        if (previousSlug !== null) {\n          // If the specific segment already has a slug but the slug is not `something`\n          // This prevents collisions like:\n          // pages/[post]/index.js\n          // pages/[id]/index.js\n          // Because currently multiple dynamic params on the same segment level are not supported\n          if (previousSlug !== nextSlug) {\n            // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.\n            throw new Error(\n              `You cannot use different slug names for the same dynamic path ('${previousSlug}' !== '${nextSlug}').`\n            )\n          }\n        }\n\n        slugNames.forEach((slug) => {\n          if (slug === nextSlug) {\n            throw new Error(\n              `You cannot have the same slug name \"${nextSlug}\" repeat within a single dynamic path`\n            )\n          }\n\n          if (slug.replace(/\\W/g, '') === nextSegment.replace(/\\W/g, '')) {\n            throw new Error(\n              `You cannot have the slug names \"${slug}\" and \"${nextSlug}\" differ only by non-word symbols within a single dynamic path`\n            )\n          }\n        })\n\n        slugNames.push(nextSlug)\n      }\n\n      if (isCatchAll) {\n        if (isOptional) {\n          if (this.restSlugName != null) {\n            throw new Error(\n              `You cannot use both an required and optional catch-all route at the same level (\"[...${this.restSlugName}]\" and \"${urlPaths[0]}\" ).`\n            )\n          }\n\n          handleSlug(this.optionalRestSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.optionalRestSlugName = segmentName\n          // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n          nextSegment = '[[...]]'\n        } else {\n          if (this.optionalRestSlugName != null) {\n            throw new Error(\n              `You cannot use both an optional and required catch-all route at the same level (\"[[...${this.optionalRestSlugName}]]\" and \"${urlPaths[0]}\").`\n            )\n          }\n\n          handleSlug(this.restSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.restSlugName = segmentName\n          // nextSegment is overwritten to [...] so that it can later be sorted specifically\n          nextSegment = '[...]'\n        }\n      } else {\n        if (isOptional) {\n          throw new Error(\n            `Optional route parameters are not yet supported (\"${urlPaths[0]}\").`\n          )\n        }\n        handleSlug(this.slugName, segmentName)\n        // slugName is kept as it can only be one particular slugName\n        this.slugName = segmentName\n        // nextSegment is overwritten to [] so that it can later be sorted specifically\n        nextSegment = '[]'\n      }\n    }\n\n    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n    if (!this.children.has(nextSegment)) {\n      this.children.set(nextSegment, new UrlNode())\n    }\n\n    this.children\n      .get(nextSegment)!\n      ._insert(urlPaths.slice(1), slugNames, isCatchAll)\n  }\n}\n\n/**\n * @deprecated Use `sortSortableRoutes` or `sortPages` instead.\n */\nexport function getSortedRoutes(\n  normalizedPages: ReadonlyArray<string>\n): string[] {\n  // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n  // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n  // Only 1 dynamic segment per nesting level\n\n  // So in the case that is test/integration/dynamic-routing it'll be this:\n  // pages/[post]/comments.js\n  // pages/blog/[post]/comment/[id].js\n  // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n  // So in this case `UrlNode` created here has `this.slugName === 'post'`\n  // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n  // Instead what has to be passed through is the upwards path's dynamic names\n  const root = new UrlNode()\n\n  // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n  normalizedPages.forEach((pagePath) => root.insert(pagePath))\n  // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n  return root.smoosh()\n}\n\n/**\n * @deprecated Use `sortSortableRouteObjects` or `sortPageObjects` instead.\n */\nexport function getSortedRouteObjects<T>(\n  objects: T[],\n  getter: (obj: T) => string\n): T[] {\n  // We're assuming here that all the pathnames are unique, that way we can\n  // sort the list and use the index as the key.\n  const indexes: Record<string, number> = {}\n  const pathnames: string[] = []\n  for (let i = 0; i < objects.length; i++) {\n    const pathname = getter(objects[i])\n    indexes[pathname] = i\n    pathnames[i] = pathname\n  }\n\n  // Sort the pathnames.\n  const sorted = getSortedRoutes(pathnames)\n\n  // Map the sorted pathnames back to the original objects using the new sorted\n  // index.\n  return sorted.map((pathname) => objects[indexes[pathname]])\n}\n","import {\n  extractInterceptionRouteInformation,\n  isInterceptionRouteAppPath,\n} from './interception-routes'\n\n// Identify /.*[param].*/ in route string\nconst TEST_ROUTE = /\\/[^/]*\\[[^/]+\\][^/]*(?=\\/|$)/\n\n// Identify /[param]/ in route string\nconst TEST_STRICT_ROUTE = /\\/\\[[^/]+\\](?=\\/|$)/\n\n/**\n * Check if a route is dynamic.\n *\n * @param route - The route to check.\n * @param strict - Whether to use strict mode which prohibits segments with prefixes/suffixes (default: true).\n * @returns Whether the route is dynamic.\n */\nexport function isDynamicRoute(route: string, strict: boolean = true): boolean {\n  if (isInterceptionRouteAppPath(route)) {\n    route = extractInterceptionRouteInformation(route).interceptedRoute\n  }\n\n  if (strict) {\n    return TEST_STRICT_ROUTE.test(route)\n  }\n\n  return TEST_ROUTE.test(route)\n}\n","export { getSortedRoutes, getSortedRouteObjects } from './sorted-routes'\nexport { isDynamicRoute } from './is-dynamic'\n","import {\n  abortAndThrowOnSynchronousRequestDataAccess,\n  postponeWithTracking,\n} from '../../app-render/dynamic-rendering'\nimport { isDynamicRoute } from '../../../shared/lib/router/utils'\nimport {\n  NEXT_CACHE_IMPLICIT_TAG_ID,\n  NEXT_CACHE_SOFT_TAG_MAX_LENGTH,\n} from '../../../lib/constants'\nimport { workAsyncStorage } from '../../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../../app-render/work-unit-async-storage.external'\nimport { DynamicServerError } from '../../../client/components/hooks-server-context'\nimport { InvariantError } from '../../../shared/lib/invariant-error'\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n *\n * Read more: [Next.js Docs: `revalidateTag`](https://nextjs.org/docs/app/api-reference/functions/revalidateTag)\n */\nexport function revalidateTag(tag: string) {\n  return revalidate([tag], `revalidateTag ${tag}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific path.\n *\n * Read more: [Next.js Docs: `unstable_expirePath`](https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath)\n */\nexport function unstable_expirePath(\n  originalPath: string,\n  type?: 'layout' | 'page'\n) {\n  if (originalPath.length > NEXT_CACHE_SOFT_TAG_MAX_LENGTH) {\n    console.warn(\n      `Warning: expirePath received \"${originalPath}\" which exceeded max length of ${NEXT_CACHE_SOFT_TAG_MAX_LENGTH}. See more info here https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath`\n    )\n    return\n  }\n\n  let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath}`\n\n  if (type) {\n    normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}`\n  } else if (isDynamicRoute(originalPath)) {\n    console.warn(\n      `Warning: a dynamic page path \"${originalPath}\" was passed to \"expirePath\", but the \"type\" parameter is missing. This has no effect by default, see more info here https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath`\n    )\n  }\n  return revalidate([normalizedPath], `unstable_expirePath ${originalPath}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n *\n * Read more: [Next.js Docs: `unstable_expireTag`](https://nextjs.org/docs/app/api-reference/functions/unstable_expireTag)\n */\nexport function unstable_expireTag(...tags: string[]) {\n  return revalidate(tags, `unstable_expireTag ${tags.join(', ')}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific path.\n *\n * Read more: [Next.js Docs: `revalidatePath`](https://nextjs.org/docs/app/api-reference/functions/revalidatePath)\n */\nexport function revalidatePath(originalPath: string, type?: 'layout' | 'page') {\n  if (originalPath.length > NEXT_CACHE_SOFT_TAG_MAX_LENGTH) {\n    console.warn(\n      `Warning: revalidatePath received \"${originalPath}\" which exceeded max length of ${NEXT_CACHE_SOFT_TAG_MAX_LENGTH}. See more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n    return\n  }\n\n  let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath}`\n\n  if (type) {\n    normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}`\n  } else if (isDynamicRoute(originalPath)) {\n    console.warn(\n      `Warning: a dynamic page path \"${originalPath}\" was passed to \"revalidatePath\", but the \"type\" parameter is missing. This has no effect by default, see more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n  }\n  return revalidate([normalizedPath], `revalidatePath ${originalPath}`)\n}\n\nfunction revalidate(tags: string[], expression: string) {\n  const store = workAsyncStorage.getStore()\n  if (!store || !store.incrementalCache) {\n    throw new Error(\n      `Invariant: static generation store missing in ${expression}`\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    if (workUnitStore.phase === 'render') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" during render which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n      )\n    }\n\n    switch (workUnitStore.type) {\n      case 'cache':\n      case 'private-cache':\n        throw new Error(\n          `Route ${store.route} used \"${expression}\" inside a \"use cache\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n        )\n      case 'unstable-cache':\n        throw new Error(\n          `Route ${store.route} used \"${expression}\" inside a function cached with \"unstable_cache(...)\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n        )\n      case 'prerender':\n      case 'prerender-runtime':\n        // cacheComponents Prerender\n        const error = new Error(\n          `Route ${store.route} used ${expression} without first calling \\`await connection()\\`.`\n        )\n        return abortAndThrowOnSynchronousRequestDataAccess(\n          store.route,\n          expression,\n          error,\n          workUnitStore\n        )\n      case 'prerender-client':\n        throw new InvariantError(\n          `${expression} must not be used within a client component. Next.js should be preventing ${expression} from being included in client components statically, but did not in this case.`\n        )\n      case 'prerender-ppr':\n        return postponeWithTracking(\n          store.route,\n          expression,\n          workUnitStore.dynamicTracking\n        )\n      case 'prerender-legacy':\n        workUnitStore.revalidate = 0\n\n        const err = new DynamicServerError(\n          `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n        )\n        store.dynamicUsageDescription = expression\n        store.dynamicUsageStack = err.stack\n\n        throw err\n      case 'request':\n        if (process.env.NODE_ENV !== 'production') {\n          // TODO: This is most likely incorrect. It would lead to the ISR\n          // status being flipped when revalidating a static page with a server\n          // action.\n          workUnitStore.usedDynamic = true\n        }\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n\n  if (!store.pendingRevalidatedTags) {\n    store.pendingRevalidatedTags = []\n  }\n\n  for (const tag of tags) {\n    if (!store.pendingRevalidatedTags.includes(tag)) {\n      store.pendingRevalidatedTags.push(tag)\n    }\n  }\n\n  // TODO: only revalidate if the path matches\n  store.pathWasRevalidated = true\n}\n","import { workAsyncStorage } from '../../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../../app-render/work-unit-async-storage.external'\nimport { markCurrentScopeAsDynamic } from '../../app-render/dynamic-rendering'\n\n/**\n * This function can be used to declaratively opt out of static rendering and indicate a particular component should not be cached.\n *\n * It marks the current scope as dynamic.\n *\n * - In [non-PPR](https://nextjs.org/docs/app/api-reference/next-config-js/partial-prerendering) cases this will make a static render\n * halt and mark the page as dynamic.\n * - In PPR cases this will postpone the render at this location.\n *\n * If we are inside a cache scope then this function does nothing.\n *\n * @note It expects to be called within App Router and will error otherwise.\n *\n * Read more: [Next.js Docs: `unstable_noStore`](https://nextjs.org/docs/app/api-reference/functions/unstable_noStore)\n */\nexport function unstable_noStore() {\n  const callingExpression = 'unstable_noStore()'\n  const store = workAsyncStorage.getStore()\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (!store) {\n    // This generally implies we are being called in Pages router. We should probably not support\n    // unstable_noStore in contexts outside of `react-server` condition but since we historically\n    // have not errored here previously, we maintain that behavior for now.\n    return\n  } else if (store.forceStatic) {\n    return\n  } else {\n    store.isUnstableNoStore = true\n    if (workUnitStore) {\n      switch (workUnitStore.type) {\n        case 'prerender':\n        case 'prerender-client':\n        case 'prerender-runtime':\n          // unstable_noStore() is a noop in Dynamic I/O.\n          return\n        case 'prerender-ppr':\n        case 'prerender-legacy':\n        case 'request':\n        case 'cache':\n        case 'private-cache':\n        case 'unstable-cache':\n          break\n        default:\n          workUnitStore satisfies never\n      }\n    }\n    markCurrentScopeAsDynamic(store, workUnitStore, callingExpression)\n  }\n}\n","import { workAsyncStorage } from '../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external'\n\nexport type CacheLife = {\n  // How long the client can cache a value without checking with the server.\n  stale?: number\n  // How frequently you want the cache to refresh on the server.\n  // Stale values may be served while revalidating.\n  revalidate?: number\n  // In the worst case scenario, where you haven't had traffic in a while,\n  // how stale can a value be until you prefer deopting to dynamic.\n  // Must be longer than revalidate.\n  expire?: number\n}\n// The equivalent header is kind of like:\n// Cache-Control: max-age=[stale],s-max-age=[revalidate],stale-while-revalidate=[expire-revalidate],stale-if-error=[expire-revalidate]\n// Except that stale-while-revalidate/stale-if-error only applies to shared caches - not private caches.\n\n// The default revalidates relatively frequently but doesn't expire to ensure it's always\n// able to serve fast results but by default doesn't hang.\n\n// This gets overridden by the next-types-plugin\ntype CacheLifeProfiles =\n  | 'default'\n  | 'seconds'\n  | 'minutes'\n  | 'hours'\n  | 'days'\n  | 'weeks'\n  | 'max'\n  | (string & {})\n\nfunction validateCacheLife(profile: CacheLife) {\n  if (profile.stale !== undefined) {\n    if ((profile.stale as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you want to cache on the client forever ' +\n          'without checking with the server.'\n      )\n    } else if (typeof profile.stale !== 'number') {\n      throw new Error('The stale option must be a number of seconds.')\n    }\n  }\n  if (profile.revalidate !== undefined) {\n    if ((profile.revalidate as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you do not want to revalidate by time.'\n      )\n    } else if (typeof profile.revalidate !== 'number') {\n      throw new Error('The revalidate option must be a number of seconds.')\n    }\n  }\n  if (profile.expire !== undefined) {\n    if ((profile.expire as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you want to cache on the server forever ' +\n          'without checking with the origin.'\n      )\n    } else if (typeof profile.expire !== 'number') {\n      throw new Error('The expire option must be a number of seconds.')\n    }\n  }\n\n  if (profile.revalidate !== undefined && profile.expire !== undefined) {\n    if (profile.revalidate > profile.expire) {\n      throw new Error(\n        'If providing both the revalidate and expire options, ' +\n          'the expire option must be greater than the revalidate option. ' +\n          'The expire option indicates how many seconds from the start ' +\n          'until it can no longer be used.'\n      )\n    }\n  }\n\n  if (profile.stale !== undefined && profile.expire !== undefined) {\n    if (profile.stale > profile.expire) {\n      throw new Error(\n        'If providing both the stale and expire options, ' +\n          'the expire option must be greater than the stale option. ' +\n          'The expire option indicates how many seconds from the start ' +\n          'until it can no longer be used.'\n      )\n    }\n  }\n}\n\nexport function cacheLife(profile: CacheLifeProfiles | CacheLife): void {\n  if (!process.env.__NEXT_USE_CACHE) {\n    throw new Error(\n      'cacheLife() is only available with the experimental.useCache config.'\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n\n  switch (workUnitStore?.type) {\n    case 'prerender':\n    case 'prerender-client':\n    case 'prerender-runtime':\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'request':\n    case 'unstable-cache':\n    case undefined:\n      throw new Error(\n        'cacheLife() can only be called inside a \"use cache\" function.'\n      )\n    case 'cache':\n    case 'private-cache':\n      break\n    default:\n      workUnitStore satisfies never\n  }\n\n  if (typeof profile === 'string') {\n    const workStore = workAsyncStorage.getStore()\n    if (!workStore) {\n      throw new Error(\n        'cacheLife() can only be called during App Router rendering at the moment.'\n      )\n    }\n    if (!workStore.cacheLifeProfiles) {\n      throw new Error(\n        'cacheLifeProfiles should always be provided. This is a bug in Next.js.'\n      )\n    }\n\n    // TODO: This should be globally available and not require an AsyncLocalStorage.\n    const configuredProfile = workStore.cacheLifeProfiles[profile]\n    if (configuredProfile === undefined) {\n      if (workStore.cacheLifeProfiles[profile.trim()]) {\n        throw new Error(\n          `Unknown cacheLife profile \"${profile}\" is not configured in next.config.js\\n` +\n            `Did you mean \"${profile.trim()}\" without the spaces?`\n        )\n      }\n      throw new Error(\n        `Unknown cacheLife profile \"${profile}\" is not configured in next.config.js\\n` +\n          'module.exports = {\\n' +\n          '  experimental: {\\n' +\n          '    cacheLife: {\\n' +\n          `      \"${profile}\": ...\\n` +\n          '    }\\n' +\n          '  }\\n' +\n          '}'\n      )\n    }\n    profile = configuredProfile\n  } else if (\n    typeof profile !== 'object' ||\n    profile === null ||\n    Array.isArray(profile)\n  ) {\n    throw new Error(\n      'Invalid cacheLife() option. Either pass a profile name or object.'\n    )\n  } else {\n    validateCacheLife(profile)\n  }\n\n  if (profile.revalidate !== undefined) {\n    // Track the explicit revalidate time.\n    if (\n      workUnitStore.explicitRevalidate === undefined ||\n      workUnitStore.explicitRevalidate > profile.revalidate\n    ) {\n      workUnitStore.explicitRevalidate = profile.revalidate\n    }\n  }\n  if (profile.expire !== undefined) {\n    // Track the explicit expire time.\n    if (\n      workUnitStore.explicitExpire === undefined ||\n      workUnitStore.explicitExpire > profile.expire\n    ) {\n      workUnitStore.explicitExpire = profile.expire\n    }\n  }\n  if (profile.stale !== undefined) {\n    // Track the explicit stale time.\n    if (\n      workUnitStore.explicitStale === undefined ||\n      workUnitStore.explicitStale > profile.stale\n    ) {\n      workUnitStore.explicitStale = profile.stale\n    }\n  }\n}\n","import { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external'\nimport { validateTags } from '../lib/patch-fetch'\n\nexport function cacheTag(...tags: string[]): void {\n  if (!process.env.__NEXT_USE_CACHE) {\n    throw new Error(\n      'cacheTag() is only available with the experimental.useCache config.'\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n\n  switch (workUnitStore?.type) {\n    case 'prerender':\n    case 'prerender-client':\n    case 'prerender-runtime':\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'request':\n    case 'unstable-cache':\n    case undefined:\n      throw new Error(\n        'cacheTag() can only be called inside a \"use cache\" function.'\n      )\n    case 'cache':\n    case 'private-cache':\n      break\n    default:\n      workUnitStore satisfies never\n  }\n\n  const validTags = validateTags(tags, 'cacheTag()')\n\n  if (!workUnitStore.tags) {\n    workUnitStore.tags = validTags\n  } else {\n    workUnitStore.tags.push(...validTags)\n  }\n}\n","const cacheExports = {\n  unstable_cache: require('next/dist/server/web/spec-extension/unstable-cache')\n    .unstable_cache,\n\n  revalidateTag: require('next/dist/server/web/spec-extension/revalidate')\n    .revalidateTag,\n  revalidatePath: require('next/dist/server/web/spec-extension/revalidate')\n    .revalidatePath,\n\n  unstable_expireTag: require('next/dist/server/web/spec-extension/revalidate')\n    .unstable_expireTag,\n  unstable_expirePath: require('next/dist/server/web/spec-extension/revalidate')\n    .unstable_expirePath,\n\n  unstable_noStore:\n    require('next/dist/server/web/spec-extension/unstable-no-store')\n      .unstable_noStore,\n  unstable_cacheLife: require('next/dist/server/use-cache/cache-life')\n    .cacheLife,\n  unstable_cacheTag: require('next/dist/server/use-cache/cache-tag').cacheTag,\n}\n\n// https://nodejs.org/api/esm.html#commonjs-namespaces\n// When importing CommonJS modules, the module.exports object is provided as the default export\nmodule.exports = cacheExports\n\n// make import { xxx } from 'next/cache' work\nexports.unstable_cache = cacheExports.unstable_cache\nexports.revalidatePath = cacheExports.revalidatePath\nexports.revalidateTag = cacheExports.revalidateTag\nexports.unstable_expireTag = cacheExports.unstable_expireTag\nexports.unstable_expirePath = cacheExports.unstable_expirePath\nexports.unstable_noStore = cacheExports.unstable_noStore\nexports.unstable_cacheLife = cacheExports.unstable_cacheLife\nexports.unstable_cacheTag = cacheExports.unstable_cacheTag\n","// This function ensures that all the exported values are valid server actions,\n// during the runtime. By definition all actions are required to be async\n// functions, but here we can only check that they are functions.\nexport function ensureServerEntryExports(actions: any[]) {\n  for (let i = 0; i < actions.length; i++) {\n    const action = actions[i]\n    if (typeof action !== 'function') {\n      throw new Error(\n        `A \"use server\" file can only export async functions, found ${typeof action}.\\nRead more: https://nextjs.org/docs/messages/invalid-use-server-value`\n      )\n    }\n  }\n}\n","// Historia de Usuario 5: Gestión de Roles de Usuario\n// Historia de Usuario 6: Completar Perfil de Usuario\n\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport admin from '@/lib/firebaseAdmin';\n\n/**\n * @constant aplicationRoles\n * @description Define roles especiales asignados a usuarios específicos según su DNI.\n * Esto centraliza la lógica de asignación de roles de administrador o empleado.\n * Corresponde a la \"Historia de Usuario 5: Gestión de Roles de Usuario\".\n */\nconst aplicationRoles = {\n  '00000001': 'admin',      // Magali - DNI sin puntos\n  '00000002': 'peluquera',\n  '00000003': 'transporte',\n};\n\n/**\n * @function completarPerfil\n * @description Server Action para guardar los datos del perfil de un usuario y asignarle un rol.\n * Se ejecuta después de que un usuario se registra exitosamente.\n * Corresponde a las \"Historias de Usuario 5 y 6\".\n * @param {string} userId - El ID del usuario de Firebase Authentication.\n * @param {object} userData - Los datos del perfil del formulario.\n */\nexport async function completarPerfil(userId, userData) {\n  const firestore = admin.firestore();\n  const auth = admin.auth();\n\n  const { \n    nombre, \n    apellido, \n    dni, \n    telefonoPrincipal, \n    telefonoSecundario, \n    direccion, \n    barrio, \n    nombreContactoEmergencia, \n    telefonoContactoEmergencia \n  } = userData;\n  \n  if (!userId || !nombre || !apellido || !dni || !telefonoPrincipal || !direccion || !barrio || !nombreContactoEmergencia || !telefonoContactoEmergencia) {\n    console.error('Validation failed. Missing data:', { userId, ...userData });\n    return { success: false, error: 'Faltan datos esenciales para completar el perfil.' };\n  }\n\n  try {\n    // 1. Asignación de Rol (HU 5)\n    // Se verifica si el DNI del usuario corresponde a un rol especial.\n    // Si no, se le asigna el rol 'dueño' por defecto.\n    const userRole = aplicationRoles[dni] || 'dueño';\n\n    // Se establece el \"custom claim\" en Firebase Authentication. Este token de rol\n    // se usará en toda la app para controlar el acceso.\n    await auth.setCustomUserClaims(userId, { role: userRole });\n\n    // 2. Guardar Datos del Perfil en Firestore (HU 6)\n    // Se almacenan los detalles del perfil en la colección 'users'.\n    await firestore.collection('users').doc(userId).set({\n      nombre,\n      apellido,\n      dni,\n      telefonoPrincipal,\n      telefonoSecundario: telefonoSecundario || '',\n      direccion,\n      barrio,\n      nombreContactoEmergencia,\n      telefonoContactoEmergencia,\n      role: userRole,\n      profileCompleted: true,\n      createdAt: admin.firestore.FieldValue.serverTimestamp(),\n    }, { merge: true });\n\n    revalidatePath('/');\n    \n    return { success: true, role: userRole };\n\n  } catch (error) {\n    console.error('Error al completar el perfil en el servidor:', error);\n    return { success: false, error: 'Ocurrió un error en el servidor al procesar tu perfil.' };\n  }\n}\n\n/**\n * Server Action para agregar una nueva mascota a un usuario.\n */\nexport async function agregarMascota(userId, mascotaData) {\n    if (!userId) {\n        return { success: false, error: 'Usuario no autenticado.' };\n    }\n\n    const { nombre, especie, raza, fechaNacimiento, tamaño, enAdopcion } = mascotaData;\n\n    if (!nombre || !especie || !raza || !fechaNacimiento || !tamaño) {\n        return { success: false, error: 'Todos los campos, incluyendo el tamaño, son obligatorios.' };\n    }\n\n    const firestore = admin.firestore();\n\n    try {\n        const mascotaRef = await firestore.collection('users').doc(userId).collection('mascotas').add({\n            nombre,\n            especie,\n            raza,\n            fechaNacimiento,\n            tamaño,\n            enAdopcion: enAdopcion || false, \n            createdAt: new Date(),\n        });\n\n        revalidatePath('/mascotas');\n\n        return { success: true, mascotaId: mascotaRef.id };\n\n    } catch (error) {\n        console.error('Error al agregar la mascota:', error);\n        return { success: false, error: 'No se pudo registrar la mascota en la base de datos.' };\n    }\n}\n"],"names":["registerServerReference","AppRenderSpan","AppRouteRouteHandlersSpan","BaseServerSpan","LoadComponentsSpan","LogSpanAllowList","MiddlewareSpan","NextNodeServerSpan","NextServerSpan","NextVanillaSpanAllowlist","NodeSpan","RenderSpan","ResolveMetadataSpan","RouterSpan","StartServerSpan","isThenable","promise","then","BubbledError","SpanKind","SpanStatusCode","getTracer","isBubbledError","api","process","env","NEXT_RUNTIME","require","err","context","propagation","trace","ROOT_CONTEXT","Error","constructor","bubble","result","error","closeSpanWithError","span","setAttribute","recordException","name","setStatus","code","ERROR","message","end","rootSpanAttributesStore","Map","rootSpanIdKey","createContextKey","lastSpanId","getSpanId","clientTraceDataSetter","set","carrier","key","value","push","NextTracerImpl","getTracerInstance","getContext","getTracePropagationData","activeContext","active","entries","inject","getActiveScopeSpan","getSpan","withPropagatedContext","fn","getter","getSpanContext","remoteContext","extract","with","args","type","fnOrOptions","fnOrEmpty","options","spanName","includes","NEXT_OTEL_VERBOSE","hideSpan","spanContext","parentSpan","isRootSpan","isRemote","spanId","attributes","setValue","startActiveSpan","startTime","globalThis","performance","now","undefined","onCleanup","delete","NEXT_OTEL_PERFORMANCE_PREFIX","measure","split","pop","replace","match","toLowerCase","start","Object","length","res","catch","finally","wrap","tracer","optionsObj","apply","arguments","lastArgId","cb","scopeBoundCb","bind","_span","done","startSpan","setSpan","getRootSpanAttributes","getValue","get","setRootSpanAttribute","DetachedPromise","resolve","reject","Promise","rej","ENCODED_TAGS","OPENING","HTML","Uint8Array","BODY","CLOSED","HEAD","BODY_AND_HTML","META","ICON_MARK","indexOfUint8Array","isEquivalentUint8Arrays","removeFromUint8Array","a","b","i","completeMatch","j","tagIndex","subarray","removed","slice","MISSING_ROOT_TAGS_ERROR","DOC_PREFETCH_RANGE_HEADER_VALUE","doesExportedHtmlMatchBuildId","insertBuildIdComment","DOCTYPE_PREFIX","MAX_BUILD_ID_LENGTH","escapeBuildId","buildId","truncated","originalHtml","startsWith","partialHtmlDocument","chainStreams","continueDynamicHTMLResume","continueDynamicPrerender","continueFizzStream","continueStaticPrerender","createBufferedTransformStream","createDocumentClosingStream","createRootLayoutValidatorStream","renderToInitialFizzStream","streamFromBuffer","streamFromString","streamToBuffer","streamToString","voidCatch","encoder","TextEncoder","streams","ReadableStream","controller","close","readable","writable","TransformStream","pipeTo","preventClose","nextStream","lastStream","str","enqueue","encode","chunk","stream","reader","getReader","chunks","read","Buffer","concat","signal","decoder","TextDecoder","fatal","string","aborted","decode","bufferedChunks","bufferByteLength","pending","flush","detached","scheduleImmediate","copiedBytes","bufferedChunk","byteLength","transform","createPrefetchCommentStream","isBuildTimePrerendering","didTransformFirstChunk","chunkStr","updatedChunkStr","ReactDOMServer","element","streamOptions","renderToReadableStream","createMetadataTransformStream","insert","chunkIndex","isMarkRemoved","iconMarkIndex","closedHeadIndex","iconMarkLength","replaced","insertion","encodedInsertion","insertionLength","createHeadInsertionTransformStream","inserted","hasBytes","index","insertedHeadContent","createDeferredSuffixStream","suffix","flushed","createFlightDataInjectionTransformStream","delayDataUntilFirstHtmlChunk","htmlStreamFinished","pull","donePulling","startOrContinuePulling","startPulling","atLeastOneTask","CLOSE_TAG","createMoveSuffixStream","foundSuffix","before","after","createStripDocumentClosingTagsTransform","foundHtml","foundBody","missingTags","map","c","join","chainTransformers","transformers","transformer","pipeThrough","renderStream","inlinedDataStream","isStaticGeneration","getServerInsertedHTML","getServerInsertedMetadata","validateRootLayout","suffixUnclosed","allReady","prerenderStream","arrayBufferToString","decrypt","encrypt","getActionEncryptionKey","getClientReferenceManifestForRsc","getServerModuleMap","setReferenceManifestsSingleton","stringToUint8Array","__next_loaded_action_key","buffer","bytes","len","String","fromCharCode","binary","arr","charCodeAt","iv","data","crypto","subtle","SERVER_ACTION_MANIFESTS_SINGLETON","Symbol","for","page","clientReferenceManifest","serverActionsManifest","serverModuleMap","clientReferenceManifestsPerPage","normalizeAppPath","serverActionsManifestSingleton","InvariantError","workStore","workAsyncStorage","getStore","mergeClientReferenceManifests","route","rawKey","NEXT_SERVER_ACTIONS_ENCRYPTION_KEY","encryptionKey","importKey","atob","clientReferenceManifests","values","mergedClientReferenceManifest","clientModules","edgeRscModuleMapping","rscModuleMapping","decryptActionBoundArgs","encryptActionBoundArgs","isEdgeRuntime","textEncoder","textDecoder","filterStackFrame","NODE_ENV","filterStackFrameDEV","findSourceMapURL","findSourceMapURLDEV","decodeActionBoundArg","actionId","arg","originalPayload","ivValue","payload","decrypted","encodeActionBoundArg","randomBytes","workUnitAsyncStorage","exit","getRandomValues","encrypted","btoa","ReadStatus","React","cache","workUnitStore","cacheSignal","getCacheSignal","captureStackTrace","didCatchError","hangingInputAbortSignal","createHangingInputAbortSignal","readStatus","startReadOnce","beginRead","endReadIfStarted","endRead","addEventListener","once","serialized","onError","console","prerenderResumeDataCache","getPrerenderResumeDataCache","renderResumeDataCache","getRenderResumeDataCache","cacheKey","cachedEncrypted","encryptedBoundArgs","encryptedPromise","decryptedBoundArgs","deserialized","createFromReadableStream","renderSignal","serverConsumerManifest","moduleLoading","moduleMap","cloneResponse","noop","registry","FinalizationRegistry","weakRef","deref","locked","cancel","original","body","body1","body2","tee","cloned1","Response","status","statusText","headers","defineProperty","url","configurable","enumerable","register","WeakRef","cloned2","createDedupeFetch","simpleCacheKey","generateCacheKey","request","JSON","stringify","method","Array","from","mode","redirect","credentials","referrer","referrerPolicy","integrity","originalFetch","getCacheEntries","dedupeFetch","resource","URL","Request","keepalive","cacheEntries","response","entry","CachedRouteKind","IncrementalCacheKind","Batcher","cacheKeyFn","schedulerFn","create","batch","NEXT_REQUEST_META","addRequestMeta","getRequestMeta","removeRequestMeta","setRequestMeta","req","meta","isNodeNextRequest","isNodeNextResponse","isWebNextRequest","isWebNextResponse","NextRequestAdapter","ResponseAborted","ResponseAbortedName","createAbortController","signalFromNodeResponse","AbortController","writableFinished","abort","errored","destroyed","AbortSignal","fromBaseNextRequest","fromWebNextRequest","fromNodeNextRequest","base","NextRequest","fromNodeOutgoingHttpHeaders","duplex","getClientComponentLoaderMetrics","wrapClientComponentLoader","clientComponentLoadStart","clientComponentLoadTimes","clientComponentLoadCount","ComponentMod","__next_app__","loadChunk","metrics","reset","isAbortError","pipeToNodeResponse","e","createWriterFromResponse","waitUntilForEnd","started","drained","onDrain","on","off","finished","WritableStream","write","flushHeaders","startResponse","ok","cause","destroy","writer","RenderResult","EMPTY","metadata","contentType","fromStatic","waitUntil","assignMetadata","assign","isNull","isDynamic","toUnchunkedString","isBuffer","isArray","coerce","unshift","RouteKind","fromResponseCacheEntry","routeKindToIncrementalCacheKind","toResponseCacheEntry","cacheEntry","kind","PAGES","html","pageData","APP_PAGE","postponed","rscData","segmentData","isMiss","isStale","cacheControl","HTML_CONTENT_TYPE_HEADER","routeKind","IMAGE","APP_ROUTE","PAGES_API","ResponseCache","minimal_mode","batcher","isOnDemandRevalidate","scheduleOnNextTick","responseGenerator","hasResolved","previousCacheEntry","incrementalCache","isFallback","isRoutePPREnabled","prom","previousCacheItem","expiresAt","Date","resolved","cachedResponse","isPrefetch","isRevalidating","resolveValue","newRevalidate","Math","min","max","revalidate","newExpire","expire","NEXT_PATCH_SYMBOL","createPatchedFetcher","patchFetch","validateRevalidate","validateTags","isFetchPatched","revalidateVal","normalizedRevalidate","INFINITE_CACHE","isNaN","tags","description","validTags","invalidTags","tag","reason","NEXT_CACHE_TAG_MAX_LENGTH","NEXT_CACHE_TAG_MAX_ITEMS","warn","log","trackFetchMetric","ctx","shouldTrackFetchMetrics","fetchMetrics","timeOrigin","idx","nextFetchId","createCachedPrerenderResponse","incrementalCacheContext","handleUnlock","bodyBuffer","arrayBuffer","fetchedData","fromEntries","toString","FETCH","createCachedDynamicResponse","serverComponentsHmrCache","input","cacheSetPromise","pendingRevalidateKey","pendingRevalidates","originFetch","patched","fetch","init","username","password","fetchUrl","href","toUpperCase","isInternal","next","internal","NEXT_OTEL_FETCH_DISABLED","fetchStart","internalFetch","CLIENT","filter","Boolean","hostname","port","isDraftMode","isRequestInput","field","finalRevalidate","getNextField","originalFetchRevalidate","currentFetchRevalidate","revalidateStore","collectedTags","implicitTags","pageFetchCacheMode","fetchCache","isUsingNoStore","isUnstableNoStore","currentFetchCacheConfig","cacheReason","cacheWarning","isConflictingRevalidate","hasExplicitFetchCacheOptOut","noFetchConfigAndForceDynamic","forceDynamic","_headers","initHeaders","Headers","hasUnCacheableHeader","isUnCacheableMethod","hasNoExplicitCacheConfig","autoNoCache","isImplicitBuildTimeCache","makeHangingPromise","forceStatic","markCurrentScopeAsDynamic","isCacheableRevalidate","isHmrRefresh","fetchIdx","doOriginalFetch","cacheReasonOverride","requestInputFields","reqInput","reqOptions","_ogBody","otherInput","clonedInit","fetchType","cacheStatus","CACHE_ONE_YEAR","incrementalCacheConfig","isForegroundRevalidate","isHmrRefreshCache","cachedFetchData","lock","softTags","waitAtLeastOneReactRenderTask","isRevalidate","pendingRevalidate","hasNextConfig","revalidatedResult","pendingResponse","responses","__nextPatched","__nextGetStaticStore","_nextOriginalFetch","unstable_cache","noStoreFetchIdx","cacheNewResult","keyParts","fixedKey","cachedCb","maybeIncrementalCache","__incrementalCache","fetchUrlPrefix","getFetchUrlPrefix","invocationKey","innerCacheStore","phase","draftMode","getDraftModeProviderForCacheScope","isNestedUnstableCache","parse","run","pathname","searchParams","URLSearchParams","search","sortedSearch","keys","sort","localeCompare","getSortedRouteObjects","getSortedRoutes","UrlNode","urlPath","_insert","smoosh","_smoosh","prefix","childrenPaths","children","slugName","splice","indexOf","restSlugName","optionalRestSlugName","routes","reduce","prev","curr","placeholder","r","urlPaths","slugNames","isCatchAll","nextSegment","endsWith","segmentName","isOptional","substring","handleSlug","previousSlug","nextSlug","forEach","slug","has","normalizedPages","root","pagePath","objects","indexes","pathnames","sorted","isDynamicRoute","TEST_ROUTE","TEST_STRICT_ROUTE","strict","isInterceptionRouteAppPath","extractInterceptionRouteInformation","interceptedRoute","test","revalidatePath","revalidateTag","unstable_expirePath","unstable_expireTag","originalPath","NEXT_CACHE_SOFT_TAG_MAX_LENGTH","normalizedPath","NEXT_CACHE_IMPLICIT_TAG_ID","expression","store","abortAndThrowOnSynchronousRequestDataAccess","postponeWithTracking","dynamicTracking","DynamicServerError","dynamicUsageDescription","dynamicUsageStack","stack","usedDynamic","pendingRevalidatedTags","pathWasRevalidated","unstable_noStore","callingExpression","cacheLife","validateCacheLife","profile","stale","__NEXT_USE_CACHE","cacheLifeProfiles","configuredProfile","trim","explicitRevalidate","explicitExpire","explicitStale","cacheTag","ensureServerEntryExports","actions","action"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]}
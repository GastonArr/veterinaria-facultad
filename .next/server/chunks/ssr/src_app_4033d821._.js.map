{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/user/veterinariamagali/src/app/components/PrivateRoute.js"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useRouter, usePathname } from 'next/navigation';\nimport { doc, getDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\n\nexport default function PrivateRoute({ children }) {\n  const { user, loading } = useAuth();\n  const router = useRouter();\n  const pathname = usePathname();\n  const [isProfileComplete, setIsProfileComplete] = useState(false);\n  const [checkingProfile, setCheckingProfile] = useState(true);\n\n  useEffect(() => {\n    if (loading) return;\n\n    // If no user, redirect to login, but avoid loop if already there\n    if (!user) {\n      if (pathname !== '/login') {\n        router.push('/login');\n      }\n      // Set checking to false since we've made our decision\n      setCheckingProfile(false);\n      return;\n    }\n\n    const checkUserProfile = async () => {\n      try {\n        // Corrected collection from 'clientes' to 'users'\n        const userDocRef = doc(db, 'users', user.uid);\n        const userDoc = await getDoc(userDocRef);\n        \n        // Use the 'profileCompleted' flag for a more robust check\n        if (userDoc.exists() && userDoc.data().profileCompleted) {\n          setIsProfileComplete(true);\n        } else {\n          setIsProfileComplete(false);\n          if (pathname !== '/completar-perfil') {\n            router.push('/completar-perfil');\n          }\n        }\n      } catch (error) {\n        console.error(\"Error al verificar el perfil:\", error);\n        // On error, we'll assume profile is incomplete to be safe\n        setIsProfileComplete(false);\n        if (pathname !== '/completar-perfil') {\n          router.push('/completar-perfil');\n        }\n      } finally {\n        setCheckingProfile(false);\n      }\n    };\n\n    checkUserProfile();\n\n  }, [user, loading, router, pathname]);\n\n  // Show a loading indicator while we verify auth and profile status\n  if (loading || checkingProfile) {\n    return <div>Cargando...</div>; // Or a more sophisticated spinner/skeleton component\n  }\n\n  // If user is not logged in, and we are on a public route like /login, show the page\n  if (!user && pathname === '/login'){\n    return children;\n  }\n\n  // If the profile is complete, show the requested page\n  if (isProfileComplete) {\n    return children;\n  }\n  \n  // If the profile is not complete, but we are on the page to complete it, show the page\n  if (!isProfileComplete && pathname === '/completar-perfil') {\n    return children;\n  }\n\n  // In other cases (like waiting for redirect), return null to prevent content flash\n  return null;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AANA;;;;;;;AAQe,SAAS,aAAa,EAAE,QAAQ,EAAE;IAC/C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAA,yIAAO;IACjC,MAAM,SAAS,IAAA,+IAAS;IACxB,MAAM,WAAW,IAAA,iJAAW;IAC5B,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,IAAA,iNAAQ,EAAC;IAC3D,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,IAAA,iNAAQ,EAAC;IAEvD,IAAA,kNAAS,EAAC;QACR,IAAI,SAAS;QAEb,iEAAiE;QACjE,IAAI,CAAC,MAAM;YACT,IAAI,aAAa,UAAU;gBACzB,OAAO,IAAI,CAAC;YACd;YACA,sDAAsD;YACtD,mBAAmB;YACnB;QACF;QAEA,MAAM,mBAAmB;YACvB,IAAI;gBACF,kDAAkD;gBAClD,MAAM,aAAa,IAAA,wKAAG,EAAC,4HAAE,EAAE,SAAS,KAAK,GAAG;gBAC5C,MAAM,UAAU,MAAM,IAAA,2KAAM,EAAC;gBAE7B,0DAA0D;gBAC1D,IAAI,QAAQ,MAAM,MAAM,QAAQ,IAAI,GAAG,gBAAgB,EAAE;oBACvD,qBAAqB;gBACvB,OAAO;oBACL,qBAAqB;oBACrB,IAAI,aAAa,qBAAqB;wBACpC,OAAO,IAAI,CAAC;oBACd;gBACF;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,iCAAiC;gBAC/C,0DAA0D;gBAC1D,qBAAqB;gBACrB,IAAI,aAAa,qBAAqB;oBACpC,OAAO,IAAI,CAAC;gBACd;YACF,SAAU;gBACR,mBAAmB;YACrB;QACF;QAEA;IAEF,GAAG;QAAC;QAAM;QAAS;QAAQ;KAAS;IAEpC,mEAAmE;IACnE,IAAI,WAAW,iBAAiB;QAC9B,qBAAO,8OAAC;sBAAI;;;;;kBAAmB,qDAAqD;IACtF;IAEA,oFAAoF;IACpF,IAAI,CAAC,QAAQ,aAAa,UAAS;QACjC,OAAO;IACT;IAEA,sDAAsD;IACtD,IAAI,mBAAmB;QACrB,OAAO;IACT;IAEA,uFAAuF;IACvF,IAAI,CAAC,qBAAqB,aAAa,qBAAqB;QAC1D,OAAO;IACT;IAEA,mFAAmF;IACnF,OAAO;AACT","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///home/user/veterinariamagali/src/app/actions/turnosActions.js"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport admin from '@/lib/firebaseAdmin';\nimport { cookies } from 'next/headers';\nimport { getUserIdFromSession } from '@/lib/firebaseAdmin';\n\n// --- Lógica para Turnos de Peluquería ---\n\nconst MAX_PERROS_GRANDES_POR_DIA = 2;\nconst MAX_TURNOS_POR_TURNO_PELUQUERIA = 8;\n\nexport async function solicitarTurnoPeluqueria(turnoData) {\n    // Añadimos 'metodoPago' a la desestructuración para que sea reconocido\n    const { clienteId, mascotaId, fecha, turno, servicios, transporte, metodoPago } = turnoData;\n\n    // Añadimos la validación para el nuevo campo\n    if (!clienteId || !mascotaId || !fecha || !turno || !metodoPago) {\n        return { success: false, error: 'Faltan datos esenciales, incluido el método de pago.' };\n    }\n\n    const firestore = admin.firestore();\n\n    try {\n        const mascotaRef = firestore.collection('users').doc(clienteId).collection('mascotas').doc(mascotaId);\n        const mascotaSnap = await mascotaRef.get();\n\n        if (!mascotaSnap.exists) {\n            return { success: false, error: 'La mascota seleccionada no existe.' };\n        }\n        const tamañoMascota = mascotaSnap.data().tamaño;\n\n        const resultado = await firestore.runTransaction(async (transaction) => {\n            const turnosRef = firestore.collection('turnos');\n\n            // ... (Lógica de validación de cupos existente, sin cambios)\n            if (tamañoMascota === 'grande') {\n                const qGrandes = turnosRef.where('fecha', '==', fecha).where('tipo', '==', 'peluqueria').where('tamañoMascota', '==', 'grande').where('estado', 'in', ['pendiente', 'confirmado']);\n                const snapGrandes = await transaction.get(qGrandes);\n                if (snapGrandes.docs.length >= MAX_PERROS_GRANDES_POR_DIA) {\n                    throw new Error('El cupo para perros grandes en esta fecha ya está completo.');\n                }\n            }\n            const qTurno = turnosRef.where('fecha', '==', fecha).where('turno', '==', turno).where('tipo', '==', 'peluqueria').where('estado', 'in', ['pendiente', 'confirmado']);\n            const snapTurno = await transaction.get(qTurno);\n            if (snapTurno.docs.length >= MAX_TURNOS_POR_TURNO_PELUQUERIA) {\n                throw new Error(`El turno de la ${turno} para esta fecha ya está completo.`);\n            }\n\n            const nuevoTurnoRef = firestore.collection('turnos').doc();\n            // El operador '...' se asegura de que 'metodoPago' se incluya en el objeto guardado\n            transaction.set(nuevoTurnoRef, {\n                ...turnoData,\n                tamañoMascota,\n                estado: 'pendiente',\n                createdAt: new Date().toISOString(),\n            });\n\n            return { success: true, turnoId: nuevoTurnoRef.id };\n        });\n\n        revalidatePath('/admin/turnos');\n        revalidatePath('/mis-turnos');\n        return resultado;\n\n    } catch (error) {\n        console.error('Error en la transacción de solicitud de turno de peluquería:', error);\n        return { success: false, error: error.message };\n    }\n}\n\n\n// --- Lógica para Turnos de Consulta ---\n\nexport async function solicitarTurnoConsulta(turnoData) {\n    const { clienteId, mascotaId, fecha, turno, motivo } = turnoData;\n\n    if (!clienteId || !mascotaId || !fecha || !turno || !motivo) {\n        return { success: false, error: 'Faltan datos esenciales para solicitar el turno.' };\n    }\n\n    const firestore = admin.firestore();\n\n    try {\n        const nuevoTurnoRef = firestore.collection('turnos').doc();\n        \n        await nuevoTurnoRef.set({\n            ...turnoData,\n            tipo: 'consulta',\n            estado: 'pendiente',\n            createdAt: new Date().toISOString(),\n        });\n\n        revalidatePath('/admin/turnos');\n        revalidatePath('/mis-turnos');\n\n        return { success: true, turnoId: nuevoTurnoRef.id };\n\n    } catch (error) {\n        console.error('Error al solicitar el turno de consulta:', error);\n        return { success: false, error: 'Ocurrió un error inesperado al guardar la solicitud.' };\n    }\n}\n\n\n// --- LÓGICA DE CANCELACIÓN DE TURNO (PARA USUARIOS) ---\n\nexport async function cancelarTurnoUsuario(turnoId) {\n    const sessionCookie = cookies().get('__session')?.value || '';\n    const userId = await getUserIdFromSession(sessionCookie);\n\n    if (!userId) {\n        return { success: false, error: 'No estás autenticado.' };\n    }\n\n    if (!turnoId) {\n        return { success: false, error: 'No se proporcionó un ID de turno.' };\n    }\n\n    const firestore = admin.firestore();\n    const turnoRef = firestore.collection('turnos').doc(turnoId);\n\n    try {\n        const turnoSnap = await turnoRef.get();\n\n        if (!turnoSnap.exists) {\n            return { success: false, error: 'El turno no existe.' };\n        }\n\n        const turnoData = turnoSnap.data();\n\n        if (turnoData.clienteId !== userId) {\n            return { success: false, error: 'No tienes permiso para cancelar este turno.' };\n        }\n\n        if ([ 'cancelado', 'completado'].includes(turnoData.estado)) {\n            return { success: false, error: 'Este turno ya no se puede cancelar.' };\n        }\n\n        const hoy = new Date();\n        hoy.setHours(0, 0, 0, 0);\n        const fechaTurno = new Date(turnoData.fecha + 'T12:00:00'); \n\n        if (fechaTurno < hoy) {\n            return { success: false, error: 'No se puede cancelar un turno que ya ha pasado.' };\n        }\n\n        await turnoRef.update({\n            estado: 'cancelado',\n            canceladoAt: new Date().toISOString(),\n            canceladoPor: 'usuario'\n        });\n\n        revalidatePath('/mis-turnos');\n        revalidatePath('/admin/turnos');\n\n        return { success: true };\n\n    } catch (error) {\n        console.error('Error al cancelar el turno:', error);\n        return { success: false, error: 'Ocurrió un error inesperado al intentar cancelar el turno.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;;IA4GsB,uBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file:///home/user/veterinariamagali/src/app/components/AccionesTurnoUsuario.jsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { FiTrash2 } from 'react-icons/fi';\nimport { cancelarTurnoUsuario } from '@/app/actions/turnosActions';\n\nexport default function AccionesTurnoUsuario({ turno }) {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n\n    // No mostramos ninguna acción si el turno ya está cancelado, completado o si ya pasó la fecha.\n    const hoy = new Date();\n    hoy.setHours(0, 0, 0, 0);\n    const fechaTurno = new Date(turno.fecha + 'T12:00:00');\n\n    const puedeCancelar = (\n        (turno.estado === 'pendiente' || turno.estado === 'confirmado') && \n        fechaTurno >= hoy\n    );\n\n    if (!puedeCancelar) {\n        return null; // No renderizar nada si no se puede cancelar\n    }\n\n    const handleCancel = async () => {\n        if (!window.confirm('¿Estás seguro de que quieres cancelar este turno? Esta acción no se puede deshacer.')) {\n            return;\n        }\n\n        setLoading(true);\n        setError('');\n        setSuccess('');\n\n        try {\n            const result = await cancelarTurnoUsuario(turno.id);\n            if (result.success) {\n                setSuccess('Turno cancelado con éxito.');\n                // El componente se ocultará automáticamente en la siguiente renderización gracias a revalidatePath\n            } else {\n                setError(result.error || 'No se pudo cancelar el turno.');\n            }\n        } catch (err) {\n            setError('Error de conexión al intentar cancelar.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"flex-shrink-0 self-center mt-4 sm:mt-0\">\n            {error && <p className=\"text-xs text-red-600 mb-2 text-center\">{error}</p>}\n            {success && <p className=\"text-xs text-green-600 mb-2 text-center\">{success}</p>}\n            \n            {!success && (\n                 <button \n                    onClick={handleCancel} \n                    disabled={loading}\n                    className=\"flex items-center justify-center px-4 py-2 border border-red-300 text-sm font-medium rounded-full text-red-600 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                >\n                    <FiTrash2 className=\"mr-2 h-4 w-4\"/>\n                    {loading ? 'Cancelando...' : 'Cancelar Turno'}\n                </button>\n            )}\n        </div>\n    );\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AAJA;;;;;AAMe,SAAS,qBAAqB,EAAE,KAAK,EAAE;IAClD,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAC;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAC;IACnC,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAC;IAEvC,+FAA+F;IAC/F,MAAM,MAAM,IAAI;IAChB,IAAI,QAAQ,CAAC,GAAG,GAAG,GAAG;IACtB,MAAM,aAAa,IAAI,KAAK,MAAM,KAAK,GAAG;IAE1C,MAAM,gBACF,CAAC,MAAM,MAAM,KAAK,eAAe,MAAM,MAAM,KAAK,YAAY,KAC9D,cAAc;IAGlB,IAAI,CAAC,eAAe;QAChB,OAAO,MAAM,6CAA6C;IAC9D;IAEA,MAAM,eAAe;QACjB,IAAI,CAAC,OAAO,OAAO,CAAC,wFAAwF;YACxG;QACJ;QAEA,WAAW;QACX,SAAS;QACT,WAAW;QAEX,IAAI;YACA,MAAM,SAAS,MAAM,IAAA,qLAAoB,EAAC,MAAM,EAAE;YAClD,IAAI,OAAO,OAAO,EAAE;gBAChB,WAAW;YACX,mGAAmG;YACvG,OAAO;gBACH,SAAS,OAAO,KAAK,IAAI;YAC7B;QACJ,EAAE,OAAO,KAAK;YACV,SAAS;QACb,SAAU;YACN,WAAW;QACf;IACJ;IAEA,qBACI,8OAAC;QAAI,WAAU;;YACV,uBAAS,8OAAC;gBAAE,WAAU;0BAAyC;;;;;;YAC/D,yBAAW,8OAAC;gBAAE,WAAU;0BAA2C;;;;;;YAEnE,CAAC,yBACG,8OAAC;gBACE,SAAS;gBACT,UAAU;gBACV,WAAU;;kCAEV,8OAAC,0JAAQ;wBAAC,WAAU;;;;;;oBACnB,UAAU,kBAAkB;;;;;;;;;;;;;AAKjD","debugId":null}}]
}